<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨水的天空落了雨</title>
  
  <subtitle>rainSkyの乌托邦</subtitle>
  <link href="https://rain-sky.github.io/atom.xml" rel="self"/>
  
  <link href="https://rain-sky.github.io/"/>
  <updated>2021-08-18T10:05:19.631Z</updated>
  <id>https://rain-sky.github.io/</id>
  
  <author>
    <name>rain-Sky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集合初探</title>
    <link href="https://rain-sky.github.io/2021/08/18/%E9%9B%86%E5%90%88%E5%88%9D%E6%8E%A2/"/>
    <id>https://rain-sky.github.io/2021/08/18/%E9%9B%86%E5%90%88%E5%88%9D%E6%8E%A2/</id>
    <published>2021-08-18T10:02:54.000Z</published>
    <updated>2021-08-18T10:05:19.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="-Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>排序算法归纳</title>
    <link href="https://rain-sky.github.io/2021/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E7%BA%B3/"/>
    <id>https://rain-sky.github.io/2021/08/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BD%92%E7%BA%B3/</id>
    <published>2021-08-15T09:50:21.000Z</published>
    <updated>2021-08-17T09:45:02.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h2><p><span class="github-emoji"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://mp.weixin.qq.com/s/qEc9cJv6wooTZybaUMS2jA">部分转载自</a></p><div class="note pink icon simple"><i class="note-icon far fa-hand-scissors"></i><p>十大排序</p></div><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815202038.png"></p><div class="note blue icon simple"><i class="note-icon far fa-hand-scissors"></i><p>性能比较</p></div><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815203401.png"></p><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815203439.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) {</span><br><span class="line">                swap(arr, j, j+<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note blue icon modern"><i class="note-icon fas fa-fan"></i><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815203928.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">                min = j;</span><br><span class="line">        }</span><br><span class="line">        swap(arr, min, i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815204428.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp; j--)</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://img2018.cnblogs.com/common/581342/202002/581342-20200223164618567-1307360771.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort_split_half</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, dk, temp;</span><br><span class="line">    <span class="keyword">for</span> (dk = n &gt;&gt; <span class="number">1</span>; dk &gt; <span class="number">0</span>; dk = dk &gt;&gt; <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">for</span> (i = dk; i &lt; n; i++) {</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - dk; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= dk)</span><br><span class="line">                arr[j + dk] = arr[j];</span><br><span class="line">            arr[j + dk] = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815205445.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 将 arr[L..M] 和 arr[M+1..R] 归并 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> LEFT_SIZE = M - L + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> RIGHT_SIZE = R - M;</span><br><span class="line">    <span class="keyword">int</span> left[LEFT_SIZE];</span><br><span class="line">    <span class="keyword">int</span> right[RIGHT_SIZE];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="comment">// 以 M 为分割线，把原数组分成左右子数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = L; i &lt;= M; i++) left[i - L] = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (i = M + <span class="number">1</span>; i &lt;= R; i++) right[i - M - <span class="number">1</span>] = arr[i];</span><br><span class="line">    <span class="comment">// 再合并成一个有序数组（从两个序列中选出最小值依次插入）</span></span><br><span class="line">    i = <span class="number">0</span>; j = <span class="number">0</span>; k = L;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LEFT_SIZE &amp;&amp; j &lt; RIGHT_SIZE) arr[k++] = left[i] &lt; right[j] ? left[i++] : right[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LEFT_SIZE) arr[k++] = left[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; RIGHT_SIZE) arr[k++] = right[j++];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 将 arr[L..R] 平分为 arr[L..M] 和 arr[M+1..R]</span></span><br><span class="line">    <span class="keyword">int</span> M = (L + R) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 分别递归地将子序列排序为有序数列</span></span><br><span class="line">    merge_sort(arr, L, M);</span><br><span class="line">    merge_sort(arr, M + <span class="number">1</span>, R);</span><br><span class="line">    <span class="comment">// 将两个排序后的子序列再归并到 arr</span></span><br><span class="line">    merge(arr, L, M, R);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815205606.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选取序列的第一个元素作为基准 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select_pivot</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> arr[low];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, pivot;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">    pivot = select_pivot(arr, low);</span><br><span class="line">    i = low;</span><br><span class="line">    j = high;</span><br><span class="line">    <span class="keyword">while</span> (i != j) {</span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt;= pivot &amp;&amp; i &lt; j) j--;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt;= pivot &amp;&amp; i &lt; j) i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(arr, i, j);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//最终交换相遇时下标元素和基准值</span></span><br><span class="line">    arr[low] = arr[i];</span><br><span class="line">    arr[i] = pivot;</span><br><span class="line">    quick_sort(arr, low, i - <span class="number">1</span>);</span><br><span class="line">    quick_sort(arr, i + <span class="number">1</span>, high);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//实现方式二，严蔚敏版---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qucik_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> left = l;</span><br><span class="line">    <span class="keyword">int</span> right = r;</span><br><span class="line">    <span class="comment">//保存基准值</span></span><br><span class="line">    <span class="keyword">int</span> pivot = arr[l];</span><br><span class="line">    <span class="comment">//交替移动左右指针</span></span><br><span class="line">    <span class="keyword">while</span>(left&lt;right){</span><br><span class="line"><span class="comment">//移动右指针，发现比基准值小的数停下</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right&amp;&amp;arr[right]&gt;=pivot)right--;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)arr[left] = arr[right];</span><br><span class="line">        <span class="comment">//移动左指针，发现比基准值大的数停下</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right&amp;&amp;arr[left]&lt;=pivot)left++;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)arr[right] = arr[left];</span><br><span class="line">        <span class="comment">//当两指针相遇时，将基准值赋值给相遇时的下标元素</span></span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)arr[left] = pivot;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//处理左右子序列</span></span><br><span class="line">    qucik_sort(arr,l,left<span class="number">-1</span>);</span><br><span class="line">    qucik_sort(arr,left+<span class="number">1</span>,r);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F1531324%2F202007%2F1531324-20200723170730928-135292175.gif&amp;refer=http%3A%2F%2Fimg2020.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1631624613&amp;t=982b5b65b495669934261b1fb96a3b83"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">    <span class="comment">// n 表示序列长度，i 表示父节点下标</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 左侧子节点下标</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 右侧子节点下标</span></span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max = i;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; tree[left] &gt; tree[max]) max = left;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; tree[right] &gt; tree[max]) max = right;</span><br><span class="line">    <span class="keyword">if</span> (max != i) {</span><br><span class="line">        swap(tree, max, i);</span><br><span class="line">        heapify(tree, n, max);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="comment">// 树最后一个节点的下标</span></span><br><span class="line">    <span class="keyword">int</span> last_node = n - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 最后一个节点对应的父节点下标</span></span><br><span class="line">    <span class="keyword">int</span> parent = (last_node - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = parent; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        heapify(tree, n, i);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> tree[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    build_heap(tree, n);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="comment">// 将堆顶元素与最后一个元素交换</span></span><br><span class="line">        swap(tree, i, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 调整成大顶堆</span></span><br><span class="line">        heapify(tree, i, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210815210504.gif"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counting_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 定义辅助空间并初始化</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> r = max - min + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> C[r];</span><br><span class="line">    <span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="keyword">sizeof</span>(C));</span><br><span class="line">    <span class="comment">// 定义目标数组</span></span><br><span class="line">    <span class="keyword">int</span> R[n];</span><br><span class="line">    <span class="comment">// 统计每个元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) C[arr[i] - min]++;</span><br><span class="line">    <span class="comment">// 对辅助空间内数据进行计算</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; r; i++) C[i] += C[i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 反向填充目标数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) R[--C[arr[i] - min]] = arr[i];</span><br><span class="line">    <span class="comment">// 目标数组里的结果重新赋值给 arr</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] = R[i];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Fseo%2Fmianshiti%2F20191125%2F8c57857f177717f04d1255c32dbbec4e.gif&amp;refer=http%3A%2F%2Fimg.kanzhun.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1631624778&amp;t=64735568861df6c09e2c25cdcc98bd45"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。 </li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n, <span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span> || r &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据最大/最小元素和桶数量，计算出每个桶对应的元素范围</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> range = (max - min + <span class="number">1</span>) / r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立桶对应的二维数组，一个桶里最多可能出现 n 个元素</span></span><br><span class="line">    <span class="keyword">int</span> buckets[r][n];</span><br><span class="line">    <span class="built_in">memset</span>(buckets, <span class="number">0</span>, <span class="keyword">sizeof</span>(buckets));</span><br><span class="line">    <span class="keyword">int</span> counts[r];</span><br><span class="line">    <span class="built_in">memset</span>(counts, <span class="number">0</span>, <span class="keyword">sizeof</span>(counts));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">int</span> k = (arr[i] - min) / range;</span><br><span class="line">        buckets[k][counts[k]++] = arr[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; r; i++) {</span><br><span class="line">        <span class="comment">// 分别对每个非空桶内数据进行排序，比如计数排序</span></span><br><span class="line">        <span class="keyword">if</span> (counts[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        counting_sort(buckets[i], counts[i]);</span><br><span class="line">        <span class="comment">// 拼接非空的桶内数据，得到最终的结果</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; counts[i]; j++) {</span><br><span class="line">            arr[index++] = buckets[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><div class="note pink icon modern"><i class="note-icon fas fa-fan"></i><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4></div><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动图演示</p><img src="https://gitee.com/rain-sky/images/raw/master/20210815205954.gif" style="zoom: 80%;"><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>文字描述</p><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>算法实现</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基数，范围0~9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RADIX 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    <span class="comment">// 获取最大值和最小值</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> i, j, l;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (max &lt; arr[i]) max = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (min &gt; arr[i]) min = arr[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 假如序列中有负数，所有数加上一个常数，使序列中所有值变成正数</span></span><br><span class="line">    <span class="keyword">if</span> (min &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] -= min;</span><br><span class="line">        max -= min;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 获取最大值位数</span></span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (max &gt; <span class="number">0</span>) {</span><br><span class="line">        max /= RADIX;</span><br><span class="line">        d ++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">queue</span>[RADIX][n];</span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">queue</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">int</span> count[RADIX] = {<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; d; i++) {</span><br><span class="line">        <span class="comment">// 分配数据</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">int</span> key = arr[j] % (<span class="keyword">int</span>)<span class="built_in">pow</span>(RADIX, i + <span class="number">1</span>) / (<span class="keyword">int</span>)<span class="built_in">pow</span>(RADIX, i);</span><br><span class="line">            <span class="built_in">queue</span>[key][count[key]++] = arr[j];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 收集数据</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; RADIX; j++) {</span><br><span class="line">            <span class="keyword">for</span> (l = <span class="number">0</span>; l &lt; count[j]; l++) {</span><br><span class="line">                arr[c++] = <span class="built_in">queue</span>[j][l];</span><br><span class="line">                <span class="built_in">queue</span>[j][l] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            count[j] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 假如序列中有负数，收集排序结果时再减去前面加上的常数</span></span><br><span class="line">    <span class="keyword">if</span> (min &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) arr[i] += min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;经典排序算法&quot;&gt;&lt;a href=&quot;#经典排序算法&quot; class=&quot;headerlink&quot; title=&quot;经典排序算法&quot;&gt;&lt;/a&gt;经典排序算法&lt;/h2&gt;&lt;p&gt;&lt;span class=&quot;github-emoji&quot;&gt;&lt;span&gt;➡&lt;/span&gt;&lt;img src=&quot;htt</summary>
      
    
    
    
    
    <category term="-算法" scheme="https://rain-sky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深思熟虑,选择考研</title>
    <link href="https://rain-sky.github.io/2021/08/14/%E6%B7%B1%E6%80%9D%E7%86%9F%E8%99%91-%E9%80%89%E6%8B%A9%E8%80%83%E7%A0%94/"/>
    <id>https://rain-sky.github.io/2021/08/14/%E6%B7%B1%E6%80%9D%E7%86%9F%E8%99%91-%E9%80%89%E6%8B%A9%E8%80%83%E7%A0%94/</id>
    <published>2021-08-14T01:50:08.000Z</published>
    <updated>2021-08-17T06:21:34.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="考研科目情况"><a href="#考研科目情况" class="headerlink" title="考研科目情况"></a>考研科目情况</h3><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 408计算机学科基础综合：数据结构（45），计算机组成原理（45），操作系统（35），计算机网络（25）</p><p>参考教材：计组唐朔飞，操作系统汤小丹，数据结构严蔚敏，计算机网络谢希仁。</p><p>分值分布：</p><ul><li><p>3.1 选择题 (共80分)</p><table><thead><tr><th>选择题</th><th>题目序号</th><th>分值</th></tr></thead><tbody><tr><td>数据结构</td><td>1~11</td><td>11X2=22分</td></tr><tr><td>计算机组成原理</td><td>12~22</td><td>11X2=22分</td></tr><tr><td>操作系统</td><td>23~32</td><td>10X2=20分</td></tr><tr><td>计算机网络</td><td>33~40</td><td>8X2=16分</td></tr></tbody></table></li><li><p>3.1 综合应用题 (共70分)<br>一共有41、42、43、44 、45、46 、47，共七个大题，总分值70分<br>21年考研大题41~47分值分布依次为：15、8、15、8、7、8、9</p></li></ul><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 数学一：：高等代数（或微积分）分值占比约60%，线性代数、概率论与数理统计各占约20%。</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>英语一：</p><ul><li>掌握5500左右词汇的基本含义</li><li>掌握词汇之间的词义关系，如同义词、近义词、反义词等</li><li>掌握词汇之间的搭配关系，如动词与介词、形容词与介词、形容词与名词等</li><li>掌握词汇生成的基本知识，如词源、词根、词缀等</li></ul><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>政治：</p><ol><li>考察学科范围</li></ol><blockquote><p><em>《马克思主义基本原理概论》</em>——<strong>约24%</strong><br><em>《毛泽东思想和中国特色社会主义理论体系概论》</em>——<strong>约30%</strong><br><em>《中国近现代史纲要》</em>——<strong>约14%</strong><br><em>《思想道德修养与法律基础》</em>——<strong>约16%</strong><br><em>《形势与政策以及当代世界经济与政治》</em>——<strong>约16%</strong></p></blockquote><ol start="2"><li>试卷题型及分值</li></ol><table><thead><tr><th>题目类型</th><th>题目序号</th><th>分值</th></tr></thead><tbody><tr><td>单项选择题</td><td>1~16</td><td>16X1=16分</td></tr><tr><td>多项选择题</td><td>17~33</td><td>17X2=34分</td></tr><tr><td>材料分析题</td><td>共5个大题</td><td>10X5=50分</td></tr></tbody></table><h3 id="择校情况"><a href="#择校情况" class="headerlink" title="择校情况"></a>择校情况</h3><h3 id="复习计划"><a href="#复习计划" class="headerlink" title="复习计划"></a>复习计划</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;考研科目情况&quot;&gt;&lt;a href=&quot;#考研科目情况&quot; class=&quot;headerlink&quot; title=&quot;考研科目情况&quot;&gt;&lt;/a&gt;考研科目情况&lt;/h3&gt;&lt;p&gt;&lt;span class=&quot;github-emoji&quot;&gt;&lt;span&gt;1⃣&lt;/span&gt;&lt;img src=&quot;ht</summary>
      
    
    
    
    
    <category term="-考研" scheme="https://rain-sky.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Java类加载再分析</title>
    <link href="https://rain-sky.github.io/2021/08/13/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%86%8D%E5%88%86%E6%9E%90/"/>
    <id>https://rain-sky.github.io/2021/08/13/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%86%8D%E5%88%86%E6%9E%90/</id>
    <published>2021-08-13T10:01:43.000Z</published>
    <updated>2021-08-13T10:01:43.768Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>关于String,StringBuffer等</title>
    <link href="https://rain-sky.github.io/2021/08/11/%E5%85%B3%E4%BA%8EString-StringBuffer%E7%AD%89/"/>
    <id>https://rain-sky.github.io/2021/08/11/%E5%85%B3%E4%BA%8EString-StringBuffer%E7%AD%89/</id>
    <published>2021-08-11T08:15:38.000Z</published>
    <updated>2021-08-11T13:00:51.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于String，StringBuffer，StringBuilder"><a href="#关于String，StringBuffer，StringBuilder" class="headerlink" title="关于String，StringBuffer，StringBuilder"></a>关于String，StringBuffer，StringBuilder</h3><h4 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h4><img src="https://gitee.com/rain-sky/images/raw/master/20210810161050.png" style="zoom:67%;"><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><blockquote><p>创建</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用字符串创建，指向的是常量池中的常量</span></span><br><span class="line">String s1 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s2 = <span class="string">"Runoob"</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line">String s3 = s1;                    <span class="comment">// 相同引用</span></span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line">String s5 = <span class="keyword">new</span> String(<span class="string">"Runoob"</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">相当于： </span><br><span class="line"><span class="keyword">char</span> data[] = {<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>};</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/rain-sky/images/raw/master/20210810161223.png"></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>String类型的常量池比较特殊。它的主要使用方法有两种：</p><p>1：直接用双引号声明出来的String对象存储在常量池中，引用指向常量池中常量的地址。</p><p>2:  如果是一个变量+一个字符串常量，编译阶段无法确定是字符串常量，此种方式也是在堆内存上创建</p><p>3：使用new关键字创建的String对象，会在堆中创建</p><blockquote><p>String的创建方式与常量池</p></blockquote><p><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>首先，== 比较的是对象在jvm中的内存地址，在object对象中的equals方法同样是比较地址，不过String类重写了equals方法，比较的是String的内容，在比较内容之前先比较地址，地址一致直接返回true。同时，String也重写了HashCode方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已知如下，以下操作结果为true的是</span></span><br><span class="line">String a=<span class="string">"a"</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">String b=<span class="string">"b"</span>;<span class="comment">//常量池对象</span></span><br><span class="line">String c=a+b;<span class="comment">//a+b操作会在堆上创建一个，然后返回堆上内存地址</span></span><br><span class="line">String d=<span class="keyword">new</span> String(<span class="string">"ab"</span>);<span class="comment">//堆上创建，返回堆上内存地址</span></span><br><span class="line">--------------------------------</span><br><span class="line">(a+b).equals(c)    <span class="keyword">true</span></span><br><span class="line">a+b==c             <span class="keyword">false</span> <span class="comment">//a+b会再次在堆上创建，最终也指向常量池中的"ab"，而==比较的是堆上这个引用的地址，已然与执行String c=a+b;所在堆中创建的引用不是同一个，故false</span></span><br><span class="line">c==d   <span class="keyword">false</span></span><br><span class="line">c.equals(d)   <span class="keyword">true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//再有一例</span></span><br><span class="line">String s1  = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(s1.hashCode());</span><br><span class="line">System.out.println(s2.hashCode());</span><br><span class="line">System.out.println(<span class="string">"hello"</span>.hashCode());</span><br><span class="line">System.out.println(s1==<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line"><span class="comment">//输出-------------------------------</span></span><br><span class="line"><span class="number">99162322</span></span><br><span class="line"><span class="number">99162322</span></span><br><span class="line"><span class="number">99162322</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>源码一瞥，基于jdk1.8版本，其他版本或已有更改</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>{</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.value = original.value;</span><br><span class="line">        <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Object中的HashCode方法：public native int hashCode();这是一个有C++编写的函数为Java调用，在这个方法里面调用非java语言编写的函数接口来返回一个hashCode码</span></span><br><span class="line">    <span class="comment">//String重载的hashCode()方法</span></span><br><span class="line">    <span class="comment">//如果hash值为0，生成hash，只会执行一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> h = hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">char</span> val[] = value;</span><br><span class="line"><span class="comment">//hashCode的生成算法，由此可知只要value数组值相同，hashCode必定相同</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) {</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            }</span><br><span class="line">            hash = h;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**    </span></span><br><span class="line"><span class="comment">    调用intern方法时，如果池已包含等于此{<span class="doctag">@code</span> string}对象的字符串，由{<span class="doctag">@link</span>#equals（Object）}方法，则池中的字符串为</span></span><br><span class="line"><span class="comment">返回。否则，此{<span class="doctag">@code</span> String}对象将添加到字符串池并返回对此{<span class="doctag">@code</span> String}对象的引用。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">//返回一个与此字符串内容相同的字符串，但它是保证来自唯一字符串池。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>从源码可以看出String底层本质上是一个被final修饰的数组</p><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>String为什么不可变？本质是由于private与final两个关键字修饰了value[]这个数组，final修饰了value说明value这个引用不可变，不可再指向其他数组，但是value指向的数组本身是可以变化的，由于private我们无法操作到这个value数组，故我们无法去改变这个数组的值。</p><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>那么用什么方式可以访问私有成员呢？ 没错，用反射， 可以反射出String对象中的value属性， 进而改变通过获得的value引用改变数组的结构。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建字符串"Hello World"， 并赋给引用s</span></span><br><span class="line">    String s = <span class="string">"Hello World"</span>; </span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"s = "</span> + s);<span class="comment">//Hello World</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取String类中的value字段</span></span><br><span class="line">    Field valueFieldOfString = String.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变value属性的访问权限</span></span><br><span class="line">    valueFieldOfString.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取s对象上的value属性的值</span></span><br><span class="line">    <span class="keyword">char</span>[] value = (<span class="keyword">char</span>[]) valueFieldOfString.get(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变value所引用的数组中的第5个字符</span></span><br><span class="line">    value[<span class="number">5</span>] = <span class="string">'_'</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"s = "</span> + s);  <span class="comment">//Hello_World</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出--------------------------------------------------</span></span><br><span class="line">s = Hello World</span><br><span class="line">s = Hello_World</span><br></pre></td></tr></tbody></table></figure><p>在这个过程中，s始终引用的同一个String对象，但是再反射前后，这个String对象发生了变化， 也就是说，通过反射是可以修改所谓的“不可变”对象的。</p><blockquote><p>常用方法，解题多用</p></blockquote><table><thead><tr><th><a href="https://www.runoob.com/java/java-string-charat.html">char charAt(int index)</a> 返回指定索引处的 char 值。</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(String anotherString)</a> 按字典顺序比较两个字符串。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-concat.html">String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-contentequals.html">boolean contentEquals(StringBuffer sb)</a> 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-endswith.html">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-equals.html">boolean equals(Object anObject)</a> 将此字符串与指定的对象比较。</td></tr><tr><td>[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes()</a>  使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td>[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes(String charsetName)</a> 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td>[void getChars(int srcBegin, int srcEnd, char<a href="https://www.runoob.com/java/java-string-getchars.html">] dst, int dstBegin)</a> 将字符从此字符串复制到目标字符数组。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-hashcode.html">int hashCode()</a> 返回此字符串的哈希码。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch)</a> 返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch, int fromIndex)</a> 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str)</a>  返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str, int fromIndex)</a> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch)</a>  返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch, int fromIndex)</a> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str)</a> 返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str, int fromIndex)</a>  返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-length.html">int length()</a> 返回此字符串的长度。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-matches.html">boolean matches(String regex)</a> 告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-replace.html">String replace(char oldChar, char newChar)</a> 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-replaceall.html">String replaceAll(String regex, String replacement)</a> 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-replacefirst.html">String replaceFirst(String regex, String replacement)</a>  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td>[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex)</a> 根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td>[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex, int limit)</a> 根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix)</a> 测试此字符串是否以指定的前缀开始。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex)</a> 返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex, int endIndex)</a> 返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td>[char<a href="https://www.runoob.com/java/java-string-tochararray.html">] toCharArray()</a> 将此字符串转换为一个新的字符数组。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase(Locale locale)</a>  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase(Locale locale)</a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-contains.html">contains(CharSequence chars)</a> 判断是否包含指定的字符系列。</td></tr><tr><td><a href="https://www.runoob.com/java/java-string-isempty.html">isEmpty()</a> 判断字符串是否为空。</td></tr></tbody></table><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><hr><blockquote><p>关于</p></blockquote><p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p><blockquote><p>常用方法</p></blockquote><table><thead><tr><th align="left">序号</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">public StringBuffer append(String s) 将指定的字符串追加到此字符序列。</td></tr><tr><td align="left">2</td><td align="left">public StringBuffer reverse()  将此字符序列用其反转形式取代。</td></tr><tr><td align="left">3</td><td align="left">public delete(int start, int end) 移除此序列的子字符串中的字符。</td></tr><tr><td align="left">4</td><td align="left">public insert(int offset, int i) 将 int参数的字符串表示形式插入此序列中。</td></tr><tr><td align="left">5</td><td align="left">insert(int offset, String str) 将 str参数的字符串插入此序列中。</td></tr><tr><td align="left">6</td><td align="left">replace(int start, int end, String str) 使用给定String 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><p><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>String中的方法StringBuffer也基本有</p><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><hr><blockquote><p>描述</p></blockquote><p>一个可变的字符序列。 此类提供与<code>StringBuffer</code>兼容的API，但不保证同步。 此类设计用作<code>StringBuffer</code>替代品，用于单个线程使用字符串缓冲区的位置（通常情况下）。 在可能的情况下，建议使用此类优先于<code>StringBuffer</code>因为在大多数实现中它会更快。<code>StringBuilder</code>实例不适合多线程使用。 如果需要这样的同步，则建议使用<a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuffer.html"><code>StringBuffer</code></a> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;关于String，StringBuffer，StringBuilder&quot;&gt;&lt;a href=&quot;#关于String，StringBuffer，StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;关于String，StringBuffer，</summary>
      
    
    
    
    
    <category term="-Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>web须知</title>
    <link href="https://rain-sky.github.io/2021/08/08/web%E9%A1%BB%E7%9F%A5/"/>
    <id>https://rain-sky.github.io/2021/08/08/web%E9%A1%BB%E7%9F%A5/</id>
    <published>2021-08-08T11:01:16.000Z</published>
    <updated>2021-08-08T12:35:11.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="http报文"><a href="#http报文" class="headerlink" title="http报文"></a>http报文</h3><blockquote><p>请求报文，通常分请求行，请求头，请求体</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808172308.jpeg"></p><blockquote><p>一个例子</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808180756.png"></p><blockquote><p>响应报文，响应行，响应头，响应体(像组装数据后的html)</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808173413.jpeg"></p><blockquote><p>一个报文例子</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808180521.png"></p><h3 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h3><p>关于get与post的区别：<a href="https://zhuanlan.zhihu.com/p/57361216">推荐阅读</a></p><p><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>两种报文的比对</p><p>get方法没有请求体，数据通过url传递，不止?一种写法，restful也是url的一种传参风格，post方法有请求体</p><table><thead><tr><th align="center"></th><th align="center">GET</th><th align="center">POST</th></tr></thead><tbody><tr><td align="center">后退按钮/刷新</td><td align="center">无害</td><td align="center">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td align="center">书签</td><td align="center">可收藏为书签</td><td align="center">不可收藏为书签</td></tr><tr><td align="center">缓存</td><td align="center">能被缓存</td><td align="center">不能缓存</td></tr><tr><td align="center">编码类型</td><td align="center">application/x-www-form-urlencoded</td><td align="center">application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td align="center">历史</td><td align="center">参数保留在浏览器历史中。</td><td align="center">参数不会保存在浏览器历史中。</td></tr><tr><td align="center">对数据长度的限制</td><td align="center">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td align="center">无限制。</td></tr><tr><td align="center">对数据类型的限制</td><td align="center">只允许 ASCII 字符。</td><td align="center">没有限制。也允许二进制数据。</td></tr><tr><td align="center">安全性</td><td align="center">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td align="center">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td align="center">可见性</td><td align="center">数据在 URL 中对所有人都是可见的。</td><td align="center">数据不会显示在 URL 中。</td></tr></tbody></table><h2 id="request与response"><a href="#request与response" class="headerlink" title="request与response"></a>request与response</h2><h3 id="tomcat一次简单的请求响应过程"><a href="#tomcat一次简单的请求响应过程" class="headerlink" title="tomcat一次简单的请求响应过程"></a>tomcat一次简单的请求响应过程</h3><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808180050.png"></p><h3 id="tomcat内置对象"><a href="#tomcat内置对象" class="headerlink" title="tomcat内置对象"></a>tomcat内置对象</h3><p>在之前学习过程中使用的对象大部分都是我们自己使用new关键字或者反射创建的，现在容器中会自动创建对象，我们只要直接使用即可，不需要我们再去创建这些对象，在Tomcat容器中提供了九种内置对象，有一些不常用。这些内置对象的名字和类型必须记下来。</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>pageContext</strong></td><td><strong>javax.servlet.jsp.PageContext</strong></td><td>表示的是页面上下文环境</td></tr><tr><td><strong>request</strong></td><td><strong>HttpServletRequest</strong></td><td>表示一次用户请求</td></tr><tr><td><strong>response</strong></td><td><strong>HttpServletResponse</strong></td><td>表示一次响应</td></tr><tr><td><strong>session</strong></td><td><strong>HttpSession</strong></td><td>表示一个用户信息</td></tr><tr><td><strong>application</strong></td><td><strong>ServletContext</strong></td><td>表示服务器的上下文环境</td></tr><tr><td><strong>page</strong></td><td><strong>Object</strong></td><td>表示一个页面对象</td></tr><tr><td><strong>out</strong></td><td><strong>JspWiter</strong></td><td>可以使用其输出信息</td></tr><tr><td><strong>exception</strong></td><td><strong>throwable</strong></td><td>表示异常信息</td></tr><tr><td><strong>config</strong></td><td><strong>ServletConfig</strong></td><td>可以获取配置文件的一些信息</td></tr></tbody></table><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><blockquote><p>request的函数大概可以分为以下三类</p></blockquote><ul><li>获取请求头</li><li>获取请求体</li><li>获取请求行</li></ul><p>具体可以参看官网解释</p><p><a href="https://link.zhihu.com/?target=http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpServletRequest.html">HttpServletRequest API</a></p><blockquote><p>request域</p></blockquote><p>request对象同时也是一个域对象，我们可以使用request来传输数据。request域对象不像Servlet域一样一直能使用，request只能在一次请求过程之中传递数据，请求结束即自动销毁。具体使用涉及到以下三个方法：</p><ul><li>setAttribute(String name, Object o)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ul><blockquote><p>乱码问题</p></blockquote><p>在获取请求报文相关的内容的时候，有时候我们会发现获取到的内容是乱码的内容。通常情况是浏览器向服务器发送的请求参数中包含中文字符，服务器获取到的请求参数的值是乱码。</p><p>浏览器向服务器发送请求，因为浏览器与服务器之间的通信实质上是socket流，所以要先将请求参数（字符）转换成字节，也就是编码过程，服务器接收到请求参数后进行解码（字节转字符），然后封装到request对象中。如果客户端的编码与服务器端的解码不统一，就会导致通过request获取到的请求参数的值是乱码。</p><p>所以为了解决request乱码的问题，我们只需要在服务器端设置相应的解码格式即可。</p><p>具体设置代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">//设置request对象的解码方式</span></span><br></pre></td></tr></tbody></table></figure><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><p>Tomcat传给Servlet时，它还是空的对象。Servlet逻辑处理后得到结果，最终通过response.write()方法，将结果写入response内部的缓冲区。Tomcat会在servlet处理结束后，拿到response，遍历里面的信息，组装成HTTP响应发给客户端。</p><p>HttpServletResponse对象代表服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。</p><blockquote><p>response的函数大概可以分为以下三类</p></blockquote><ul><li>设置响应状态行</li><li>设置响应头</li><li>设置响应实体</li></ul><p>具体可以参看官网解释：</p><p><a href="https://link.zhihu.com/?target=http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpServletRequest.html">HttpServletResponse API</a></p><blockquote><p>乱码问题</p></blockquote><p>有时候服务器向浏览器发送的数据包含中文字符，在 浏览器中显示的是乱码。乱码的原因是 response 对象的字符输出流在编码时采用的字符码表是 ISO-8859-1，该码表不兼容中文，所以就会出现乱码的问题。处理乱码问题，有下面两种方案：</p><p>方法一：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"utf-8"</span>);    <span class="comment">//设置 HttpServletResponse使用utf-8编码</span></span><br><span class="line">response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/html;charset=utf-8"</span>);    <span class="comment">//通知浏览器使用utf-8解码</span></span><br></pre></td></tr></tbody></table></figure><p>方法二：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);    <span class="comment">//包含方法一的两个功能</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>重定向有两种实现方式：</p></blockquote><ul><li>方法一</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在响应头中添加302状态码，告诉浏览器需要进行重定向 </span></span><br><span class="line">response.setStatus(<span class="number">302</span>)；</span><br><span class="line"><span class="comment">//在响应头中添加Location，指定重定向的位置 </span></span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>方法二</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setRedirect(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>禁止缓存</p></blockquote><p>有时候我们想让用户端不缓存html,css,js等资源，我们可以通过对response头进行一定的设置来实现这样的功能，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, -<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>文件传送</p></blockquote><p>客户端有时候会请求某张图片的内容，我们需要将图片文件返回给客户端，一般来说使用Response传送图片的做法如下：</p><p>示例代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获得图片的绝对路径</span></span><br><span class="line">        String path = getServletContext().getRealPath(<span class="string">"man.jpg"</span>);</span><br><span class="line">        System.out.println(path);</span><br><span class="line"><span class="comment">//        获取本地字节输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line"><span class="comment">//        获取本地字节输出流</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        建立一个数组 一次读1024个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bytes))!=-<span class="number">1</span>){</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        }</span><br><span class="line">        fis.close();</span><br><span class="line">        sos.close();</span><br></pre></td></tr></tbody></table></figure><h2 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h2><p><a href="https://zhuanlan.zhihu.com/p/27669892">推荐阅读</a></p><h3 id="http是个无状态协议"><a href="#http是个无状态协议" class="headerlink" title="http是个无状态协议"></a>http是个无状态协议</h3><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808195850.png"></p><h3 id="cookie和session解释"><a href="#cookie和session解释" class="headerlink" title="cookie和session解释"></a>cookie和session解释</h3><p><strong>cookie</strong></p><ul><li>客户端技术   （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><blockquote><p>报文里的样子</p></blockquote><p>①请求报文（没有Cookie 信息的状态）</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/reader/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hackr.jp</span><br><span class="line">*首部字段内没有Cookie的相关信息</span><br></pre></td></tr></tbody></table></figure><p>②响应报文（服务器端生成Cookie 信息）</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span>: Thu, 12 Jul 2012 07:12:20 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache</span><br><span class="line">＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,10-Oct-12 07:12:20 GMT＞</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain; charset=UTF-8</span><br></pre></td></tr></tbody></table></figure><p>③请求报文（自动发送保存着的Cookie 信息）</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/image/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: hackr.jp</span><br><span class="line"><span class="attribute">Cookie</span>: sid=1342077140226724</span><br></pre></td></tr></tbody></table></figure><blockquote><p>关于Cookie 的首部字段</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808200006.png"></p><p><strong>set-Cookie</strong></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span>: status=enable; expires=Tue, 05 Jul 2011 07:26:31 GMT; ⇒</span><br><span class="line">path=/; domain=.hackr.jp;</span><br></pre></td></tr></tbody></table></figure><p><strong>属性解释</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808200442.png"></p><p><strong>expires 属性</strong></p><p>Cookie 的expires 属性指定浏览器可发送Cookie 的有效期。当省略expires 属性时，Cookie仅在浏览器关闭之前有效。<br>另外，一旦Cookie 从服务器端发送至客户端，服务器端就不存在可以显式删除Cookie 的方法。但可通过覆盖已过期的Cookie，实现对客户端Cookie 的实质性删除操作。</p><p><strong>path 属性</strong></p><p>Cookie 的path 属性可用于限制指定Cookie 的发送范围的文件目录。不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱有期待。</p><p> <strong>domain 属性</strong></p><p>通过Cookie 的domain 属性指定的域名可做到与结尾匹配一致。比如， 当指定<a href="http://example.com/">http://example.com</a> 后， 除<a href="http://example.com/">http://example.com</a> 以外，<a href="https://link.zhihu.com/?target=http://www.example.com">Example Domain</a>或www2.example.com 等都可以发送Cookie。因此，除了针对具体指定的多个域名发送Cookie 之外，不指定domain 属性显得更安全。</p><p> <strong>secure 属性</strong></p><p>Cookie 的secure 属性用于限制Web 页面仅在HTTPS 安全连接时，才可以发送Cookie。发送Cookie 时，指定secure 属性的方法如下所示。<br>Set-Cookie: name=value; secure<br>以上例子仅当在https ：//<a href="https://link.zhihu.com/?target=http://www.example.com/">Example Domain</a>（HTTPS）安全连接的情况下才会进行Cookie 的回收。也就是说，即使域名相同时http : //<a href="https://link.zhihu.com/?target=http://www.example.com/">Example Domain</a>（HTTP） 也不会发生Cookie 回收行为。当省略secure 属性时，不论HTTP 还是HTTPS，都会对Cookie 进行回收。</p><p> <strong>HttpOnly 属性</strong></p><p>Cookie 的HttpOnly 属性是Cookie 的扩展功能，它使JavaScript 脚本无法获得Cookie。其主要目的为防止跨站脚本攻击（Cross-sitescripting，XSS）对Cookie 的信息窃取。<br>发送指定HttpOnly 属性的Cookie 的方法如下所示。<br>Set-Cookie: name=value; HttpOnly<br>通过上述设置，通常从Web 页面内还可以对Cookie 进行读取操作。但使用JavaScript 的document.cookie 就无法读取附加HttpOnly 属性后的Cookie 的内容了。因此，也就无法在XSS 中利用JavaScript 劫持Cookie 了。<br>虽然是独立的扩展功能，但Internet Explorer 6 SP1 以上版本等当下的主流浏览器都已经支持该扩展了。另外顺带一提，该扩展并非是为了防止XSS 而开发的。</p><blockquote><p>什么是Session</p></blockquote><p>在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在 Session 对象中。</p><blockquote><p>通过Cookie来管理Session</p></blockquote><p>基于表单认证的标准规范尚未有定论，一般会使用Cookie 来管理Session（会话）。<br>基于表单认证本身是通过服务器端的Web 应用，将客户端发送过来的用户ID 和密码与之前登录过的信息做匹配来进行认证的。<br>但鉴于HTTP 是无状态协议，之前已认证成功的用户状态无法通过协议层面保存下来。即，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他与其他的用户。于是我们会使用Cookie 来管理Session，以弥补HTTP 协议中不存在的状态管理功能。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808203421.png"></p><p>Session 管理及Cookie 状态管理</p><ul><li>步骤一：客户端把用户ID 和密码等登录信息放入报文的实体部分，通常是以POST 方法把请求发送给服务器。而这时，会使用HTTPS 通信来进行HTML 表单画面的显示和用户输入数据的发送。</li><li>步骤二：服务器会发放用以识别用户的Session ID。通过验证从客户端发送过来的登录信息进行身份认证，然后把用户的认证状态与Session ID 绑定后记录在服务器端。<br>向客户端返回响应时，会在首部字段Set-Cookie 内写入Session ID（如PHPSESSID=028a8c…）。<br>你可以把Session ID 想象成一种用以区分不同用户的等位号。然而，如果Session ID 被第三方盗走，对方就可以伪装成你的身份进行恶意操作了。因此必须防止Session ID 被盗，或被猜出。为了做到这点，Session ID 应使用难以推测的字符串，且服务器端也需要进行有效期的管理，保证其安全性。<br>另外，为减轻跨站脚本攻击（XSS）造成的损失，建议事先在Cookie 内加上httponly 属性。</li><li>步骤三：客户端接收到从服务器端发来的Session ID 后，会将其作为Cookie 保存在本地。下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID 也随之发送到服务器。服务器端可通过验证接收到的Session ID 识别用户和其认证状态。</li></ul><h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><p>页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Test表单<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/test"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>后端我们有这么俩个接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping("/test")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mytest</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(request.getRemoteAddr());</span><br><span class="line">        System.out.println(request.getParameter(<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(request.getMethod());</span><br><span class="line">        System.out.println(request.getQueryString());</span><br><span class="line">        System.out.println(Arrays.toString(request.getCookies()));</span><br><span class="line">        System.out.println(request.getSession());</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().print(<span class="string">"hello world!"</span>);</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>,<span class="string">"123123"</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.getWriter().close();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"><span class="comment">//输出-------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">GET</span><br><span class="line">a=<span class="number">1</span>&amp;b=<span class="number">2</span></span><br><span class="line">[javax.servlet.http.Cookie@182e275a, javax.servlet.http.Cookie@5028c586, javax.servlet.http.Cookie@1653a78a, javax.servlet.http.Cookie@6ed70ac5, javax.servlet.http.Cookie@72af4b2]</span><br><span class="line">org.apache.catalina.session.StandardSessionFacade@<span class="number">11380524</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>启动服务，我们首先访问/test，控制台查看，可以看到</p><p>请求报文中我们可以看到请求参数，url上，请求头中自动携带保存的所有cookie</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808202412.png"></p><p>再看看响应头，我们有给他设置一个cookie，看看是否接到，可以看到格式化后的响应头中是有我们设置的cookie的</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210808202803.png"></p><p>再看看浏览器cookie信息</p><img src="https://gitee.com/rain-sky/images/raw/master/20210808202941.png" style="zoom:67%;"><blockquote><p>思考一下，有了cookie之后我们可以干什么？(・∀・(・∀・(・∀・*)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h2&gt;&lt;h3 id=&quot;http报文&quot;&gt;&lt;a href=&quot;#http报文&quot; class=&quot;headerlink&quot; title=&quot;http报</summary>
      
    
    
    
    
    <category term="web" scheme="https://rain-sky.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>mybatis plus</title>
    <link href="https://rain-sky.github.io/2021/08/08/mybatis-plus/"/>
    <id>https://rain-sky.github.io/2021/08/08/mybatis-plus/</id>
    <published>2021-08-08T00:54:04.000Z</published>
    <updated>2021-08-12T10:21:40.916Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>指引：<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p></blockquote><h2 id="介绍，基于3-4-3版本"><a href="#介绍，基于3-4-3版本" class="headerlink" title="介绍，基于3.4.3版本"></a>介绍，基于3.4.3版本</h2><p>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new window)的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><strong>框架结构</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809100927.jpeg"></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="快速hello-world！"><a href="#快速hello-world！" class="headerlink" title="快速hello world！"></a>快速hello world！</h3><blockquote><p>springboot中使用mybatis-plus</p></blockquote><p>基本项目结构，启动类加上@MapperScan(“com.chen.mapper”)</p><img src="https://gitee.com/rain-sky/images/raw/master/20210809145640.png" style="zoom: 67%;"><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> maven</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果需要连接MySQL再导入以下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> application.propertise</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 此处使用了MySQL8的驱动，所以url需要带上时区设置</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;timeZone=UTC</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123123</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> pojo</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//--------------对应表------------------------------</span></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line"><span class="function">id <span class="title">BIGINT</span><span class="params">(<span class="number">20</span>)</span> NOT NULL COMMENT '主键ID',</span></span><br><span class="line"><span class="function">name <span class="title">VARCHAR</span><span class="params">(<span class="number">30</span>)</span> NULL DEFAULT NULL COMMENT '姓名',</span></span><br><span class="line"><span class="function">age <span class="title">INT</span><span class="params">(<span class="number">11</span>)</span> NULL DEFAULT NULL COMMENT '年龄',</span></span><br><span class="line"><span class="function">email <span class="title">VARCHAR</span><span class="params">(<span class="number">50</span>)</span> NULL DEFAULT NULL COMMENT '邮箱',</span></span><br><span class="line"><span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(id)</span></span></span><br><span class="line"><span class="function">)</span>;</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> mapper</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>基本完成，测试看看</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//参数wrapper为条件构造器</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) {</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 输出情况</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com)</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>至此一个基本的hello world已经完成，我们为写mybatis.xml，也未编写任何一个mapper.xml，如此简单我们便完成了一个基础的crud程序。</p><h3 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h3><p>使用标准日志输出，想使用log4j需要导入依赖</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><p>查看上述hello world 程序的日志输出，可以看到创建sqlsession，使用默认hikari数据源，jdbc连接，查询sql，查询情况</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@73fc518f] was not registered <span class="keyword">for</span> synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@<span class="number">397857830</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@5580d62f] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email FROM user </span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, Jone, <span class="number">18</span>, test1<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==        Row: <span class="number">2</span>, Jack, <span class="number">20</span>, test2<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==        Row: <span class="number">3</span>, Tom, <span class="number">28</span>, test3<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==        Row: <span class="number">4</span>, Sandy, <span class="number">21</span>, test4<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==        Row: <span class="number">5</span>, Billie, <span class="number">24</span>, test5<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==      Total: <span class="number">5</span></span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@73fc518f]</span><br><span class="line">User(id=<span class="number">1</span>, name=Jone, age=<span class="number">18</span>, email=test1<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">2</span>, name=Jack, age=<span class="number">20</span>, email=test2<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">3</span>, name=Tom, age=<span class="number">28</span>, email=test3<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">4</span>, name=Sandy, age=<span class="number">21</span>, email=test4<span class="meta">@baomidou</span>.com)</span><br><span class="line">User(id=<span class="number">5</span>, name=Billie, age=<span class="number">24</span>, email=test5<span class="meta">@baomidou</span>.com)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Mapper-CRUD接口"><a href="#Mapper-CRUD接口" class="headerlink" title="Mapper CRUD接口"></a>Mapper CRUD接口</h3><blockquote><p>增加</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">"rain"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"1816046563@qq.com"</span>);</span><br><span class="line">    <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>输出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: <span class="function">INSERT INTO <span class="title">user</span> <span class="params">( id, name, age, email )</span> <span class="title">VALUES</span> <span class="params">( ?, ?, ?, ? )</span> </span></span><br><span class="line"><span class="function"></span>==&gt; Parameters: <span class="number">1424633039211765761</span>(Long), rain(String), <span class="number">18</span>(Integer), <span class="number">1816046563</span><span class="meta">@qq</span>.com(String)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@62d73ead]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们没有给他设置主键ID，他自己生成了一个（long型），这是咋来的</p><p><span class="github-emoji"><span>💁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>答案是雪花算法生成</p><p>分布式唯一ID生成法：</p><p>数据库自增字段， UUID，redis生成，雪花算法</p><blockquote><p>删除</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//按ID删除</span></span><br><span class="line">    userMapper.deleteById(<span class="number">1424633039211765761L</span>);</span><br><span class="line">    <span class="comment">//按ID批量删除</span></span><br><span class="line">    userMapper.deleteBatchIds(Arrays.asList(<span class="number">1425675757497180161L</span>,<span class="number">1424648512569647106L</span>));</span><br><span class="line">    <span class="comment">//Map条件删除</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"kamisato"</span>);</span><br><span class="line">    userMapper.deleteByMap(map);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>更新</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uptateTest</span><span class="params">()</span></span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1424633039211765761L</span>);</span><br><span class="line">    user.setName(<span class="string">"snow"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = userMapper.updateById(user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>输出</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE user SET name=? WHERE id=? </span><br><span class="line">==&gt; Parameters: snow(String), 1424633039211765761(Long)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@73fc518f]</span><br><span class="line">1</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>可以看到根据条件自动拼接了SQL</p><p>可以看到之前增加的用户的名称已经被修改</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809155340.png"></p><blockquote><p>查询操作</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询测试,批量查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectByBathId</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//查询1，2，3，4号用户</span></span><br><span class="line">    List&lt;User&gt; list = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">for</span> (User user : list) {</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//使用map方式的条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectByMap</span><span class="params">()</span></span>{</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"kamisato"</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectByMap(map);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="page-with-curl-分页查询"><a href="#page-with-curl-分页查询" class="headerlink" title=":page_with_curl: 分页查询"></a><span class="github-emoji"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分页查询</h3><p>配置分页插件，详细配置项见官方文档</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan("com.chen.mapper")</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>分页查询测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">limtTest</span><span class="params">()</span></span>{</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">    userIPage.getRecords().forEach(System.out::println);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出--------------------------------------------------------</span></span><br><span class="line">==&gt;  Preparing: <span class="function">SELECT <span class="title">COUNT</span><span class="params">(<span class="number">1</span>)</span> FROM user </span></span><br><span class="line"><span class="function"></span>==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: COUNT(<span class="number">1</span>)</span><br><span class="line">&lt;==        Row: <span class="number">9</span></span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,gmt_create,gmt_modified,version FROM user LIMIT <span class="number">0</span>,<span class="number">5</span> </span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email, gmt_create, gmt_modified, version</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, Jone, <span class="number">18</span>, <span class="number">321</span><span class="meta">@qq</span>.com, <span class="keyword">null</span>, <span class="number">2021</span>-08-<span class="number">10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">10</span>, <span class="number">3</span></span><br><span class="line">&lt;==        Row: <span class="number">2</span>, Jack, <span class="number">20</span>, test2<span class="meta">@baomidou</span>.com, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">1</span></span><br><span class="line">&lt;==        Row: <span class="number">3</span>, Tom, <span class="number">28</span>, test3<span class="meta">@baomidou</span>.com, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">1</span></span><br><span class="line">&lt;==        Row: <span class="number">4</span>, Sandy, <span class="number">21</span>, test4<span class="meta">@baomidou</span>.com, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">1</span></span><br><span class="line">&lt;==        Row: <span class="number">5</span>, Billie, <span class="number">24</span>, test5<span class="meta">@baomidou</span>.com, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>具体使用参见-&gt;<a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper">官方文档</a></p><p><span class="github-emoji"><span>🗡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>一个例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectTest</span><span class="params">()</span></span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询email不为空,version大于等于1，且年龄位于1-30间的用户</span></span><br><span class="line">        wrapper.isNotNull(<span class="string">"email"</span>)</span><br><span class="line">                .ge(<span class="string">"version"</span>,<span class="number">1</span>)</span><br><span class="line">                .between(<span class="string">"age"</span>,<span class="number">1</span>,<span class="number">30</span>);</span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">groupTest</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//统计各个年龄阶段用户的总人数</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">//select指定需要查询的字段</span></span><br><span class="line">        wrapper.select(<span class="string">"age"</span>,<span class="string">"COUNT(*) AS totl"</span>).groupBy(<span class="string">"age"</span>);</span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">likeTest</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//查询名字中含有k字母的角色信息</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.select(<span class="string">"name"</span>,<span class="string">"age"</span>,<span class="string">"email"</span>)</span><br><span class="line">            .like(<span class="string">"name"</span>,<span class="string">"k"</span>);</span><br><span class="line">        userMapper.selectList(wrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="乐观锁配置"><a href="#乐观锁配置" class="headerlink" title="乐观锁配置"></a>乐观锁配置</h3><p><a href="https://www.jianshu.com/p/5a081ff5de58">文章推荐</a></p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>悲观锁：总是认为会出现问题，无论干什么都上锁</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>乐观锁：总是认为不会出问题，无论干什么都不上锁</p><p>通过乐观锁+自旋的方式，解决数据更新的线程安全问题，而且锁粒度比互斥锁低，并发性能好。</p><p>乐观锁机制：</p><ol><li>抽出记录，获取当前version</li><li>更新时，带上version</li><li>执行更新时，set version where version = oldVersion</li><li>version版本不相配，更新失败</li></ol><blockquote><p>乐观锁的实现方式可以是在记录中添加一个version字段，在每次更新前获取该版本字段，更新时比对版本字段，如果更新成功版本字段+1，这里介绍MP的乐观锁实现方式</p></blockquote><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>user表添加version字段，int型，默认值为1</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注入乐观锁插件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan("com.chen.mapper")</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="comment">//分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>user添加version字段并加上@Version</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>测试，修改一个用户信息，模拟插队多线程操作</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意，version初始值不能为null</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">versionTest</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//模拟线程1修改ID为1的用户数据</span></span><br><span class="line">    User user1 = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user1.setEmail(<span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟线程2中途修改ID为1的用户数据</span></span><br><span class="line">    User user2 = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user2.setEmail(<span class="string">"321@qq.com"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟线程2已经改变了ID为1用户数据后，线程1再提交数据</span></span><br><span class="line">    <span class="keyword">int</span> j = userMapper.updateById(user1);</span><br><span class="line">    System.out.println(<span class="string">"user2提交返回："</span>+j+<span class="string">"\n"</span>+<span class="string">"user1提交返回："</span>+i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>输出，可以看到执行更新会带上version字段，由输出可以知道usr1更新失败</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//USER2先提交</span></span><br><span class="line">==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, gmt_modified=?, version=? WHERE id=? AND version=? </span><br><span class="line">==&gt; Parameters: Jone(String), <span class="number">18</span>(Integer), <span class="number">321</span><span class="meta">@qq</span>.com(String), <span class="number">2021</span>-08-<span class="number">10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">09.634</span>(Timestamp), <span class="number">3</span>(Integer), <span class="number">1</span>(Long), <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, gmt_modified=?, version=? WHERE id=? AND version=? </span><br><span class="line">==&gt; Parameters: Jone(String), <span class="number">18</span>(Integer), <span class="number">123</span><span class="meta">@qq</span>.com(String), <span class="number">2021</span>-08-<span class="number">10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">09.743</span>(Timestamp), <span class="number">3</span>(Integer), <span class="number">1</span>(Long), <span class="number">1</span>(Integer)    <span class="comment">//USER2提交后此时version已经是2了,故版本比对失败</span></span><br><span class="line">&lt;==    Updates: <span class="number">0</span></span><br><span class="line">user2提交返回：<span class="number">1</span></span><br><span class="line">user1提交返回：<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>说明:</p><p>只对自动注入的sql起效:</p><ul><li>插入: 不作限制</li><li>查找: 追加where条件过滤掉已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li><li>更新: 追加where条件防止更新到已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li><li>删除: 转变为 更新</li></ul><p>例如:</p><ul><li>删除: <code>update user set deleted=1 where id = 1 and deleted=0</code></li><li>查找: <code>select id,name,deleted from user where deleted=0</code></li></ul><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>数据库中增加deleted字段，int，长度为1，默认值为0</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新版已经不需要注入组件 LogicInject，自从3.1.1版本</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>用户实体增加deleted字段，加上@TableLogic</p><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>配置文件</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定全局逻辑删除字段</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-field</span>=<span class="string">deleted</span></span><br><span class="line"><span class="comment">#默认已被删除值为1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#未被删除值为0</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTest</span><span class="params">()</span></span>{</span><br><span class="line">    userMapper.deleteById(<span class="number">1424633039211765761L</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">==&gt;  Preparing: UPDATE user SET deleted=<span class="number">1</span> WHERE id=? AND deleted=<span class="number">0</span></span><br><span class="line">==&gt; Parameters: <span class="number">1424633039211765761</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>可见删除操作并未从数据库中物理删除该记录，仅仅只是将deleted字段置为1，下次查询的时候也会自动加上条件deleted = 0；</p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 一般来说所有的数据库表都需要有gmt_create，gmt_modified两个字段，创建时间，修改时间，但是我们不希望手动去设置他，希望有自动化的操作能够填充他。</p><blockquote><p>数据库级别</p></blockquote><p>在我们上述user表中增加这两个字段，默认值为当前时间戳</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809162150.png"></p><p><span class="github-emoji"><span>⏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>同时更新实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试一个插入操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">"rain"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"1816046563@qq.com"</span>);</span><br><span class="line">    <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>输出</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? ) </span><br><span class="line">==&gt; Parameters: 1424648512569647106(Long), rain(String), 18(Integer), 1816046563@qq.com(String)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession </span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>看看数据库</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809163013.png"></p><blockquote><p>代码级别</p></blockquote><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 将上述数据库的默认值以及更新操作删除掉</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>增加注解@TableField，详细用法见注解部分</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>自定义注解处理器，注入IOC容器</p><p><a href="https://mp.baomidou.com/guide/auto-fill-metainfo.html">阅读</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>{</span><br><span class="line">    <span class="comment">//插入时的策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"开始处理插入填充操作..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"gmtCreate"</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"gmtModified"</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//更新时的策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"开始处理更新填充操作..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"gmtModified"</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>测试插入与更新操作</p><p>插入操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">"kamisato"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"181604663@qq.com"</span>);</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出如下---------------------------</span></span><br><span class="line">==&gt;  Preparing: <span class="function">INSERT INTO <span class="title">user</span> <span class="params">( id, name, age, email, gmt_create, gmt_modified )</span> <span class="title">VALUES</span> <span class="params">( ?, ?, ?, ?, ?, ? )</span> </span></span><br><span class="line"><span class="function"></span>==&gt; Parameters: <span class="number">1424658513090609154</span>(Long), kamisato(String), <span class="number">18</span>(Integer), <span class="number">181604663</span><span class="meta">@qq</span>.com(String), <span class="number">2021</span>-08-09 <span class="number">17</span>:<span class="number">07</span>:<span class="number">13.053</span>(Timestamp), <span class="number">2021</span>-08-09 <span class="number">17</span>:<span class="number">07</span>:<span class="number">13.054</span>(Timestamp)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>查看数据库，可以看到在插入的时候两个世界都被填充上了</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809170747.png"></p><p>更新操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uptateTest</span><span class="params">()</span></span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">1424658513090609154L</span>);</span><br><span class="line">    user.setName(<span class="string">"kamisato"</span>);</span><br><span class="line">    user.setEmail(<span class="string">"123456@qq.com"</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//输出如下-----------------------------</span></span><br><span class="line">==&gt;  Preparing: UPDATE user SET name=?, email=?, gmt_modified=? WHERE id=? </span><br><span class="line">==&gt; Parameters: kamisato(String), <span class="number">123456</span><span class="meta">@qq</span>.com(String), <span class="number">2021</span>-08-09 <span class="number">17</span>:<span class="number">10</span>:<span class="number">55.83</span>(Timestamp), <span class="number">1424658513090609154</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>查看数据库，可以看到在更新的时候修改时间更新了</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210809171137.png"></p><p><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>至此简单的自动填充功能告一段落~</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h4><ul><li>描述：表名注解</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th>描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>表名</td></tr><tr><td align="center">schema</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>schema</td></tr><tr><td align="center">keepGlobalPrefix</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td align="center">resultMap</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td align="center">autoResultMap</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr><tr><td align="center">excludeProperty</td><td align="center">String[]</td><td align="center">否</td><td align="center">{}</td><td>需要排除的属性名(@since 3.3.1)</td></tr></tbody></table><h4 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h4><p>描述：主键注解</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">主键字段名</td></tr><tr><td align="center">type</td><td align="center">Enum</td><td align="center">否</td><td align="center">IdType.NONE</td><td align="center">主键类型</td></tr></tbody></table><p>可选值，最后三个在新版本已经弃用</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AUTO</td><td align="center">数据库ID自增</td></tr><tr><td align="center">NONE</td><td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td></tr><tr><td align="center">INPUT</td><td align="center">insert前自行set主键值</td></tr><tr><td align="center">ASSIGN_ID</td><td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr><tr><td align="center">ASSIGN_UUID</td><td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td></tr><tr><td align="center">ID_WORKER</td><td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td></tr><tr><td align="center">UUID</td><td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td></tr><tr><td align="center">ID_WORKER_STR</td><td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td></tr></tbody></table><blockquote><p>使用</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="comment">//设置生成ID类型</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><ul><li>描述：字段注解(非主键)</li></ul><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">必须指定</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">value</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">数据库字段名</td></tr><tr><td align="center">el</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">映射为原生 <code>#{ ... }</code> 逻辑,相当于写在 xml 里的 <code>#{ ... }</code> 部分</td></tr><tr><td align="center">exist</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否为数据库表字段</td></tr><tr><td align="center">condition</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#{%s}</code>,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考(opens new window)</a></td></tr><tr><td align="center">update</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td></tr><tr><td align="center">insertStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_NULL: <code>insert into table_a(&lt;if test="columnProperty != null"&gt;column&lt;/if&gt;) values (&lt;if test="columnProperty != null"&gt;#{columnProperty}&lt;/if&gt;)</code></td></tr><tr><td align="center">updateStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：IGNORED: <code>update table_a set column=#{columnProperty}</code></td></tr><tr><td align="center">whereStrategy</td><td align="center">Enum</td><td align="center">N</td><td align="center">DEFAULT</td><td align="center">举例：NOT_EMPTY: <code>where &lt;if test="columnProperty != null and columnProperty!=''"&gt;column=#{columnProperty}&lt;/if&gt;</code></td></tr><tr><td align="center">fill</td><td align="center">Enum</td><td align="center">否</td><td align="center">FieldFill.DEFAULT</td><td align="center">字段自动填充策略</td></tr><tr><td align="center">select</td><td align="center">boolean</td><td align="center">否</td><td align="center">true</td><td align="center">是否进行 select 查询</td></tr><tr><td align="center">keepGlobalFormat</td><td align="center">boolean</td><td align="center">否</td><td align="center">false</td><td align="center">是否保持使用全局的 format 进行处理</td></tr><tr><td align="center">jdbcType</td><td align="center">JdbcType</td><td align="center">否</td><td align="center">JdbcType.UNDEFINED</td><td align="center">JDBC类型 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">typeHandler</td><td align="center">Class&lt;? extends TypeHandler&gt;</td><td align="center">否</td><td align="center">UnknownTypeHandler.class</td><td align="center">类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td align="center">numericScale</td><td align="center">String</td><td align="center">否</td><td align="center">“”</td><td align="center">指定小数点后保留的</td></tr></tbody></table><p><a href="https://mp.baomidou.com/guide/annotation.html#tablefield">各属性可选项参见0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;指引：&lt;a href=&quot;https://mp.baomidou.com/guide/&quot;&gt;https://mp.baomidou.com/guide/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍，基于3-4-3版本&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="-mybatis" scheme="https://rain-sky.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>vmvare使用记录</title>
    <link href="https://rain-sky.github.io/2021/07/26/vmvare%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://rain-sky.github.io/2021/07/26/vmvare%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-07-26T08:10:51.000Z</published>
    <updated>2021-07-27T06:56:14.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用vmware安装centOS7"><a href="#使用vmware安装centOS7" class="headerlink" title="使用vmware安装centOS7"></a>使用vmware安装centOS7</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p><strong>1.先准备配置划分空间</strong></p><img src="https://gitee.com/rain-sky/images/raw/master/20210726162129.png" style="zoom: 50%;"><hr><img src="https://gitee.com/rain-sky/images/raw/master/20210726162433.png" style="zoom: 67%;"><hr><img src="https://gitee.com/rain-sky/images/raw/master/20210726162828.png" style="zoom:67%;"><p><strong>2. 配置好镜像文件后即可启动</strong></p><p>启动后开始配置</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726164734.png" style="zoom: 67%;"><p>点击软件选择</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726165346.png" style="zoom:80%;"><blockquote><p>我们想使用图形界面因此选中Gnome桌面，如果选中开发工具会默认安装gcc，jdk，mysql等环境</p></blockquote><p><strong>3.自主分区</strong></p><p>一般我们自己分三区，boot区（1G），swap区（2G，临时充当内存作用），根分区</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726170119.png" style="zoom:67%;"><p>点击完成后开始分区，配置boot分区，其余同理，其中swap分区文件系统需为swap</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726170444.png" style="zoom: 80%;"><hr><img src="https://gitee.com/rain-sky/images/raw/master/20210726170919.png" style="zoom: 80%;"><p>分区完成后配置完root用户与一个普通用户等待安装完成即可。</p><h3 id="三种网络连接"><a href="#三种网络连接" class="headerlink" title="三种网络连接"></a>三种网络连接</h3><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726212731.png"></p><h3 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h3><blockquote><p>当我们需要打造一个集群怎么办，我们需要多个虚拟机系统，无需多次安装，克隆即可</p></blockquote><ul><li><p>方式一：拷贝虚机机安装文件，然后使用菜单栏打开复制后的文件</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726213153.png"></p></li><li><p>方式二：VMware自带克隆（需先关闭被克隆系统）,右键然后管理克隆所要克隆的系统即可</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726213651.png" style="zoom:67%;"></li></ul><h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3><p>*<em>快照是用来干什么的？(・∀・(・∀・(・∀・</em>)**</p><p>答：错误恢复</p><p>假如在a状态下我们拍下一个快照，在a-&gt;b的过程中发生了一些错误导致系统问题，那么我们可以使用快照来恢复，当然这样肯定是有代价的，如存储消耗。</p><p><strong>使用</strong></p><p>右键，快照，拍摄快照</p><p>需要恢复某一个快照时右键快照，快照管理，转到即可</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726220239.png" style="zoom:67%;"><h3 id="vmtools"><a href="#vmtools" class="headerlink" title="vmtools"></a>vmtools</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用vmware安装centOS7&quot;&gt;&lt;a href=&quot;#使用vmware安装centOS7&quot; class=&quot;headerlink&quot; title=&quot;使用vmware安装centOS7&quot;&gt;&lt;/a&gt;使用vmware安装centOS7&lt;/h2&gt;&lt;h3 id=&quot;安装步骤&quot;</summary>
      
    
    
    
    
    <category term="vmware" scheme="https://rain-sky.github.io/tags/vmware/"/>
    
    <category term="虚拟机" scheme="https://rain-sky.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>linxu使用</title>
    <link href="https://rain-sky.github.io/2021/07/26/linxu%E4%BD%BF%E7%94%A8/"/>
    <id>https://rain-sky.github.io/2021/07/26/linxu%E4%BD%BF%E7%94%A8/</id>
    <published>2021-07-26T08:08:59.000Z</published>
    <updated>2021-07-30T13:38:29.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux目录结构"><a href="#linux目录结构" class="headerlink" title="linux目录结构"></a>linux目录结构</h2><h3 id="目录结构介绍"><a href="#目录结构介绍" class="headerlink" title="目录结构介绍"></a>目录结构介绍</h3><img src="https://gitee.com/rain-sky/images/raw/master/20210727150755.png" style="zoom: 50%;"><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><h3 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h3><p><strong>为什么需要远程登陆？</strong></p><ul><li>一般开发中linux服务器为开发组共享</li><li>项目正式上线架设在公网上</li><li>需要远程登陆进行系统管理</li></ul><p><strong>使用xshell进行远程登陆</strong></p><p>前往xshell官网下载 <a href="https://www.netsarang.com/zh/free-for-home-school/">xshell </a> 选择非商业用途的free-for-home-school，填写姓名邮箱后前往邮箱获取下载链接</p><p><strong>远程登陆的前提</strong></p><ul><li>远程登陆机器的ip</li><li>本机能够ping通</li></ul><p>查看linux的ip，使用命令ifconfig，ens33为虚拟网卡</p><img src="https://gitee.com/rain-sky/images/raw/master/20210727163418.png" style="zoom: 67%;"><p><strong>使用xshell创建一个会话</strong></p><p>菜单栏新建一个会话，名称随意，主机为公网ip，端口号22</p><img src="https://gitee.com/rain-sky/images/raw/master/20210727164018.png" style="zoom: 50%;"><p>点击确定后点击会话弹出</p><img src="https://gitee.com/rain-sky/images/raw/master/20210727164210.png" style="zoom: 50%;"><ul><li>一次性接受，下次远程登陆时需重新登录</li><li>接受并保存，下此登录直接连接上了</li></ul><p>成功后如图所示</p><img src="https://gitee.com/rain-sky/images/raw/master/20210727164459.png" style="zoom: 50%;"><h3 id="远程文件传输"><a href="#远程文件传输" class="headerlink" title="远程文件传输"></a>远程文件传输</h3><p><strong>使用xftp远程传输</strong></p><p>下载方式如xshell</p><p><strong>新建一个会话如图所示</strong></p><img src="https://gitee.com/rain-sky/images/raw/master/20210727165722.png" style="zoom: 67%;"><p>创建完成后连接登陆即可，成功后如图</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210727170311.png"></p><p>解决乱码问题，更改为utf-8</p><img src="https://gitee.com/rain-sky/images/raw/master/20210727170615.png" style="zoom: 50%;"><h3 id="vi与vim"><a href="#vi与vim" class="headerlink" title="vi与vim"></a>vi与vim</h3><p><strong>什么是vi什么是vim</strong></p><p>vi是Linux内置文本编辑器，vim可以看作vi的增强版，具有程序编写能力。</p><p><strong>三种模式</strong></p><ul><li>默认模式：可以复制粘贴删除文本，移动光标</li><li>编辑模式：按下i，o，a，r任意一个即可进入编辑模式，具有编辑文本功能</li><li>命令行模式：在默认模式下输入：号即可进入，若在编辑模式下按下esc退出后再输入一个：号即可进入，在该模式下可以完成存盘，读取，替换，显示行号，离开vim等操作</li></ul><p><strong>实例</strong></p><p>使用xshell远程登录Linux编写一个hello java程序。</p><ol><li>使用命令行vim hello.java开始进入vim编写Java程序，刚开始进入输入文本无反应，因为是默认模式，切换到编辑模式</li><li>切换到编辑模式后，完成文本编写切换到命令行模式</li><li>进入到命令行模式后，使用wq（q不保存退出，q!强制退出）完成写入并退出vim</li></ol><p><img src="https://gitee.com/rain-sky/images/raw/master/20210727173041.png"></p><p>可以看到当前路径即/ 下出现我们编写的文件，再次编辑该文件只需再次vim hello.java</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210727173234.png"></p><p><strong>命令模式下的一些指令</strong></p><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h3 id="关机与重启"><a href="#关机与重启" class="headerlink" title="关机与重启"></a>关机与重启</h3><p><strong>一.shutdown 命令</strong></p><p>作用：关闭或重启系统<br>使用权限：超级管理员使用<br>常用选项<br>\1. -r 关机后立即重启<br>\2. -h关机后不重启<br>\3. -f快速关机，重启时跳过fsck(file system check用来检查和维护不一致的文件系统。)<br>\4. -n快速关机不经过init程序<br>shutdown以一种安全的方式关闭系统。所有登陆用户都可以看到关机信息提示，并且 login 将被阻塞。可以指定立刻关机，也可以指定系统在一定的延时后关机。所有进程都将接收到 SIGTERM 信号。这可以使 vi 等程序有时间将处于编辑状态的文件进行存储，邮件和新闻程序进程则可以将所有缓冲池内的数据进行适当的清除等等。 shutdown 通过通知 init 进程，要求它改换运行级别来实现。运行级别 0 用来关闭系统，运行级别 6 用来重启系统，运行级别 1 用来使系统进入执行系统管理任务状态，如果没有给出 -h 或 -r 标志时，这是 shutdown 命令的默认工作状态。</p><p><strong>二.halt命令</strong></p><p>作用：关闭系统<br>使用权限：超级管理员<br>常用选项<br>\1. -d不把记录写到/var/log/wtmp文件里<br>\2. -p关闭系统，顺便做关闭电源的动作poweroff<br>\3. -f强迫关机，不呼叫shutdown这个指令<br>实质上halt就是调用shutdown -h。halt执行时﹐杀死应用进程﹐执行sync系统调用﹐文件系统写操作完成后就会停止内核。</p><p><strong>三.init命令</strong></p><p>使用权限：超级管理员<br>常用选项<br>0-6：表示系统运行的7个级别<br>0：关机级别<br>1：单用户级别，运行rc.sysinit和rc1.d目录下的脚本<br>2：多用户，但系统不会启动NFS，字符模式<br>3：多用户，字符模式，系统启动具有网络功能<br>4：用户自定义级别<br>5：图形界面模式<br>6：重启级别</p><p><strong>四.poweroff命令</strong></p><p>作用：关闭系统和关闭电源<br>使用权限：所用用户<br>常用选项<br>\1. -p关机后关闭电源<br>\2. -f强制关机，不调用shutdown<br>\3. -w不是真正关机，只是将信息写入到文件/var/log/wtmp<br>poweroff在关闭计算机操作系统之后，最后还会发送ACPI指令，通知电源，最后切断电源供应，当然路由器等嵌入系统不支持ACPI的，所以这个无效。</p><p><strong>五.reboot命令</strong></p><p>作用：重启系统<br>使用权限：超级管理员<br>常用选项<br>\1. -n在重启前不将内存资料写回硬盘<br>\2. -f强迫重启，不呼叫shutdown指令<br>\3. -d不把记录写到/var/log/wtmp<br>\4. -w不是真正重启，只是把信息写入/var/log/wtmp<br>reboot的工作过程差不多跟halt一样﹐不过它是引发主机重启﹐而halt是关机。它的参数与halt相差不多。</p><blockquote><p>常规用户下使用su -root 切换到root用户，root用户下使用logout即可退回常规用户，注意，图形界面下的命令行logout命令无效</p></blockquote><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><strong>基本语法</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">adduser 用户名 (创建后会在home目录下自动创建同名用户目录)</span><br><span class="line">或者</span><br><span class="line">adduser -d 文件名 用户名 (自定义用户目录名)</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">使用该命令修改密码：passwd 用户名</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">删除用户：userdel 用户名 (不会删除home下的用户文件夹)</span><br><span class="line">userdel -r 用户名(连带删除用户文件夹)</span><br><span class="line"></span><br><span class="line">查询用户信息： id 用户名</span><br><span class="line">切换用户：su -用户名（从权限高的用户到低的用户无需输入密码，反之需要）</span><br><span class="line">回退到原来用户：eixt/logout</span><br><span class="line">查看当前用户： who am i（显示第一次登录的用户信息）</span><br><span class="line">------------- ----------------------------------------</span><br><span class="line">用户组相关（PS:新建一个用户会自动有一个用户名同名组）：</span><br><span class="line">新增一个组：groupadd 组名</span><br><span class="line">删除一个组：groupdel 组名</span><br><span class="line">增加用户时直接加上组： useradd -g 组名 用户名 </span><br><span class="line">修改用户组：usermod -g 组名 用户名</span><br><span class="line">------------------------------------------------------</span><br><span class="line">锁定用户，不能登录：passwd -l 用户名  [也可使用usermod -l 用户名]</span><br><span class="line">查看用户状态：passwd -s 用户名</span><br><span class="line">解锁用户：passwd -u 用户名</span><br><span class="line">清空一个用户密码，之后无密码也无法登录：passwd -d 用户名</span><br></pre></td></tr></tbody></table></figure><p>用户与组相关文件</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728151910.png"></p><h3 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h3><p><strong>指定运行级别</strong></p><p>七个运行级别，三五常用：</p><ul><li>0 - halt(停止/关机)(不要将运行级别设置为0)</li><li>1 - 单用户模式</li><li>2 - 多用户模式，无网络</li><li>3 - 多用户模式有网络</li><li>4 - 未使用(保留)</li><li>5 - 图形化界面</li><li>6 - 重启(不要将运行级别设置为6)</li></ul><p>切换级别：init[0123456]</p><p>查看级别：systemctl get-default</p><p><strong>root密码找回</strong></p><ul><li><p>启动系统进入开机界面，按下e进入编辑界面</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728154616.png"></p></li><li><p>将光标定位到此处并输入init=/bin/sh，再按下ctrl+x重启进入单用户模式</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728154828.png"></p></li><li><p>重启后输入mount -o remount,rw /</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728155051.png"></p></li><li><p>上述指令输入后回车再输入passwd再回车，输入两次新密码即可</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728155248.png"></p></li><li><p>再上图最后一行键入touch /.autorelabel（注意：touch与/ 中间有空格）</p></li><li><p>上述指令执行后再回车键入exec /.sbin/init 再回车等待系统修改密码后重启，这个时间会比较长</p></li></ul><p><strong>帮助指令</strong></p><ul><li><p>man 获取帮助信息</p><p>语法：man [命令或者配置文件]，如获取ls命令帮助信息，man  ls</p></li><li><p>help指令</p><p>语法：help  命令</p></li></ul><p>举个栗子，输入 man ls</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728160931.png"></p><p><code>man</code>包含<code>9</code>个章节，章节用数字表示，分别是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户命令 </span><br><span class="line">系统调用 </span><br><span class="line">C库调用</span><br><span class="line">设备文件及特殊文件 </span><br><span class="line">配置文件格式 </span><br><span class="line">游戏</span><br><span class="line">杂项 </span><br><span class="line">管理类的命令</span><br><span class="line">Linux 内核API</span><br></pre></td></tr></tbody></table></figure><p><strong>查找类指令</strong></p><blockquote><p>find命令</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728165504.png"></p><blockquote><p>locate指令</p></blockquote><p>用于快速定位某个文件位置，原理是创建了一个索引数据库,在使用该指令之前必须先使用updatedb指令</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728165917.png"></p><blockquote><p>grep指令</p></blockquote><p>grep过滤查找，”|”管道符号，表示将前指令结果转给后面一条指令处理，基本语法：grep [选项]  查找内容  源文件</p><p>一个例子，查找Hello.java文件中hello所在的位置并显示行号</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210728170732.png"></p><p><strong>压缩与解压缩类</strong></p><img src="https://gitee.com/rain-sky/images/raw/master/20210728170945.png" style="zoom:50%;"><blockquote><p>zip指令：zip [选项]  xxx.zip  将要压缩的内容</p><p>-r 表示递归压缩整个文件夹下内容</p></blockquote><p>例子，压缩home目录：zip -r myhome.zip /home/</p><blockquote><p>unzip指令：unzip [选项]   xxx.zip </p><p>-d 指定解压后存放目录</p></blockquote><p>例子，解压上例并解压到/opt/tmp文件夹下：unzip -d /opt/tmp /home/myhome.zip</p><blockquote><p>tar指令</p></blockquote><img src="https://gitee.com/rain-sky/images/raw/master/20210728203128.png" style="zoom:50%;"><h3 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h3><p><strong>概念</strong></p><p>linux中每个用户必须属于一个组，不能独立于组外，每个文件有所有者，所在组，其他组等概念。</p><p>举个栗子：</p><p>有A,B,C三个组，甲属于A组，甲用户创建了hello.txt文件，那么甲就是该文件的所有者，A就是该文件的所在组，B，C相对该文件来说就是其他组。</p><p><strong>相关指令</strong></p><blockquote><p>使用cat /etc/group可以查看组及其属性信息</p></blockquote><p>查看文件所有者：ls -ahl</p><p>修改文件所有者：chown 用户名[:所在组]   文件名 【参数：-R如果是目录，则使其子目录递归生效】</p><p>修改文件所在组：chgrp 组名 文件名</p><p>修改用户所在组：usermod -g 组名 用户名 / usermod -d 目录名 用户名 改变该用户登录的初始目录</p><p><strong>权限介绍</strong></p><p>使用ls -l显示文件详细信息</p><p>举个李子：</p><p>其中 - 代表普通文件</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210729100110.png"></p><p>rwx权限介绍</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210729101245.png"></p><p><strong>权限修改</strong></p><p>方式一：+，-，=变更权限</p><p>u:所有者，g:所在组，o:其他组，a:所有人</p><p>举个栗子：</p><p>chmod u=rwx,g=rx,o=x 文件名/目录名</p><p>chmod o+w   文件名/目录名  【给其他组赋予写的权限】</p><p>chmod a-x    文件名/目录名   【去除所有人执行的权限】</p><h3 id="crond定时任务调度"><a href="#crond定时任务调度" class="headerlink" title="crond定时任务调度"></a>crond定时任务调度</h3><blockquote><p>此坑将来再填</p></blockquote><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><p><strong>示意</strong></p><blockquote><p>Linux挂载机制：<a href="http://c.biancheng.net/view/2859.html">链接</a></p></blockquote><p>纠正一个误区，并不是根目录下任何一个目录都可以作为挂载点，由于挂载操作会使得原有目录中文件被隐藏，因此根目录以及系统原有目录都不要作为挂载点，会造成系统异常甚至崩溃，挂载点最好是新建的空目录。</p><blockquote><p>分区</p></blockquote><img src="https://gitee.com/rain-sky/images/raw/master/20210729163948.png" style="zoom:50%;"><p><strong>相关指令</strong></p><blockquote><p>查看所有设备挂载情况：lsblk  或者lsblk -f</p></blockquote><p>和我们配置虚拟机时一致，boot分区1G，交换分区2G，根分区17G</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210729164250.png"></p><p> 硬盘说明：</p><p>linux硬盘分IDE和SCSI盘，目前基本是SCSI</p><img src="https://gitee.com/rain-sky/images/raw/master/20210729164853.png" style="zoom: 80%;"><p><strong>增加一块硬盘</strong></p><blockquote><p>此坑将来再填~</p></blockquote><p><strong>磁盘情况查询</strong></p><ul><li>查询系统整体磁盘使用情况：df -h</li></ul><img src="https://gitee.com/rain-sky/images/raw/master/20210729165603.png" style="zoom:50%;"><ul><li><p>查询指定目录的磁盘占用情况：du -h /目录</p><p>-h：带计量单位</p><p>-a：含文件</p><p>-c：增加汇总值</p><p>–max-depth=1：指定查询深度，此处1为示例</p></li><li><p>统计某文件夹下文件个数：ls -l  /目录 | grep “^-“ | wc -l</p><img src="https://gitee.com/rain-sky/images/raw/master/20210729170510.png" style="zoom: 67%;"></li></ul><h3 id="网络配置原理"><a href="#网络配置原理" class="headerlink" title="网络配置原理"></a>网络配置原理</h3><p><strong>示意</strong></p><p>此处需要关闭windows防火墙，centos7才可ping通宿主，虚拟机通过vmnet8与宿主机通信，为此需要保证centos7的ip与vmnet8在同一网段。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210729173020.png"></p><p><strong>网络环境配置</strong></p><ul><li>自动分配DCHP</li></ul><p><span class="github-emoji"><span>🍦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>先不说了~</p><ul><li>指定IP</li></ul><img src="https://gitee.com/rain-sky/images/raw/master/20210729174610.png" style="zoom:67%;"><p><span class="github-emoji"><span>⏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 修改如下</p><img src="https://gitee.com/rain-sky/images/raw/master/20210729174846.png" style="zoom:67%;"><p><span class="github-emoji"><span>⏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 再修改vmnet8配置</p><img src="https://gitee.com/rain-sky/images/raw/master/20210729175149.png" style="zoom: 67%;"><p><span class="github-emoji"><span>⏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 重启网络服务或重启系统使更改生效：</p><p>service network restart，reboot均可</p><blockquote><p>PS<span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>:如果使用了xshell远程登陆别忘记该主机名鸭~</p></blockquote><p><strong>主机与host映射</strong></p><p>在hosts下配置一行映射关系即可，如添加：192.168.2.128 rainsky</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730095417.png"></p><p>解析过程：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730095615.png"></p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>在Linux中每一个运行的程序都称为一个进程，分配一个ID号（PID）。</p><p><strong>相关指令</strong></p><blockquote><p>ps指令</p></blockquote><p>参数：</p><p>-e：显示所有进程</p><p>-f：全格式显示(便于查找子父进程，ppid号即为父进程号)</p><p>-a ：显示当前终端所有进程信息</p><p>-u ：以用户格式显示</p><p>-x：显示后台进程运行参数</p><p>使用ps -aux | more 分页查看</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730100522.png"></p><p>有时候我们只需要查看自己想要看的某一个程序是否运行，使用管道流即可</p><p>for example：ps -ef | grep sshd</p><p><strong>终止进程</strong></p><blockquote><p>kill命令与killall命令</p></blockquote><p>基本语法：</p><p>kill [选项] 进程号</p><p>killall 进程号</p><p>常用选项：</p><p>-9：表示强制终止</p><p><em>实践一下</em></p><p>杀除一个非法用户进程：</p><p>使用rain用户远程登录服务器，在服务器上使用ps -ef | grep sshd列出用户进程，然后使用相关命令终止该用户进程即可。</p><p>终止远程登陆服务：</p><p>ps -ef | grep sshd查找出ssh进程/user/sbin/sshd -D，杀掉该进程，重新启动该服务使用/bin/systemctl start sshd.service</p><p><strong>查看进程树</strong></p><blockquote><p>pstree [选项]</p></blockquote><p>-p 显示进程pid</p><p>-u 显示进程用户</p><h4 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h4><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730102945.png"></p><p>–查看当前服务器所有服务</p><p>service –status-all </p><p>– 查看当前所有正在运行的服务</p><p>service –status-all | grep running</p><p>–查看指定服务运行状态如 httpd</p><p>service –status-all | grep httpd</p><p>或 service httpd status</p><p>–查看系统启动自启动的服务列表</p><p>chkconfig –list</p><hr><p>–centos7版本</p><p>–查看正在运行的服务</p><p>systemctl | grep running</p><p>–列出运行的服务</p><p>initctl list</p><p>–查看指定服务运行状态</p><p>systemctl | grep apache2</p><p>–查看正在运行的服务</p><p>pstree</p><p>–查看正在运行的状态</p><p>chkservice –是一个管理系统单元的终端工具务</p><h3 id="rpm与yum"><a href="#rpm与yum" class="headerlink" title="rpm与yum"></a>rpm与yum</h3><h4 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h4><p>rpm用于互联网下载包的打包以及安装工具</p><p><strong>管理指令</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730103301.png"></p><p>查询一个指定软件包是否安装：rpm -q 软件包名</p><p>查询软件包信息：rpm -qi 软件包名cl</p><p>查询安装后的文件安装位置：rpm -ql 软件包</p><p>查询文件所属软件包：rpm -qf 文件名</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730103751.png"></p><p><strong>卸载软件包</strong></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>rpm -e 包名称</p><p>for example：rpm -e firefox</p><p>添加参数 –nodeps 强制删除，不建议</p><p><strong>安装软件包</strong></p><p>rpm -ivh rpm包全路径</p><p>参数说明：</p><p>-i : 安装            -v ：提示            -h：进度条</p><p><em>example</em></p><p>删除并重新安装firefox</p><p>删除：直接rpm -e firefox即可</p><p>重装：我们需要firefox 的 rpm包全路径，哪里有？</p><p>在桌面ios文件的packges文件夹下搜索firesox的rpm包，复制粘贴到你想去的文件夹下，安装即可</p><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><blockquote><p>就像后端maven前端npm,yarn一样？</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730110000.png"></p><h3 id="安装开发环境系列"><a href="#安装开发环境系列" class="headerlink" title="安装开发环境系列"></a>安装开发环境系列</h3><h4 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h4><ol><li>检查是否存在jdk，存在则卸载</li></ol><img src="https://gitee.com/rain-sky/images/raw/master/20210730170100.png" style="zoom:67%;"><ol start="2"><li><p>使用rpm方式安装，先下载jdk1.8的rpm包到本地一个目录</p></li><li><p>使用命令行安装，默认安装到user/java/目录下</p></li><li><p>配置环境变量</p><p>vim /etc/profile 打开</p><p>末尾配置四行如下</p></li></ol><img src="https://gitee.com/rain-sky/images/raw/master/20210730130642.png" style="zoom:67%;"><p><span class="github-emoji"><span>🌗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 最后使用source /etc/profile使配置文件生效</p><blockquote><p>如果使spring boot项目直接打个jar放在服务器上就可以运行啦，但是别忘记开启端口号</p><p>如果是ssm项目打war包放在tomcat下运行就好了</p></blockquote><p><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 运行tomcat，进入bin目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行：startup.sh --&gt;启动tomcat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行：shutdown.sh --&gt;关闭tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 防火墙相关指令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看firewall服务状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启、重启、关闭、firewalld.service服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all    # 查看全部信息</span><br><span class="line">firewall-cmd --list-ports  # 只看端口信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启端口</span></span><br><span class="line">开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">重启防火墙：systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port=80/tcp  #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent   #永久生效，没有此参数重启后失效</span><br></pre></td></tr></tbody></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><blockquote><p><span class="github-emoji"><span>👋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://downloads.mysql.com/archives/community/">安装来这里</a></p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730200910.png"></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>centOS7.6自带玛丽亚数据库，会造成与mysql冲突，先卸载</p><img src="https://gitee.com/rain-sky/images/raw/master/20210730193822.png" style="zoom:67%;"><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>已经把bundle.tar 解压到myrpm目录下，一次安装下列rpm包</p><p>rpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-libs-5.7.29-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-client-5.7.29-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-server-5.7.29-1.el7.x86_64.rpm </p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730202017.png"></p><p><span class="github-emoji"><span>📁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> systemctl start mysqld.service，启动mysql，MySQL自动给root用户设置随机密码，运行 grep “password” /var/log/mysqld.log 可以看到当前密码</p><p><span class="github-emoji"><span>💁♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 试一试查看正在运行的服务</p><p>systemctl | grep running</p><p><span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>设置我们自己的密码，开启密码提示策略，set global validate_password_policy=0(默认值为1)</p><p>set password for “root”@”localhost” =password(‘密码’)</p><blockquote><p>启动MySQL并重置root密码</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210730203540.png"></p><p><span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>基本步骤到此就完成了  <del>(≧▽≦)/</del></p><p><span class="github-emoji"><span>🅾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>一些补充</p><p>设置MySQL开机自启动</p><ul><li>先检查MySQL是否存在开机自启动列表</li></ul><img src="https://gitee.com/rain-sky/images/raw/master/20210730205308.png" style="zoom:67%;"><p>由于我们是centOS7，之前的chkconfig不再支持，故使用推荐的systemctl，可以看到我们的MySQL服务是已经自启动的，如果未自启动可以使用systemctl enable mysql来设置 mysql开机启动自动，由于我们不需要对外开放我们的数据库，故3306端口不配置开启。</p><h3 id="过程中遇到的一些问题"><a href="#过程中遇到的一些问题" class="headerlink" title="过程中遇到的一些问题"></a>过程中遇到的一些问题</h3><h4 id="登陆界面循环登录问题"><a href="#登陆界面循环登录问题" class="headerlink" title="登陆界面循环登录问题"></a>登陆界面循环登录问题</h4><p>大概是因为修改/etc/profile文件，增加Java环境变量的时候配置出错，导致登录界面死循环登录且命令行不能用了</p><p><strong>解决</strong></p><p>1、进入单用户模式。在rhgb quiet 后加上 single 后按ctrl+x运行</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTc0MDA2Ni8yMDE5MTAvMTc0MDA2Ni0yMDE5MTAwMjIwMjQxNzkzNS0xMzM2MjU1NjM2LnBuZw?x-oss-process=image/format,png"></p><p>之后使用root用户密码登录root账户，权限能修改/etc/profile</p><p>修改/etc/profile</p><p>reboot</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;linux目录结构&quot;&gt;&lt;a href=&quot;#linux目录结构&quot; class=&quot;headerlink&quot; title=&quot;linux目录结构&quot;&gt;&lt;/a&gt;linux目录结构&lt;/h2&gt;&lt;h3 id=&quot;目录结构介绍&quot;&gt;&lt;a href=&quot;#目录结构介绍&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="linxu" scheme="https://rain-sky.github.io/tags/linxu/"/>
    
  </entry>
  
  <entry>
    <title>Swagger</title>
    <link href="https://rain-sky.github.io/2021/07/25/Swagger/"/>
    <id>https://rain-sky.github.io/2021/07/25/Swagger/</id>
    <published>2021-07-25T08:17:14.000Z</published>
    <updated>2021-07-26T02:09:44.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p><strong>前言</strong></p><p>前端经常抱怨后端给的接口文档与实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用后端，都期望有一个好的接口文档。但是这个接口文档对于程序员来说，就跟注释一样，经常会抱怨别人写的代码没有写注释，然而自己写起代码起来，最讨厌的，也是写注释。所以仅仅只通过强制来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了。</p><p><strong>swagger是什么</strong></p><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><hr><p>通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发模式，在开发新版本或者迭代版本的时候，只需要更新Swagger描述文件，就可以自动生成接口文档和客户端服务端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><p><code>友情链接:</code><a href="https://swagger.io/">官网地址</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="springboot环境集成swagger"><a href="#springboot环境集成swagger" class="headerlink" title="springboot环境集成swagger"></a>springboot环境集成swagger</h3><p>引入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>依赖说明：</strong></p><p><strong>（1）springfox-swagger2</strong></p><p>检测spring的web请求信息，生成检测结果（<code>json格式</code>）。</p><p><strong>（2）springfox-swagger-ui</strong></p><p>根据springfox-swagger2生成的数据，生成<code>可视化</code>的友好页面。</p><p><strong>启用swagger</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>写一个controller测试</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping(value = "/hello",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问<a href="http://localhost:8080/swagger-ui.html%E7%9C%8B%E7%9C%8B%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA">http://localhost:8080/swagger-ui.html看看，如下图所示</a></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725164756.png"></p><p><strong>配置swagger</strong></p><p>Docket,swagger唯一实例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Docket</span><span class="params">(DocumentationType documentationType)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.apiInfo = ApiInfo.DEFAULT;</span><br><span class="line">    <span class="keyword">this</span>.groupName = <span class="string">"default"</span>;</span><br><span class="line">    <span class="keyword">this</span>.enabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.genericsNamingStrategy = <span class="keyword">new</span> DefaultGenericTypeNamingStrategy();</span><br><span class="line">    <span class="keyword">this</span>.applyDefaultResponseMessages = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.host = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">this</span>.pathMapping = Optional.absent();</span><br><span class="line">    <span class="keyword">this</span>.apiSelector = ApiSelector.DEFAULT;</span><br><span class="line">    <span class="keyword">this</span>.enableUrlTemplating = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.vendorExtensions = Lists.newArrayList();</span><br><span class="line">    <span class="keyword">this</span>.documentationType = documentationType;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由源码可知配置Docket需要传入一个DocumentationType</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentationType</span> <span class="keyword">extends</span> <span class="title">SimplePluginMetadata</span> </span>{</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DocumentationType SWAGGER_12 = <span class="keyword">new</span> DocumentationType(<span class="string">"swagger"</span>, <span class="string">"1.2"</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DocumentationType SWAGGER_2 = <span class="keyword">new</span> DocumentationType(<span class="string">"swagger"</span>, <span class="string">"2.0"</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DocumentationType SPRING_WEB = <span class="keyword">new</span> DocumentationType(<span class="string">"spring-web"</span>, <span class="string">"1.0"</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MediaType mediaType;</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自定义配置swagger</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span><span class="comment">//开启full模式</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//开启swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Docket,swagger唯一实例</span></span><br><span class="line">    <span class="comment">//注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//Docket还有很多用于配置的方法，详情见后文</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo());</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>{</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">"rain-sky"</span>, <span class="string">"https://rain-sky.github.io/"</span>, <span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">"测试用SwaggerApi文档"</span>,</span><br><span class="line">                <span class="string">"初步学习,不求甚解"</span>,</span><br><span class="line">                <span class="string">"1.0"</span>,</span><br><span class="line">                <span class="string">"https://rain-sky.github.io/"</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">"Apache 2.0"</span>,</span><br><span class="line">                <span class="string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再次访问<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725172406.png"></p><p><strong>是否开启swagger</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(<span class="keyword">this</span>.apiInfo())</span><br><span class="line">        <span class="comment">//true开启swagger,false反之</span></span><br><span class="line">            .enable(<span class="keyword">true</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="只在生产环境使用swagger"><a href="#只在生产环境使用swagger" class="headerlink" title="只在生产环境使用swagger"></a>只在生产环境使用swagger</h4><p><strong>三套环境准备</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725183315.png"></p><p><strong>默认环境配置(application.properties)</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p><strong>swagger配置</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>{</span><br><span class="line"><span class="comment">//配置开启swagger的环境</span></span><br><span class="line">    Profiles profiles = Profiles.of(<span class="string">"dev"</span>, <span class="string">"test"</span>);</span><br><span class="line">    <span class="comment">//当前环境去匹配设置开启swagger的环境</span></span><br><span class="line">    <span class="keyword">boolean</span> b = environment.acceptsProfiles(profiles);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(<span class="keyword">this</span>.apiInfo())</span><br><span class="line">            .enable(b)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于此时我们使用生产环境，故访问<a href="http://localhost:8080/swagger-ui.html%E8%83%BD%E5%A4%9F%E6%88%90%E5%8A%9F">http://localhost:8080/swagger-ui.html能够成功</a></p><p>若此时修改application.properties为</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></tbody></table></figure><p>再次访问，OMG(⊙o⊙)<del>，成功访问失败了</del></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725195156.png"></p><h2 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(<span class="keyword">this</span>.apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">        <span class="comment">//指定扫描</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.chen.Swagger.controller"</span>))</span><br><span class="line">        <span class="comment">//只扫描/user/**下的接口</span></span><br><span class="line">            <span class="comment">//.paths(PathSelectors.ant("/user/**"))</span></span><br><span class="line">            .build();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>RequestHandlerSelectors可选项‘</p><ul><li>any扫描全部</li><li>basePackage配置扫描包</li><li>none不扫描</li><li>扫描类上有指定注解的类，参数 annotation.Class</li><li>扫描方法上有指定注解的方法</li></ul><img src="https://gitee.com/rain-sky/images/raw/master/20210725181443.png" style="zoom: 75%;"><p>PathSelectors可选项</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725181906.png"></p><h2 id="分组与接口扫描"><a href="#分组与接口扫描" class="headerlink" title="分组与接口扫描"></a>分组与接口扫描</h2><p><strong>配置组名与多个组</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">otherDocket</span><span class="params">()</span></span>{</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">              .groupName(<span class="string">"第二组"</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>{</span><br><span class="line"></span><br><span class="line">      Profiles profiles = Profiles.of(<span class="string">"dev"</span>, <span class="string">"test"</span>);</span><br><span class="line">      <span class="keyword">boolean</span> b = environment.acceptsProfiles(profiles);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">              .apiInfo(<span class="keyword">this</span>.apiInfo())</span><br><span class="line">              .enable(b)</span><br><span class="line">              .groupName(<span class="string">"第一组"</span>)</span><br><span class="line">              .select()</span><br><span class="line">              .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.chen.Swagger.controller"</span>))</span><br><span class="line">              .paths(PathSelectors.any())</span><br><span class="line">              .build();</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><strong>访问UI看看</strong></p><p>第一组</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726090851.png"></p><p>第二组</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726091027.png"></p><p>可以看到，第二组就是默认配置下的显示，如果需要更多分组，只需注入多个Docket实例即可，完成协同开发。</p><p><strong>再来看看UI中的Models</strong></p><p>Models表示实体类，只要请求方法中有返回实体类，就会被扫描到Models中，如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlController</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping("/getUser")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用一些注解给文档增加注释</p><p>实体类上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel("用户实体类")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty("用户名")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty("用户Id")</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@ApiModelProperty("用户密码")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接口上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/getId")</span></span><br><span class="line"><span class="meta">@ApiOperation("获取用户Id")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">(<span class="meta">@ApiParam("用户名")</span> String name)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User().getUserId();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问UI看看</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726093631.png"></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726093744.png"></p><h2 id="使用swagger接口测试"><a href="#使用swagger接口测试" class="headerlink" title="使用swagger接口测试"></a>使用swagger接口测试</h2><p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping(value = "/hello",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation("获取用户")</span></span><br><span class="line">    <span class="meta">@GetMapping("/getUser")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"雨水"</span>,<span class="string">"1001"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/getId/{name}")</span></span><br><span class="line">    <span class="meta">@ApiOperation("获取用户Id")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(<span class="meta">@ApiParam("用户名")</span><span class="meta">@PathVariable</span> String name)</span></span>{</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"110012"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UI视图</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726100059.png"></p><p>接口测试</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726100018.png"></p><p>传入路径变量name后，成功返回110012</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Swagger简介&quot;&gt;&lt;a href=&quot;#Swagger简介&quot; class=&quot;headerlink&quot; title=&quot;Swagger简介&quot;&gt;&lt;/a&gt;Swagger简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前端经常抱怨后端给的接口文档与</summary>
      
    
    
    
    
    <category term="swagger" scheme="https://rain-sky.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="https://rain-sky.github.io/2021/07/25/shiro/"/>
    <id>https://rain-sky.github.io/2021/07/25/shiro/</id>
    <published>2021-07-25T07:20:50.000Z</published>
    <updated>2021-07-25T08:10:17.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://shiro.apache.org/">shiro官网</a></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p></blockquote><p>简而言之，Apache Shiro 是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。</p><p><strong><em>shiro能做什么</em></strong></p><ul><li>验证用户身份</li><li>用户访问权限控制，比如：1、判断用户是否分配了一定的安全角色。2、判断用户是否被授予完成某个操作的权限</li><li>在非 Web 或 EJB 容器的环境下可以任意使用Session API</li><li>可以响应认证、访问控制，或者 Session 生命周期中发生的事件</li><li>可将一个或以上用户安全数据源数据组合成一个复合的用户 “view”(视图)</li><li>支持单点登录(SSO)功能</li><li>支持提供“Remember Me”服务，获取用户关联信息而无需登录<br>···</li></ul><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725152615.png"></p><ul><li><strong>Authentication（认证）：</strong>用户身份识别，通常被称为用户“登录”</li><li><strong>Authorization（授权）：</strong>访问控制。比如某个用户是否具有某个操作的使用权限。</li><li><strong>Session Management（会话管理）：</strong>特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li><li><strong>Cryptography（加密）：</strong>在对数据源使用加密算法加密的同时，保证易于使用。</li></ul><p><strong><em>高级概述</em></strong></p><p>在高级概念层面，Shiro 的架构有 3 个主要概念：Subject、SecurityManager 和 Realms。下图是这些组件如何交互的高级概述，我们将在下面介绍每个概念：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725152743.png"></p><ul><li><strong>Subject：</strong>当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li><li><strong>SecurityManager：</strong>管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li><li><strong>Realms：</strong>用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>第一个程序<a href="https://shiro.apache.org/tutorial.html">官方案例</a></p><p>依赖引入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Shiro uses SLF4J for logging.  We'll use the 'simple' binding</span></span><br><span class="line"><span class="comment">         in this example app.  See http://www.slf4j.org for more info. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>shiro.ini</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"><span class="comment"># Tutorial INI configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Usernames/passwords are based on the classic Mel Brooks' film "Spaceballs" :)</span></span><br><span class="line"><span class="comment"># =============================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Users and their (optional) assigned roles</span></span><br><span class="line"><span class="comment"># username = password, role1, role2, ..., roleN</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># roleName = perm1, perm2, ..., permN</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></tbody></table></figure><p>QuickStart.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutorial</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(Tutorial.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"My First Apache Shiro Application"</span>);</span><br><span class="line"></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        <span class="comment">//在几乎所有环境中，您都可以通过以下调用获取当前正在执行的用户：</span></span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        </span><br><span class="line">        session.setAttribute(<span class="string">"someKey"</span>, <span class="string">"aValue"</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">"someKey"</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">"aValue"</span>)) {</span><br><span class="line">            log.info(<span class="string">"Retrieved the correct value! ["</span> + value + <span class="string">"]"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let's login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) {</span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"lonestarr"</span>, <span class="string">"vespa"</span>);</span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            } <span class="keyword">catch</span> (UnknownAccountException uae) {</span><br><span class="line">                log.info(<span class="string">"There is no user with username of "</span> + token.getPrincipal());</span><br><span class="line">            } <span class="keyword">catch</span> (IncorrectCredentialsException ice) {</span><br><span class="line">                log.info(<span class="string">"Password for account "</span> + token.getPrincipal() + <span class="string">" was incorrect!"</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (LockedAccountException lae) {</span><br><span class="line">                log.info(<span class="string">"The account for username "</span> + token.getPrincipal() + <span class="string">" is locked.  "</span> +</span><br><span class="line">                        <span class="string">"Please contact your administrator to unlock it."</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) {</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">"User ["</span> + currentUser.getPrincipal() + <span class="string">"] logged in successfully."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">"schwartz"</span>)) {</span><br><span class="line">            log.info(<span class="string">"May the Schwartz be with you!"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.info(<span class="string">"Hello, mere mortal."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">"lightsaber:wield"</span>)) {</span><br><span class="line">            log.info(<span class="string">"You may use a lightsaber ring.  Use it wisely."</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.info(<span class="string">"Sorry, lightsaber rings are for schwartz masters only."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">"winnebago:drive:eagle5"</span>)) {</span><br><span class="line">            log.info(<span class="string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span> +</span><br><span class="line">                    <span class="string">"Here are the keys - have fun!"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            log.info(<span class="string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://shiro.apache.org/&quot;&gt;shiro官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="安全" scheme="https://rain-sky.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="shiro" scheme="https://rain-sky.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>springSecurity</title>
    <link href="https://rain-sky.github.io/2021/07/24/springSecurity/"/>
    <id>https://rain-sky.github.io/2021/07/24/springSecurity/</id>
    <published>2021-07-24T08:40:22.000Z</published>
    <updated>2021-08-05T09:45:19.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-security"><a href="#spring-security" class="headerlink" title="spring security"></a>spring security</h2><h3 id="springsSecurity简介"><a href="#springsSecurity简介" class="headerlink" title="springsSecurity简介"></a>springsSecurity简介</h3><p><strong>springSecurity是什么</strong></p><p><a href="https://docs.spring.io/spring-security/site/docs/5.2.11.RELEASE/reference/html/">5.2.11版本文档地址</a></p><blockquote><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p><p>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements</p></blockquote><p><strong>springSecurity能做什么？</strong></p><ul><li>身份验证</li><li>访问控制</li></ul><p>其核心就是一组过滤器链，项目启动后将会自动配置。最核心的就是 Basic Authentication Filter 用来认证用户的身份，一个在spring security中一种过滤器处理一种认证方式。</p><p><strong>特性</strong></p><blockquote><p>Spring Security provides comprehensive support for authentication, authorization, and protection against <a href="https://docs.spring.io/spring-security/site/docs/5.2.11.RELEASE/reference/html/features.html#exploits">common exploits</a>. It also provides integration with other libraries to simplify its usage.</p></blockquote><p>Spring Security 为身份验证、授权和常见漏洞利用提供全面支持。它还提供与其他库的集成以简化其使用。</p><p><strong><em>漏洞保护</em></strong></p><p>漏洞举例：</p><ul><li>Cross Site Request Forgery (CSRF) 跨站请求伪造</li><li>Security HTTP Response Headers</li><li>…</li></ul><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>spring boot环境，maven使用</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>Since Spring Boot provides a Maven BOM to manage dependency versions, you do not need to specify a version. If you wish to override the Spring Security version, you may do so by providing a Maven property, as the following example shows:</p></blockquote><p>由于spring boot版本仲裁，如需指定版本，如下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-security.version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">spring-security.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>由于 Spring Security 仅在主要版本中进行重大更改，因此在 Spring Boot 中使用较新版本的 Spring Security 是安全的。但是，有时您可能还需要更新 Spring Framework 的版本。您可以通过添加 Maven 属性来实现，如以下示例所示：</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.15.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>示例</strong></p><p>假定我们有不同等级用户，并且已经编写好对应controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.boot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//只有相应等级的用户才能访问对应等级才能访问的页面，/请求所有用户可访问</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/"</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">"/level1/**"</span>).hasRole(<span class="string">"level1"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level2/**"</span>).hasRole(<span class="string">"level2"</span>)</span><br><span class="line">                .antMatchers(<span class="string">"/level3/**"</span>).hasRole(<span class="string">"level3"</span>);</span><br><span class="line">        <span class="comment">//未登录返回到登陆页面，自定义我们自己写的/toLogin请求到前端页面,处理登录请求的url配置为自己写的/login</span></span><br><span class="line">        <span class="comment">//自定义前端传递的用户名密码参数名称为user和pwd，默认为username与password</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">"/toLogin"</span>).passwordParameter(<span class="string">"pwd"</span>)</span><br><span class="line">            .usernameParameter(<span class="string">"user"</span>).loginProcessingUrl(<span class="string">"/login"</span>);</span><br><span class="line">        <span class="comment">//开启注销功能,注销成功返回首页,前端注销按钮配置/logout请求即可</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">//开启记住我功能,并且在自己的登录页传递remember参数，控制台能查到相应cookie</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">"remember"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//用户本应当从数据库中获取，此处直接从内存中，便于测试</span></span><br><span class="line">        <span class="comment">//给root用户赋予全部角色权限，普通用户授予level1角色权限</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">"root"</span>).password(<span class="keyword">new</span>  BCryptPasswordEncoder().encode(<span class="string">"123123"</span>)).roles(<span class="string">"level1"</span>,<span class="string">"level2"</span>,<span class="string">"level3"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"commonUser"</span>).password(<span class="keyword">new</span>  BCryptPasswordEncoder().encode(<span class="string">"123456"</span>)).roles(<span class="string">"level1"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前端登录表单示例</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210725111116.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring-security&quot;&gt;&lt;a href=&quot;#spring-security&quot; class=&quot;headerlink&quot; title=&quot;spring security&quot;&gt;&lt;/a&gt;spring security&lt;/h2&gt;&lt;h3 id=&quot;springsSecuri</summary>
      
    
    
    
    
    <category term="springSecurity" scheme="https://rain-sky.github.io/tags/springSecurity/"/>
    
  </entry>
  
  <entry>
    <title>redis基础</title>
    <link href="https://rain-sky.github.io/2021/07/24/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://rain-sky.github.io/2021/07/24/redis%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-24T07:41:03.000Z</published>
    <updated>2021-08-04T08:56:20.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用noSql"><a href="#为什么使用noSql" class="headerlink" title="为什么使用noSql"></a>为什么使用noSql</h2><blockquote><p>noSql，不仅仅是sql</p></blockquote><h3 id="单机mysql时代"><a href="#单机mysql时代" class="headerlink" title="单机mysql时代"></a>单机mysql时代</h3><p>在90年代，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。<br>在那个时候，更多的都是静态网页，动态交互类型的网站不多，无论读写都在同一个实例中完成。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726114217.png"></p><ul><li>APP 应用端</li><li>DAL 数据访问层（jdbc，或者orm框架如mybaties，Hibernate等）</li><li>mysql instance 数据库实例</li></ul><h3 id="Memcached-MySQL-垂直拆分"><a href="#Memcached-MySQL-垂直拆分" class="headerlink" title="Memcached+MySQL+垂直拆分"></a>Memcached+MySQL+垂直拆分</h3><p> 后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用缓存技术来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。</p><p> Memcached作为一个独立的分布式的缓存服务器，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端。</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726114531.png" style="zoom:80%;"><h3 id="Mysql主从读写分离"><a href="#Mysql主从读写分离" class="headerlink" title="Mysql主从读写分离"></a>Mysql主从读写分离</h3><p>由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。</p><img src="https://gitee.com/rain-sky/images/raw/master/20210726121707.png" style="zoom:80%;"><ul><li>M 主服务器，负责写业务</li><li>S 从服务器，同步M数据</li></ul><h3 id="分库分表-水平拆分-mysql集群"><a href="#分库分表-水平拆分-mysql集群" class="headerlink" title="分库分表+水平拆分+mysql集群"></a>分库分表+水平拆分+mysql集群</h3><p>在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于MyISAM在写数据的时候会使用表锁，在高并发写数据的情况下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MyISAM。</p><ul><li>MyISAM 表锁</li><li>InnoDB 行锁</li></ul><p><img src="https://gitee.com/rain-sky/images/raw/master/20210726122057.png"></p><p><strong>一个现代互联网服务架构模型</strong></p><img src="https://gitee.com/rain-sky/images/raw/master/20210726123128.png" style="zoom: 67%;"><p>最前面的是企业级防火墙，后面通过负载均衡主机（软负载：Nginx，硬负载：F5）在 web 服务器集群之间进行调度，再由具体的 web 服务器（Tomcat）去访问缓存，访问数据库。</p><h3 id="noSql的优势"><a href="#noSql的优势" class="headerlink" title="noSql的优势"></a>noSql的优势</h3><ul><li><p>易扩展<br> NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</p></li><li><p>大数据量，高性能<br> NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了。</p></li><li><p>灵活的数据模型<br> NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。这点在大数据量的web2.0时代尤其明显。</p></li><li><p>高可用<br> NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构。比如Cassandra，HBase模型，通过复制模型也能实现高可用。</p></li></ul><p><strong>一些常用的nosql举例</strong></p><ul><li>CouchDB ：CouchDB是一种<strong>面向文档</strong>(document-oriented)的nosql数据库，文档的存储格式通过JSON进行描述，在结构部署上采用的是peer-based方式，即每台机器在功能上来讲是同等重要的，没有master和slave的区分，所存储的数据也都是相同的(没有做到数据的分布式存储)，类似于Subversion中版本库和工作拷贝的概念。</li><li>Redis：Redis是一种基于<strong>key-value存储格式</strong>的nosql数据库，在结构部署上采用了master/slave的方式，其中slave节点起到备份的作用，当master节点出现问题的时候，slave节点可替换成master，从而确保了系统安全稳定的特性。</li><li>MongoDB：同CouchDB一样，MongoDB也是一种<strong>面向文档</strong>的nosql数据库，所不同的是在存储方式上采用的是分布式存储，其部署结构与Redis相似(基于master/slave方式)，只不过功能组件较Redis划分的更加详细。</li></ul><p><strong>四种nosql对比</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210727145920.png"></p><h2 id="redis-介绍"><a href="#redis-介绍" class="headerlink" title="redis 介绍"></a>redis 介绍</h2><blockquote><p>基于redis6.x版</p></blockquote><p>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p><p><strong>Redis与其他key-value存储有什么不同？</strong></p><ul><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存。在内存数据库方面的另一个优点是， 相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。 同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul><h3 id="linux下安装redis"><a href="#linux下安装redis" class="headerlink" title="linux下安装redis"></a>linux下安装redis</h3><p>准备好压缩包传输到Linux目录</p><p><strong>解压后得到redis</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210731174107.png"></p><p>进入解压后的文件</p><p>yum install gcc-c++</p><img src="https://gitee.com/rain-sky/images/raw/master/20210731175718.png" style="zoom: 50%;"><p>安装redis6.X以上版本安装6.0以上版本需要升级gcc到5.3及以上,如下：</p><p>运行下面命令升级gcc<br>#第一步<br>sudo yum install centos-release-scl<br>#第二步<br>sudo yum install devtoolset-7-gcc*<br>#第三步<br>scl enable devtoolset-7 bash</p><p>更新完成gcc后我们进入redis目录下，执行make</p><img src="https://gitee.com/rain-sky/images/raw/master/20210731180138.png" style="zoom:50%;"><p>至此redis基本安装完成，默认安装到/usr/local/bin目录下</p><p>复制一份redis配置文件到此目录下，修改此配置文件，daemonize修改为yes,让redis后台启动</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210731183404.png"></p><p>指定配置文件启动</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210731183637.png"></p><p>连接redis服务</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210731183754.png"></p><p>查看redis服务是否开启</p><img src="https://gitee.com/rain-sky/images/raw/master/20210731183950.png" style="zoom:67%;"><p>断开redis服务</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210731184120.png"></p><p>再次查看服务是否存在</p><img src="https://gitee.com/rain-sky/images/raw/master/20210731184222.png" style="zoom:67%;"><blockquote><p>redis的安装相关就到此搞一段落~💪</p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="redis数据库"><a href="#redis数据库" class="headerlink" title="redis数据库"></a>redis数据库</h3><p>redis默认有16个数据库，配置文件中可以看到，默认使用第0个，可以使用select命令切换数据库。</p><p>切换数据库：select  7</p><p>数据库大小：dbsize</p><p>输入一个键值对：set keyname value</p><p>得到一个value：get  keyname</p><p>修改key名称：rename key newkey</p><p>查询所有的key：key *</p><p>查询某个key是否存在：exists keynane</p><p>移除某一个key：move keyname  2（2代表从第二个数据库中移除）</p><p>查询某个key还剩多少时间过期：ttl keyname</p><p>设置某个键的过期时间：expire keyname 10(10s后过期)</p><p>查看当前key的类型：type keyname</p><p>清空当前数据库：flushdb</p><p>清空所有数据库：flushall</p><p><strong>redis是单线程的</strong></p><blockquote><p>redis是基于内存操作，cpu并不是redis的性能瓶颈，redis的瓶颈是机器的内存和网络带宽。</p></blockquote><p>为什么redis单线程这么快？</p><p>误区1：高性能的服务器一定是多线程的？</p><p>误区2：多线程一定比单线程效率高？</p><p>核心：redis是将所有数据存放于内存中的，所以说redis使用单线程是最快的，因为没有CPU上下文切换，对于内存系统来说，多次读写都是在一个CPU上的。</p><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><h4 id="String字符串类型"><a href="#String字符串类型" class="headerlink" title="String字符串类型"></a>String字符串类型</h4><hr><p>基本命令操作：</p><p>set  name  rain 输入一个字符串类型为 rain</p><p>append name sky 给名为name的key追加字符sky，所以追加后为rainsky（若指定keyname不存在，则相当于set key）</p><p>strlen name 获取name的长度，rainsky即为7</p><p>set num 1 设置num初始值为1</p><p>incr num使num自增1.即为2</p><p>decr num使num自减1，即为1</p><p>incrby num 10 使num自增10</p><p>decrby num 10使num自减10</p><hr><p>set str “hello,world!”</p><p>getrange str 0 4获取str0-4区间内容（闭区间），即为hello</p><p>setrange str 1 xxxx从指定位置开始用指定字符串作替换，即为hxxxx,world!</p><hr><blockquote><p>setex与setnx</p></blockquote><p>SETEX key seconds value</p><p>含义：</p><p>​     将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。</p><p>​     如果 key 已经存在， SETEX 命令将覆写旧值。</p><p>返回值：</p><p>​     设置成功时返回 OK 。</p><p>​     当 seconds 参数不合法时，返回一个错误。</p><p>SETNX key value（分布式锁常用）</p><p>含义：</p><p>​     将 key 的值设为 value ，当且仅当 key 不存在。</p><p>​     若给定的 key 已经存在，则 SETNX 不做任何动作。</p><p>​     SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p><p>返回值：</p><p>​     设置成功，返回 1 。</p><p>​     设置失败，返回 0 。</p><blockquote><p>mset与mget，msetnx</p></blockquote><p>mset k1 v1 k2 v2 k3 v3…一次性输入多个值</p><p>mget k1 k2 k3 一次性获取多个值</p><p>msetnx k1 v1 k2 v2 …一次性设置多个值，如果有一个key已经存在，则整个句子执行失败（原子性）</p><blockquote><p>设置一个对象</p></blockquote><p>如：set user:1 {name:rain,age:14}</p><p>另一种设计：</p><p>mset user:1:name rain user:1:age 14</p><blockquote><p>getset组合命令</p></blockquote><p>getset name rainsky 先获取值再重新设置值，不存在则返回nil</p><h4 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部，可存在重复值。</p><p><strong>基本用法</strong></p><p>此处list列表名即为key</p><p>lpush list cat 往名为list的列表左侧添加一个cat</p><p>若再一次添加dog，pig，则此列表中就有三个元素</p><p>lrange list 0 -1 输出列表中的元素，如上的话则为pig dog cat</p><p>rpush list duck 往列表右侧添加一个元素</p><p>lpop list移除list队列左侧第一个元素</p><p>rpop list移除list右侧第一个元素</p><p>lindex list 1 获取list中下标为1的元素</p><p>llen list 获取列表长度</p><p>lrem list 1 cat 移除list中一个cat ，1为移除的个数</p><p>ltrim list n1 n2 阶段list为n1,n2中间的元素，闭区间</p><p>rpoplpush list1  list2 把list1中的最右边一个元素添加到list2最左边</p><p>lset list 0 item 将list列表中指定下标处的值更新为指定值，如果不存在列表或下标越界将会报错</p><p>linsert list before v2 nv 往v2的左侧插入一个nv，同样也有after插入</p><p><strong>一些应用</strong></p><p>消息队列，生产者消费者等</p><h4 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h4><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。集合对象的编码可以是 intset 或者 hashtable。Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p><strong>基本用法</strong></p><p>此处set集合名即为key值</p><p>sadd myset hello 往myset中存入hello</p><p>smembers myset 列出myset中所有值</p><p>sismember myset hello 查询myset中是否含有hello这个值，有返回1，无0</p><p>scard myset 获取元素个数</p><p>srem myset hello 删除hello</p><p>spop myset 随机删除一个元素</p><p>srandmember  myset从指定集合中随机抽取一个元素</p><p>smove myset myset2  “hello” 将myset中hello元素移动到myset2中</p><p>sdiff set1 set2 查询set1与set2的差集</p><p>sinter set1 set2 交集(共同关注<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> )</p><p>sunion set1 set2 并集</p><h4 id="Hash哈希"><a href="#Hash哈希" class="headerlink" title="Hash哈希"></a>Hash哈希</h4><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象，就像map。</p><p><strong>基本用法</strong></p><p>hset myhash name rainsky将name-&gt;rainsky键值对（哈希值）存入myhash这个哈希表</p><p>hget myhash name 从myhash中获取key为name的value</p><p>hmset myhash name rainsky age 18 存入多个哈希值</p><p>hmget myhash name age 获取哈希表中多个key对应的value值</p><p>hgetall myhash 获取所有哈希值，结果以key换行value换行key换行value换行…显示</p><p>hdel myhash name 删除myhash哈希表中name对应的哈希值</p><p>hlen myhash 获取哈希表哈希值个数</p><p>exists myhash name判断name为key的哈希值是否存在于myhash中</p><p>hkeys myhash获取所有key</p><p>hvals myhash获取所有value</p><p>hincrby myhash age  1 让age对应value自增1</p><p>hsetnx myhash name rain 当此哈希值不存在时插入指定哈希值</p><h4 id="zset有序集合"><a href="#zset有序集合" class="headerlink" title="zset有序集合"></a>zset有序集合</h4><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><p><strong>基本用法</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 1 redis 分数为1处元素为redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 2 mongodb</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 3 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZADD runoobkey 4 mysql</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; ZRANGE runoobkey 0 10 WITHSCORES 输出zset中score再0-10区间的内容并把score连带升序输出</span><br><span class="line"></span><br><span class="line">1) "redis"</span><br><span class="line">2) "1"</span><br><span class="line">3) "mongodb"</span><br><span class="line">4) "2"</span><br><span class="line">5) "mysql"</span><br><span class="line">6) "4"</span><br><span class="line"></span><br><span class="line">zrem runoobkey redis 移除一个指定元素</span><br><span class="line">zcard runoobkey 查看元素个数</span><br><span class="line">zrevrange myzset 降序排序，默认是升序</span><br><span class="line">zcount myset n1 n2获取n1 n2区间的元素个数</span><br><span class="line">zrangebyscore myzset -inf +inf 将zset中元素按score排序，score范围为-inf到+inf</span><br></pre></td></tr></tbody></table></figure><p>可以有什么应用呢？</p><p>存储带权重（score）的数据，然后排序，如各种排行榜。</p><h3 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h3><h4 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h4><p>将指定的地理空间位置（纬度、经度、名称）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。</p><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul><p>当坐标位置超出上述指定范围时，该命令将会返回一个错误。</p><p><strong>相关指令</strong></p><p>groadd：将指定的地理空间位置（纬度、经度、名称）添加到指定的key中。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将城市信息添加进city中，两个数字分别对应维度，经度，第三个参数代表名称</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD city 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></tbody></table></figure><p>gropops：从key里返回所有给定位置元素的位置（经度和纬度）。GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOPOS city Palermo Catania NonExisting</span></span><br><span class="line">1) 1) "13.361389338970184"</span><br><span class="line">   2) "38.115556395496299"</span><br><span class="line">2) 1) "15.087267458438873"</span><br><span class="line">   2) "37.50266842333162"</span><br><span class="line">3) (nil)</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><p>GEODIST：命令 - 返回两个给定位置之间的距离</p><p>指定单位的参数 unit 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p>如果用户没有显式地指定单位参数， 那么 <code>GEODIST</code> 默认使用米作为单位。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD Sicily 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEODIST Sicily Palermo Catania</span></span><br><span class="line">"166274.15156960039"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEODIST Sicily Palermo Catania km</span></span><br><span class="line">"166.27415156960038"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEODIST Sicily Palermo Catania mi</span></span><br><span class="line">"103.31822459492736"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEODIST Sicily Foo Bar</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><p>GEORADIUS: 命令 - 以给定的经纬度为中心， 找出某一半径内的元素</p><ul><li><code>WITHDIST</code>: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</li><li><code>WITHCOORD</code>: 将位置元素的经度和维度也一并返回。</li></ul><p>命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式：</p><ul><li><code>ASC</code>: 根据中心的位置， 按照从近到远的方式返回位置元素。</li><li><code>DESC</code>: 根据中心的位置， 按照从远到近的方式返回位置元素。</li></ul><p>返回值<br>在没有给定任何 WITH 选项的情况下， 命令只会返回一个像 [“New York”,”Milan”,”Paris”] 这样的线性（linear）列表。<br>在指定了 WITHCOORD 、 WITHDIST 、 WITHHASH 等选项的情况下， 命令返回一个二层嵌套数组， 内层的每个子数组就表示一个元素。<br>在返回嵌套数组时， 子数组的第一个元素总是位置元素的名字。 至于额外的信息， 则会作为子数组的后续元素， 按照以下顺序被返回：</p><p>以浮点数格式返回的中心与位置元素之间的距离， 单位与用户指定范围时的单位一致。<br>geohash 整数。<br>由两个元素组成的坐标，分别为经度和纬度。<br>举个例子， GEORADIUS Sicily 15 37 200 km WITHCOORD WITHDIST 这样的命令返回的每个子数组都是类似以下格式的：</p><p>[“Palermo”,”190.4424”,[“13.361389338970184”,”38.115556395496299”]]</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD Sicily 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEORADIUS Sicily 15 37 200 km WITHDIST</span></span><br><span class="line">1) 1) "Palermo"</span><br><span class="line">   2) "190.4424"</span><br><span class="line">2) 1) "Catania"</span><br><span class="line">   2) "56.4413"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEORADIUS Sicily 15 37 200 km WITHCOORD</span></span><br><span class="line">1) 1) "Palermo"</span><br><span class="line">   2) 1) "13.361389338970184"</span><br><span class="line">      2) "38.115556395496299"</span><br><span class="line">2) 1) "Catania"</span><br><span class="line">   2) 1) "15.087267458438873"</span><br><span class="line">      2) "37.50266842333162"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD</span></span><br><span class="line">1) 1) "Palermo"</span><br><span class="line">   2) "190.4424"</span><br><span class="line">   3) 1) "13.361389338970184"</span><br><span class="line">      2) "38.115556395496299"</span><br><span class="line">2) 1) "Catania"</span><br><span class="line">   2) "56.4413"</span><br><span class="line">   3) 1) "15.087267458438873"</span><br><span class="line">      2) "37.50266842333162"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><p> GEOHASH 命令 - 返回一个或多个位置元素的 Geohash 表示</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD Sicily 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOHASH Sicily Palermo Catania</span></span><br><span class="line">1) "sqc8b49rny0"</span><br><span class="line">2) "sqdtr74hyu0"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><p>GEORADIUSBYMEMBER 命令 - 找出位于指定范围内的元素，中心点是由给定的位置元素决定</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD Sicily 13.583333 37.316667 <span class="string">"Agrigento"</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEOADD Sicily 13.361389 38.115556 <span class="string">"Palermo"</span> 15.087269 37.502669 <span class="string">"Catania"</span></span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GEORADIUSBYMEMBER Sicily Agrigento 100 km</span></span><br><span class="line">1) "Agrigento"</span><br><span class="line">2) "Palermo"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> </span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>geo底层就是zset</p></blockquote><p>可以看出geo未给出移除元素api，我们可以使用zrem来操作</p><p>如：zrange Sicily -inf +inf 列出所有城市名称，zrem Sicily Palermo 删除一个城市</p><h4 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h4><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><blockquote><p>什么是基数？</p></blockquote><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><p><strong>基本用法</strong><br>pfadd mypf  1 2 3 4 5 6 7加入数据集</p><p>pfadd yourpf 1 2 4 8 9</p><p>pcount mypf 计算基数</p><p>pfmerge  all mypf yourpf 将mypf，yourpf合并为all</p><h4 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h4><p>Redis提供的Bitmaps这个“数据结构”可以实现对位的操作。Bitmaps本身不是一种数据结构，实际上就是字符串，但是它可以对字符串的位进行操作。</p><p>可以把Bitmaps想象成一个以位为单位数组，数组中的每个单元只能存0或者1，数组的下标在bitmaps中叫做偏移量。单个bitmaps的最大长度是512MB，即2^32个比特位。<br><strong>基本操作</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> setbit key 10 1</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getbit key 10</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getbit key 11</span></span><br><span class="line">(integer) 0</span><br><span class="line">-----------------------------</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setbit key 0 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setbit key 100 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> bitcount key</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></tbody></table></figure><h3 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h3><p><strong>引言</strong></p><blockquote><p>在数据库相关理论中，一个逻辑工作单元想要成为事务，就必须满足<strong>ACID</strong>，即原子性、一致性、隔离性和持久性。</p><ul><li>(1)原子性：原子性这个概念其实就是指，一个事务内的所有SQL操作都是一个整体，因此只有所有的SQL操作都完全执行成功，该事务方可以认为提交成功。如果在提交事务过程中某一条SQL语句执行失败，则整个事务必须回滚到事务提交前的状态。</li><li>(2)一致性：而一致性这个概念则是指，事务在完成的时候，必须要保证所有的数据都保持一致的状态，而落实到数据库的各个组成部分上，则要求开发人员能够保证数据、索引、约束、日志等在事务前后具备一致性。</li><li>(3)隔离性：隔离性这个概念主要针对并发，其核心思想就是不同的并发事务对数据产生的修改必须是相互隔离的，假设有两个不同的事务A和B并发执行，那么对A来讲，它在执行前的状态只有两种，即B执行前和B执行后。同理，对B来讲同样是如此，这样的特性我们就称为隔离性。</li><li>(4)持久性：持久性相对简单，是指事务完成以后它对数据的影响是永久性的。</li></ul></blockquote><h4 id="redis事务处理"><a href="#redis事务处理" class="headerlink" title="redis事务处理"></a>redis事务处理</h4><p><strong>redis事务介绍</strong></p><ol><li>Redis 的事务是通过 <strong>MULTI，EXEC，DISCARD 和 WATCH</strong> 这四个命令来完成的。</li><li>Redis 的单个命令都是<strong>原子性</strong>的，所以这里确保事务性的对象是<strong>命令集合</strong>。</li><li>Redis 将命令集合序列化并确保处于同一事务的<strong>命令集合连续且不被打断</strong>的执行</li><li>Redis不支持回滚操作</li></ol><p>思考：为什么 Redis 不支持事务回滚？</p><ul><li>大多数事务失败是因为<strong>语法错误或者类型错误</strong>，这两种错误，在开发阶段都是可以预见的。</li><li>Redis 为了<strong>性能方面</strong>就忽略了事务回滚。</li></ul><blockquote><p>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。</p></blockquote><p><strong>事务处理命令</strong></p><p>事务处理命令会像非事务状态下一样被立刻执行</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802120751.jpeg"></p><p><strong>事务处理流程</strong></p><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li>1）开始事务。（非事务状态-&gt;事务状态）</li><li>2）命令入队。（并不执行）</li><li>3）执行事务。</li></ul><p>一个简单事务示例</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI </span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; SET Book_Name "GIt Pro" </span><br><span class="line">QUEUED </span><br><span class="line">127.0.0.1:6379&gt; SADD Program_Language "C++" "C#" "Jave" "Python"  </span><br><span class="line">QUEUED </span><br><span class="line">127.0.0.1:6379&gt; GET Book_Name </span><br><span class="line">QUEUED </span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 4 </span><br><span class="line">3) "GIt Pro" </span><br></pre></td></tr></tbody></table></figure><h4 id="事务处理情况示例"><a href="#事务处理情况示例" class="headerlink" title="事务处理情况示例"></a>事务处理情况示例</h4><p>放弃事务</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802145006.jpeg"></p><p>命令性错误，所有命令均不会执行</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802145320.png"></p><p>运行时错误，其他命令依然执行</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802145525.png"></p><h4 id="redis实现乐观锁"><a href="#redis实现乐观锁" class="headerlink" title="redis实现乐观锁"></a>redis实现乐观锁</h4><p><strong>悲观锁</strong></p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p><p><strong>乐观锁</strong></p><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>，像数据库提供的类似于<strong>write_condition机制</strong>，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式<strong>CAS</strong>实现的。</p><p><strong>redis实现乐观锁</strong></p><p>使用watch对数据加锁，当执行事务期间，被加锁数据未背修改则事务可成功执行，否则执行失败</p><p>先在一个连接（假设为线程1）里编写一个事务，</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set money 100</span><br><span class="line">set out 0</span><br><span class="line">multi</span><br><span class="line">decrby money 10</span><br><span class="line">incrby out 10</span><br></pre></td></tr></tbody></table></figure><p>还未exec我们开启另外一个连接（假设为线程2），相当于另外一个用户，执行以下操作</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incrby money 100</span><br></pre></td></tr></tbody></table></figure><p>执行完毕后我们回到线程1</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set money 100</span><br><span class="line">set out 0</span><br><span class="line">multi</span><br><span class="line">decrby money 10</span><br><span class="line">incrby out 10</span><br><span class="line">exec</span><br></pre></td></tr></tbody></table></figure><p>当我们执行exec后会报错，因为在我们执行事务期间监视值money已经被其他线程修改</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unwatch 放弃监视</span><br><span class="line">watch money 监视money此时已经是最新值</span><br></pre></td></tr></tbody></table></figure><blockquote><p>乐观锁的一些应用：秒杀系统</p></blockquote><h2 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h2><p>Redis官方推荐的Java连接开发工具</p><p><a href="https://www.runoob.com/redis/redis-java.html">参考学习</a></p><p>maven项目使用</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>连接到redis</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisJava</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="comment">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span></span><br><span class="line">        <span class="comment">// jedis.auth("123456"); </span></span><br><span class="line">        System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">        <span class="comment">//查看服务是否运行</span></span><br><span class="line">        System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//String操作</span></span><br><span class="line">        <span class="comment">//设置 redis 字符串数据</span></span><br><span class="line">        jedis.set(<span class="string">"runoobkey"</span>, <span class="string">"www.runoob.com"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        System.out.println(<span class="string">"redis 存储的字符串为: "</span>+ jedis.get(<span class="string">"runoobkey"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//List操作</span></span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Runoob"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Google"</span>);</span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"Taobao"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        List&lt;String&gt; list = jedis.lrange(<span class="string">"site-list"</span>, <span class="number">0</span> ,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) {</span><br><span class="line">            System.out.println(<span class="string">"列表项为: "</span>+list.get(i));</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不再赘述，所有操作与命令均相似</p><blockquote><p>一个事务的栗子<span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802155721.png"></p><h2 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h2><p>spring系列与数据操作相关的项目为spring-data，<a href="https://spring.io/projects/spring-data-redis">官网</a></p><img src="https://gitee.com/rain-sky/images/raw/master/20210802160745.png" style="zoom:50%;"><p>在springboot2.x后，操作redis的jedis更换为lettuce。</p><p>jedis：采用直连，多个线程操作的话不安全，需要使用Jedis  pool ，类似BIO模式。</p><p>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全情况，类似NIO模式。</p><blockquote><p>使用</p></blockquote><p><strong>导入starter</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>配置解析</strong></p><p>找到自动配置类，可以看到为我们注入了两个常用类，方法参数为一个redis连接工厂对象，点进去发现是一个接口，而此接口的实现类有两个。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802161509.png"></p><p>实现类</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802164132.png"></p><p>看看绑定的配置类，找到配置类，可以看到一些默认配置</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210802161554.png"></p><p><strong>配置连接示例</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）  </span></span><br><span class="line"><span class="string">spring.redis.database=0</span>  </span><br><span class="line"><span class="comment"># Redis服务器地址  </span></span><br><span class="line"><span class="string">spring.redis.host=192.168.0.24</span>  </span><br><span class="line"><span class="comment"># Redis服务器连接端口  </span></span><br><span class="line"><span class="string">spring.redis.port=6379</span>  </span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）  </span></span><br><span class="line"><span class="string">spring.redis.password=</span>  </span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制）  </span></span><br><span class="line"><span class="string">spring.redis.pool.max-active=200</span>  </span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）  </span></span><br><span class="line"><span class="string">spring.redis.pool.max-wait=-1</span>  </span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接  </span></span><br><span class="line"><span class="string">spring.redis.pool.max-idle=10</span> </span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接  </span></span><br><span class="line"><span class="string">spring.redis.pool.min-idle=0</span>  </span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）  </span></span><br><span class="line"><span class="string">spring.redis.timeout=1000</span> </span><br></pre></td></tr></tbody></table></figure><p><strong>简单测试</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//对String类型的操作</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">"myKey"</span>,<span class="string">"myValue"</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">"myKey"</span>));</span><br><span class="line">        <span class="comment">//对list的操作</span></span><br><span class="line">        redisTemplate.opsForList().leftPush(<span class="string">"hello"</span>,<span class="string">"world!"</span>);</span><br><span class="line">        redisTemplate.opsForList().leftPop(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取连接对象</span></span><br><span class="line">        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">        connection.flushAll();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>自定义RedisTemplate</strong></p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 网络传输的对象必须序列化</p><p>自定义序列化方式</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803085557.png"></p><p>往往结合自己注入的RedisTempalte再自定义一个redis工具类</p><h2 id="redis-conf"><a href="#redis-conf" class="headerlink" title="redis.conf"></a>redis.conf</h2><p>redis启动的时候就是通过指定配置文件来启动的</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 存储单位可选，大小写不敏感</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803100112.png"></p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>引入其他配置文件</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803100219.png"></p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>网络配置，参见network部分</p><ul><li>bind 127.0.0.1 绑定的主机地址</li></ul><p>关于bind，这个问题是由于很多文档解释bind而导致的误会。很多地方翻译如下：</p><blockquote><p>指定redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，在生产环境中最好设置该项</p></blockquote><p>但是，实际上，应该bind的是redis所在服务器网卡的ip。也就是说，如果你的redis服务器有两张网卡，一张是ip-1,另一张是ip-2，如果你bind ip-1.那么只有请求ip-1的请求会被受理。</p><ul><li>port 6379 指定 Redis 监听端口，默认端口为 6379。</li></ul><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>通常配置</p><p>daemonize no：Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程。</p><p>pidfile /var/run/redis_6379.pid：以守护进程运行绑定的pid文件</p><p>loglevel notic ：指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</p><p>logfile “” ：日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</p><p>databases 16 ：数据库个数</p><p>always-show-logo no：是否显示redis的logo</p><p><span class="github-emoji"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>快照SNAPSHOTTING</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803103030.png"></p><p>Redis 默认配置文件中提供了三个条件：</p><p><strong>save 900 1</strong></p><p><strong>save 300 10</strong></p><p><strong>save 60 10000</strong></p><p>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</p><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件</span></span><br><span class="line">stop-writes-on-bgsave-error yes  <span class="comment">#在保存数据库文件时出错是否停止写入</span></span><br><span class="line">rdbcherksum yes <span class="comment">#rdb文件保存时是否错误检查</span></span><br><span class="line">rdbfilename dump.rdb <span class="comment">#指定rdb持久化文件名</span></span><br><span class="line">dir ./ <span class="comment">#rdb持久化文件保存的目录</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>主从复制REPLICATION</p><p><span class="github-emoji"><span>🚶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>安全SECURITY</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass <span class="string">"你的密码"</span></span><br><span class="line">config get requirepass 获取密码</span><br><span class="line">auth <span class="string">"你的密码"</span> 密码验证</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803110057.png"></p><p><span class="github-emoji"><span>8⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>APPEND ONLY MODE(AOF)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认不开启AOF</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># The name of the append only file (default: "appendonly.aof")</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"><span class="comment">#每秒执行一次sync</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment">#不执行sync，操作系统自主同步数据</span></span><br><span class="line">appendfsync no</span><br><span class="line"><span class="comment">#每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync always</span><br></pre></td></tr></tbody></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>产生一个数据快照文件</p><p>RDB是Redis用来进行持久化的一种方式，在指定时间间隔把当前内存中的数据集快照写入磁盘，也就是 Snapshot 快照（数据库中所有键值对数据）。恢复时是将快照文件直接读到内存里。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803152638.png"></p><p>在rdb方式中，redis会fork一个子进程来将内存中的数据写入一个临时rdb文件中，写入完成后会替换原有rdb文件，父进程仍然可以处理客户端请求。</p><p><strong>触发规则</strong></p><ul><li>save规则满足时</li><li>flushall时</li><li>退出redis时</li></ul><p><strong>恢复rdb文件</strong></p><p>在config get dir结果目录下存在rdb文件启动时便会自动加载</p><p><strong>利弊</strong></p><p>优点：</p><ul><li>紧凑型备份文件，占用内存小</li><li>在子进程中完成备份</li><li>恢复大量数据集时速度快</li><li>单文件易于传输</li></ul><p>缺点：</p><ul><li>如果服务器宕机会出现数据丢失</li><li>数据庞大时，fork操作耗时</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>Redis的另外一种持久化方案就是AOF，Append Only File。AOF相当于一个操作的日志记录，每次对于数据的变更（读操作不记录）都会记录追加到AOF日志。当服务启动的时候就会读这些操作日志，重新执行一次操作，从而恢复原始数据。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803154830.png"></p><p>在reids.conf中可以看到，aof是默认不开启的</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认不开启AOF</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># The name of the append only file (default: "appendonly.aof")</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span> <span class="comment">#默认产生记录文件，若该文件损坏，redis无法启动，我们可以使用redis-cherk-aof来修复该文件，但不能保证数据不丢失，redis-check-aof --fix appendonly.aof 即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每秒执行一次sync</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment">#不执行sync，操作系统自主同步数据</span></span><br><span class="line">appendfsync no</span><br><span class="line"><span class="comment">#每次修改都会sync，消耗性能</span></span><br><span class="line">appendfsync always</span><br><span class="line"></span><br><span class="line">- auto-aof-rewrite-percentage 100 <span class="comment">#当文件增长100%（一倍）时候，自动重写。</span></span><br><span class="line">- auto-aof-rewrite-min-size 64mb <span class="comment">#日志重写最小文件大小，如果小于该大小，不会自动重写。</span></span><br></pre></td></tr></tbody></table></figure><p><strong>优缺点</strong></p><p>优点</p><ul><li>默认每秒同步一次，文件完整性更好</li></ul><p>缺点：</p><ul><li>aof文件体积大，修复速度慢</li><li>大量写入的时候aof效率低</li></ul><blockquote><p>如何选择</p></blockquote><p>以上已经基本了解过RDB和AOF的使用、基本原理以及对应的优缺点。那么在实际当中，我们到底怎么去选择用哪种持久化方式呢？</p><p>一般来说，不考虑硬盘大小，最安全的做法是RDB与AOF同时使用，即使AOF损坏无法修复，还可以用RDB来恢复数据。</p><p>如果Redis的数据在你的服务中并不是必要的数据，例如只是当简单的缓存，没有缓存也不会造成缓存雪崩。说明数据的安全可靠性并不是首要考虑范围内，那么单独只使用RDB就可以了。</p><p>不推荐单独使用AOF，因为AOF对于数据的恢复载入来说，比RDB慢。并且Redis官方也说明了，AOF有一个罕见的bug。出了问题无法很好的解决。所以使用AOF的时候，最好还是有RDB作为数据备份。</p><h2 id="redis发布订阅"><a href="#redis发布订阅" class="headerlink" title="redis发布订阅"></a>redis发布订阅</h2><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803162718.png"></p><p><strong>相关命令</strong></p><p>PSUBSCRIBE pattern [pattern1 ….]</p><ul><li>说明：订阅一个或多个符合给定模式的频道，每个模式以*作为匹配符</li><li>参数：pattern(给定的模式)</li><li>返回：接受到的信息</li></ul><p>PUNSUBSCRIBE pattern [pattern1 ….]</p><ul><li>说明：用于退订所有给定模式的频道</li><li>参数：pattern(给定的模式)</li><li>返回：这个命令在不同的客户端中有不同的表现。</li></ul><p>SUBSCRIBE channel [channel1 …]</p><ul><li>说明：用于订阅给定的一个或多个频道的信息</li><li>参数：channel(给定的频道名)</li><li>返回：接收到的信息</li></ul><p>UNSUBSCRIBE channel [channel1 …]</p><ul><li>说明：用于退订给定的一个或多个频道的信息</li><li>参数：channel(给定的频道名)</li><li>返回：这个命令在不同的客户端中有不同的表现</li></ul><p>PUBLISH channel message</p><ul><li>说明：用于将信息发送到指定的频道</li><li>参数：channel(频道名称)，message(将要发送的信息)</li><li>返回：接收到此消息的订阅者数量</li></ul><p>PUBSUB  &lt; subcommand &gt; argument [argument1 ….]</p><ul><li>说明：用于查看订阅与发布系统状态，它由数个不同格式的子命令组成</li><li>参数：subcommand(子命令)，argument(子命令参数)</li><li>返回：由活跃频道组成的列表</li><li>子命令如下</li></ul><table><thead><tr><th>subcommand</th><th>argument</th><th>说明</th></tr></thead><tbody><tr><td>CHANNELS</td><td>[pattern]</td><td>返回指定模式pattern的活跃的频道,指定返回由SUBSCRIBE订阅的频道</td></tr><tr><td>NUMSUB</td><td>channel channel2 …</td><td>返回指定频道的订阅数量</td></tr><tr><td>NUMPAT</td><td></td><td>返回订阅模式的数量，注意：这个命令返回的不是订阅模式的客户端的数量， 而是客户端订阅的所有模式的数量总和</td></tr></tbody></table><blockquote><p>举个栗子<span class="github-emoji"><span>🍎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p>在连接2中我们发布消息</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803165009.png"></p><p>在连接1中接受订阅</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803165057.png"></p><blockquote><p>应用</p></blockquote><p>如微信公众号，好友动态，时事消息系统，实时聊天室，订阅关注…</p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主从复制，是指将一台Redis服务器上的数据，复制到其他redis服务器上，前者为master主节点，后者为follower从节点，数据复制是单向的，只能从主节点到从节点，master以写操作为主，从节点以读为主。</p><p><strong>主从复制的作用</strong></p><ol><li><p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p></li><li><p>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p></li><li><p>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p></li><li><p>读写分离：可以用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量；</p></li><li><p>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p></li></ol><p><strong>从节点开启主从复制，有3种方式：</strong></p><ol><li><p>配置文件： 在从服务器的配置文件中加入：slaveof <masterip> <masterport></masterport></masterip></p></li><li><p>启动命令： redis-server启动命令后加入 –slaveof <masterip> <masterport></masterport></masterip></p></li><li><p>客户端命令： Redis服务器启动后，直接通过客户端执行命令：slaveof <masterip>  <masterport>，则该Redis实例成为从节点。</masterport></masterip></p></li></ol><p><img src="https://gitee.com/rain-sky/images/raw/master/20210803213647.jpeg"></p><p>每台redis服务器都是主节点，但每一个从节点只能有一个主节点</p><blockquote><p>仅仅使用单台redis服务器会造成的问题</p><p>1，从结构上来说，容易造成单点故障并且请求压力大</p><p>2，从容量上来说，单个redis服务器内存容量有限，通常来说，单台redis最大使用内存不应该超过20G</p></blockquote><p><strong>相关指令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info repication <span class="comment">#查看当前库的信息</span></span><br></pre></td></tr></tbody></table></figure><p><strong>配置主从复制环境</strong></p><p>我们可以使用多台物理机来当作从服务器，当然我们学习阶段可以使用虚拟机软件安装多个系统当作从节点，还有一个办法就是在同一个系统中，配置多份配置文件，通过不同的配置文件启动不同的几个redis数据库，在同一个操作系统下搭建集群环境。</p><p>例如主节点通过配置文件master.conf启动</p><p>复制配置文件，复制三分，两份为从节点，一分为主节点，修改配置文件名称分别为：</p><p>redis6380.conf     redis6381.conf    master.conf 表示在另外三个端口监听请求</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804092337.png"></p><p><em>同时我们需要修改这三份配置文件内部的rdb文件名避免重复，还有pid文件，logfile文件，最重要的这三份配置文件的监听端口分别修改为6380，6381，6379</em></p><p><span class="github-emoji"><span>🐥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>最后可以查看以下redis服务，可以看到开启了三个，分别在不同的端口</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804094454.png"></p><p> 采用命令暂时配置主从关系：</p><p>例如我们在6380与6381端口处redis服务下执行 <strong>slaveof 127.0.0.1 6379</strong> 则等同于为这两个redis服务配置主机，再去6379处查看一下，可以看到两台从机</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804104008.png"></p><p>修改配置永久配置主从关系：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804094851.png"></p><p><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>到此主从复制基本环境配置完成</p><blockquote><p>主从复制细节</p></blockquote><p>主机能读能写，从机将不能写，如在从机上执行set name rain会失败</p><p>主机写完后从机将会自动同步主机内容，如主机6379 设置了一个值 set name rain 那么从机6380，6381可以get name 得到name的值。</p><p>主机断开了连接从机依然能够独立完成读操作请求。</p><p>如果是配置暂时性主从关系，从机重启后会失去主从关系，无法同步主机数据，需要重新配置，一般生产环境中都配置永久性主从关系。</p><blockquote><p>复制原理</p></blockquote><p>主从复制过程大体可以分为3个阶段：连接建立阶段（即准备阶段）、数据同步阶段、命令传播阶段。</p><p><strong>全量同步</strong><br>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下：<br>- 从服务器连接主服务器，发送SYNC命令；<br>- 主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；<br>- 主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；<br>- 从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；<br>- 主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；<br>- 从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p><p><strong>增量同步</strong><br>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。<br>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p><p><strong>Redis主从同步策略</strong><br>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p><blockquote><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 宕机后主动配置主机，非哨兵模式</p></blockquote><p> <img src="https://gitee.com/rain-sky/images/raw/master/20210804111419.png"></p><p>假设此处主节点宕机了，那么从节点1仍然是从节点点，无法完成写操作，那么怎么重新选举他为主节点，在从节点1使用命令slaveof no one将自己配置为主节点，从节点1可以写操作，从节点1的从节点依然从他处同步数据但只能读，重启主节点后，主节点的从节点就只有从节点2了。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><span class="github-emoji"><span>⚔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2694.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>自动谋权篡位</p><p>Redis 的 Sentinel （redis-sentinel程序）系统用于管理多个 Redis 服务器（instance）， 该系统执行以下三个任务：</p><ul><li><strong>监控（Monitoring</strong>）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li><li><strong>提醒（Notification）</strong>： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li><li><strong>自动故障迁移（Automatic failover）</strong>： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</li></ul><p>哨兵模式中哨兵是一个独立的进程，其原理是通过哨兵向节点发送命令等待redis服务器响应来监控节点状态。</p><p>哨兵的作用：</p><ul><li>发送命令监测节点响应从而监控服务器运行状态</li><li>监测到master宕机，自动将slave切换成master，然后通过发布订阅模式通知其余服务器修改配置文件切换主机。</li></ul><blockquote><p>单哨兵</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804114247.webp"></p><p>如果哨兵进程出现了问题，那么哨兵模式将会崩坏，为此单个哨兵是不合适的。</p><blockquote><p>多哨兵</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804114339.webp"></p><p>用文字描述一下<strong>故障切换（failover）</strong>的过程。假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p><h3 id="redis配置哨兵模式"><a href="#redis配置哨兵模式" class="headerlink" title="redis配置哨兵模式"></a>redis配置哨兵模式</h3><p>先搭建一个链式主从配置</p><p>6379(master)-&gt;6380(slave)-&gt;6381(slave)</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804115619.png"></p><p><strong>哨兵模式配置文件</strong></p><p>例如在usr/local/bin/myconfig/目录下创建一个sentinel.cof文件</p><p>核心配置，配置远不止此</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor master 127.0.0.1 6379 1</span><br></pre></td></tr></tbody></table></figure><p>monitor: 监控    master: 被监控的节点名称   host  port  1代表主机挂了后从机投票选举新主机</p><p>启动哨兵</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel usr/<span class="built_in">local</span>/bin/myconfig/sentinel.conf</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804122903.png"></p><p>可以看到我们的master与他的slave信息，现在我们尝试关闭master，可以看到哨兵控制台输出</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804124954.png"></p><p>查看6380处信息，可以看到6380通过一个投票算法被选举为新的master</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210804125048.png"></p><p>当主机恢复后将作为6380的从机</p><blockquote><p>小结</p></blockquote><p>有点：</p><p>1，哨兵集群，基于主从复制模式，拥有所有主从配置有点</p><p>2，主从可以切换，故障转移系统可用性更好</p><p>3，主动完成</p><p>缺点：</p><p>1，redis不适合在线扩容，集群容量一旦达到上线，在线扩容就是问题</p><p>2，实现哨兵模式配置麻烦</p><p>配置文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 26379 <span class="comment">#配置端口，如果有哨兵集群</span></span><br><span class="line">dir /tmp <span class="comment">#工作目录</span></span><br><span class="line">sentinel down-after-milliseconfs mater <span class="comment">#指定多少时间主节点未应答哨兵认为主节点下线</span></span><br></pre></td></tr></tbody></table></figure><h2 id="缓存穿透与雪崩"><a href="#缓存穿透与雪崩" class="headerlink" title="缓存穿透与雪崩"></a>缓存穿透与雪崩</h2><blockquote><p>缓存穿透</p></blockquote><p>描述：访问一个缓存和数据库都不存在的 key，此时会直接打到数据库上，并且查不到数据，没法写缓存，所以下一次同样会打到数据库上。</p><p>此时，缓存起不到作用，请求每次都会走到数据库，流量大时数据库可能会被打挂。此时缓存就好像被“穿透”了一样，起不到任何作用。</p><p>1、<strong>接口校验。</strong>在正常业务流程中可能会存在少量访问不存在 key 的情况，但是一般不会出现大量的情况，所以这种场景最大的可能性是遭受了非法攻击。可以在最外层先做一层校验：用户鉴权、数据合法性校验等，例如商品查询中，商品的ID是正整数，则可以直接对非正整数直接过滤等等。</p><p>2、<strong>缓存空值</strong>。当访问缓存和DB都没有查询到值时，可以将空值写进缓存，但是设置较短的过期时间，该时间需要根据产品业务特性来设置。</p><p>3、<strong>布隆过滤器</strong>。使用布隆过滤器存储所有可能访问的 key，不存在的 key 直接被过滤，存在的 key 则再进一步查询缓存和数据库。</p><blockquote><p>缓存击穿</p></blockquote><p>描述：某一个热点 key，在缓存过期的一瞬间，同时有大量的请求打进来，由于此时缓存过期了，所以请求最终都会走到数据库，造成瞬时数据库请求量大、压力骤增，甚至可能打垮数据库。</p><p>解决方案：</p><p>1、<strong>加互斥锁</strong>。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。</p><p>关于互斥锁的选择，网上看到的大部分文章都是选择 Redis 分布式锁，因为这个可以保证只有一个请求会走到数据库，这是一种思路。</p><p>但是其实仔细想想的话，这边其实没有必要保证只有一个请求走到数据库，只要保证走到数据库的请求能大大降低即可，所以还有另一个思路是 JVM 锁。</p><p>JVM 锁保证了在单台服务器上只有一个请求走到数据库，通常来说已经足够保证数据库的压力大大降低，同时在性能上比分布式锁更好。</p><p>需要注意的是，无论是使用“分布式锁”，还是“JVM 锁”，加锁时要按 key 维度去加锁。</p><p>我看网上很多文章都是使用一个“固定的 key”加锁，这样会导致不同的 key 之间也会互相阻塞，造成性能严重损耗。</p><p>使用 redis 分布式锁的伪代码，仅供参考：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    Object value = redis.get(key);</span><br><span class="line">    <span class="comment">// 缓存值过期</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// lockRedis：专门用于加锁的redis；</span></span><br><span class="line">        <span class="comment">// "empty"：加锁的值随便设置都可以</span></span><br><span class="line">        <span class="keyword">if</span> (lockRedis.set(key, <span class="string">"empty"</span>, <span class="string">"PX"</span>, lockExpire, <span class="string">"NX"</span>)) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 查询数据库，并写到缓存，让其他线程可以直接走缓存</span></span><br><span class="line">                value = getDataFromDb(key);</span><br><span class="line">                redis.set(key, value, <span class="string">"PX"</span>, expire);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                <span class="comment">// 异常处理</span></span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                lockRedis.delete(key);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// sleep50ms后，进行重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> getData(key);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、<strong>热点数据不过期</strong>。直接将缓存设置为不过期，然后由定时任务去异步加载数据，更新缓存。</p><p>这种方式适用于比较极端的场景，例如流量特别特别大的场景，使用时需要考虑业务能接受数据不一致的时间，还有就是异常情况的处理，不要到时候缓存刷新不上，一直是脏数据，那就凉了。</p><blockquote><p>缓存雪崩</p></blockquote><p>描述：大量的热点 key 设置了相同的过期时间，导在缓存在同一时刻全部失效，造成瞬时数据库请求量大、压力骤增，引起雪崩，甚至导致数据库被打挂。</p><p>缓存雪崩其实有点像“升级版的缓存击穿”，缓存击穿是一个热点 key，缓存雪崩是一组热点 key。</p><p>解决方案：</p><p>1、<strong>过期时间打散</strong>。既然是大量缓存集中失效，那最容易想到就是让他们不集中生效。可以给缓存的过期时间时加上一个随机值时间，使得每个 key 的过期时间分布开来，不会集中在同一时刻失效。</p><p>2、<strong>热点数据不过期</strong>。该方式和缓存击穿一样，也是要着重考虑刷新的时间间隔和数据异常如何处理的情况。</p><p>3、<strong>加互斥锁</strong>。该方式和缓存击穿一样，按 key 维度加锁，对于同一个 key，只允许一个线程去计算，其他线程原地阻塞等待第一个线程的计算结果，然后直接走缓存即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>redis基础</p></blockquote><ol><li><p>redis是什么</p><ul><li>一种key-value型nosql内存数据库</li></ul></li><li><p>redis基本数据类型</p><ul><li>String</li><li>List</li><li>Set</li><li>Hash</li><li>Zset</li></ul></li><li><p>redis三种特殊类型</p><ul><li>geospatial</li><li>Hyperlog</li><li>Bitmaps</li></ul></li><li><p>redis事务</p><ul><li><p>redis事务开启，终止各种情况</p></li><li><p>redis事务不保证原子性</p></li><li><p>不支持回滚，为什么？</p></li></ul></li><li><p>redis持久化</p><ul><li>RDB方式</li><li>AOF方式</li><li>两种持久化的原理，过程</li><li>两种方式的优缺点</li></ul></li><li><p>redis发布订阅</p></li><li><p>redis主从复制</p><ul><li>主从复制环境搭建</li><li>配置主从关系</li><li>主从复制原理</li></ul></li><li><p>redis哨兵模式</p><ul><li>选举流程</li></ul></li><li><p>redis缓存</p><ul><li>穿透</li><li>击穿</li><li>雪崩</li><li>各种问题的解决方案</li></ul></li><li><p>redis分布式锁</p></li></ol><blockquote><p>问题</p></blockquote><p><strong>Redis</strong></p><ul><li>项目中使用的 Redis 版本</li><li>Redis 在项目中的使用场景</li><li>Redis 怎么保证高可用</li><li>Redis 的选举流程</li><li>Redis 和 Memcache 的区别</li><li>Redis 的集群模式</li><li>Redis 集群要增加分片，槽的迁移怎么保证无损</li><li>Redis 分布式锁的实现</li><li>Redis 删除过期键的策略</li><li>Redis 的内存淘汰策略</li><li>Redis 的 Hash 对象底层结构</li><li>Redis 中 Hash 对象的扩容流程</li><li>Redis 的 Hash 对象的扩容流程在数据量大的时候会有什么问题吗</li><li>Redis 的持久化机制有哪几种</li><li>RDB 和 AOF 的实现原理、优缺点</li><li>AOF 重写的过程</li><li>哨兵模式的原理</li><li>使用缓存时，先操作数据库还是先操作缓存</li><li>为什么是让缓存失效，而不是更新缓存</li><li>缓存穿透、缓存击穿、缓存雪崩</li><li>更新缓存的几种设计模式</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么使用noSql&quot;&gt;&lt;a href=&quot;#为什么使用noSql&quot; class=&quot;headerlink&quot; title=&quot;为什么使用noSql&quot;&gt;&lt;/a&gt;为什么使用noSql&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;noSql，不仅仅是sql&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://rain-sky.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="redis" scheme="https://rain-sky.github.io/tags/redis/"/>
    
    <category term="noSql" scheme="https://rain-sky.github.io/tags/noSql/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="https://rain-sky.github.io/2021/07/22/springboot/"/>
    <id>https://rain-sky.github.io/2021/07/22/springboot/</id>
    <published>2021-07-22T10:58:52.000Z</published>
    <updated>2021-08-07T07:44:15.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springboot的特性"><a href="#springboot的特性" class="headerlink" title="springboot的特性"></a>springboot的特性</h2><h4 id="1-依赖管理"><a href="#1-依赖管理" class="headerlink" title="1 依赖管理"></a>1 依赖管理</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">上面项目的父项目如下：</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>开发导入starter场景启动器</strong></p><blockquote><p>所谓启动器就是一组应用依赖集</p></blockquote><p>见到很多 spring-boot-starter-* ： *就某种场景<br>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入<br>更多SpringBoot所有支持的场景<br>自定义启动器，见到的 *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。<br>所有场景启动器最底层的依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>无需关注版本号，自动版本仲裁</strong></p><ol><li>引入依赖默认都可以不写版本</li><li>引入非版本仲裁的jar，要写版本号。</li></ol><p><strong>自定义修改依赖版本号</strong></p><p>1.查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</p><p>2.在当前项目里面重写配置，如下面的代码。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>ctrl + shift + alt + U：以图的方式显示项目中依赖之间的关系</p></blockquote><h4 id="2-自动配置"><a href="#2-自动配置" class="headerlink" title="2 自动配置"></a>2 自动配置</h4><p><strong>自动配好Tomcat</strong><br>引入Tomcat依赖。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>自动配好SpringMVC</strong></p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li><li>自动配好Web常见功能，如：字符编码问题</li></ul><p><strong>默认的包结构</strong><br>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来<br>无需以前的包扫描配置<br>想要改变扫描路径：</p><ul><li>@SpringBootApplication(scanBasePackages=“com.lun”)</li><li>@ComponentScan 指定扫描路径</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=“com.lun”)</span></span><br><span class="line"><span class="meta">@ComponentScan</span> 指定扫描路径</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan("com.lun")</span></span><br></pre></td></tr></tbody></table></figure><p><strong>各种配置拥有默认值</strong></p><ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul><p><strong>按需加载所有自动配置项</strong></p><ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul><h2 id="注解分析"><a href="#注解分析" class="headerlink" title="注解分析"></a>注解分析</h2><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法（springboot2相对于1的新增）</span></span><br><span class="line"><span class="comment"> *      Full模式(proxyBeanMethods = true)（保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的）（默认）</span></span><br><span class="line"><span class="comment"> *      Lite模式(proxyBeanMethods = false)（每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        user.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义组件名“tom”</span></span><br><span class="line">    <span class="meta">@Bean("tom")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan("com.atguigu.boot")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) {</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、从容器中获取组件</span></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line">        System.out.println(<span class="string">"组件："</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">"user01"</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">"tom"</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户的宠物："</span>+(user01.getPet() == tom));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>最佳实战</p><ul><li>配置 类组件之间<strong>无依赖关系</strong>用Lite模式加速容器启动过程，减少判断</li><li>配置 类组件之间<strong>有依赖关系</strong>，方法会被调用得到之前单实例组件，用Full模式（默认）</li></ul><blockquote><p>如果是full模式，每次对代理对象方法的掉用都要去检查方法返回类型是否已经在容器中存在</p></blockquote></li></ul><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import({User.class, DBHelper.class})</span> <span class="comment">//给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><blockquote><p>条件装配注解</p></blockquote><p><strong>可选项</strong></p><p><a href="https://gitee.com/rain-sky/images/raw/master/20210715103437.png"><img src="https://gitee.com/rain-sky/images/raw/master/20210715103437.png" alt="img"></a></p><p><strong>举例</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = "tom")</span><span class="comment">//只有当容器中存在名称为tom的组件时，才注册user01组件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>{</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">18</span>);</span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Bean("tom")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">"tomcat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>@ImportResource</p><blockquote><p>配置资源导入</p></blockquote><p><strong>使用方式</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource("classpath:beans.xml")</span><span class="comment">//在任意配置类上一次编写即可</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="ConfigurationProperties-配置绑定"><a href="#ConfigurationProperties-配置绑定" class="headerlink" title="@ConfigurationProperties 配置绑定"></a>@ConfigurationProperties 配置绑定</h4><p><strong>将配置文件绑定到JavaBean</strong></p><p>传统方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>{</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>{</span><br><span class="line">         Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">         pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">"a.properties"</span>));</span><br><span class="line">         Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) {</span><br><span class="line">             String strKey = (String) enum1.nextElement();</span><br><span class="line">             String strValue = pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">"="</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>springBoot的配置绑定：</p><p><strong>方法一@ConfigurationProperties + @Component</strong></p><p><a href="https://www.jianshu.com/p/7f54da1cb2eb">关于该注解的文章</a></p><blockquote><p>@EnableConfigurationProperties注解的作用是：使使用 @ConfigurationProperties 注解的类生效。</p><p>如果一个配置类只配置@ConfigurationProperties注解，而没有使用@Component，那么在IOC容器中是获取不到properties 配置文件转化的bean。说白了 @EnableConfigurationProperties 相当于把使用  @ConfigurationProperties 的类进行了一次注入。</p></blockquote><p>假设有配置文件application.properties</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mycar.brand</span>=<span class="string">BYD</span></span><br><span class="line"><span class="meta">mycar.price</span>=<span class="string">100000</span></span><br></pre></td></tr></tbody></table></figure><p><strong>使用</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "mycar")</span><span class="comment">//prefix，配置文件匹配的前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> String brand;</span><br><span class="line">        <span class="keyword">private</span> Integer price ;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">        }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>方法二</strong></p><p>@EnableConfigurationProperties + @ConfigurationProperties</p><ul><li>开启Car配置绑定功能</li><li>把这个Car这个组件自动注册到容器中</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span> <span class="comment">//向容器注入Car这个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line">...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "mycar")</span> <span class="comment">//声明这是一个配置类并绑定到前缀为mycar的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自动配置原理探究"><a href="#自动配置原理探究" class="headerlink" title="自动配置原理探究"></a>自动配置原理探究</h2><h4 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h4><p><strong>主程序入口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>@SpringBootApplication</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = {@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = {TypeExcludeFilter.class}</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = {AutoConfigurationExcludeFilter.class}</span></span><br><span class="line"><span class="meta">)}</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication {</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>可知@springBootApplication 是以下三个注解的合成注解</p><p>@SpringBootConfiguration 由源码可知此注解表明该类为一个配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration {</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>@ComponentScan 扫描</p><p>@EnableAutoConfiguration</p></blockquote><p><strong>@EnableAutoConfiguration探究</strong></p><p><strong>源码，可知该注解也是一个合成注解</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.TYPE})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import({AutoConfigurationImportSelector.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration {</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> {};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>让我们来看看@AutoConfigurationPackage是个啥</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage {</span><br><span class="line"></span><br><span class="line">String[] basePackages() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由源码可以看到，该注解使用@Import(AutoConfigurationPackages.Registrar.class)导入了一个Registrar.class组件,点进去康康</p><p><strong>Registrar它干了啥？</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>{</span><br><span class="line">register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImports(metadata));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>打个断点看一看</p></blockquote><p><a href="https://gitee.com/rain-sky/images/raw/master/20210715113622.png"><img src="https://gitee.com/rain-sky/images/raw/master/20210715113622.png" alt="img"></a></p><blockquote><p>我们可以看到注解信息中表示该注解位置为主启动类，根据方法大概猜测：拿到一个包名，然后将该包下组件批量注册，让我们计算试一试，看看结果</p></blockquote><p><a href="https://gitee.com/rain-sky/images/raw/master/20210715113944.png"><img src="https://gitee.com/rain-sky/images/raw/master/20210715113944.png" alt="img"></a></p><p>可以看到计算结果就是我们主启动类所在包</p><ul><li>利用Registrar给容器中导入一系列组件</li><li>将指定的一个包下的所有组件导入进MainApplication所在包下。</li></ul><p><strong>@Import(AutoConfigurationImportSelector.class)</strong></p><ul><li>利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</li><li>调用List<string> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</string></li><li>利用工厂加载 Map&lt;String, List<string>&gt; loadSpringFactories(@Nullable ClassLoader classLoader);得到所有的组件</string></li><li>从META-INF/spring.factories位置来加载一个文件。<ul><li>默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</li><li>spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories</li></ul></li></ul><p><strong>一些实践</strong></p><p>使用dev-tools</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Web场景"><a href="#Web场景" class="headerlink" title="Web场景"></a>Web场景</h2><h4 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h4><p>基本语法</p><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li></ul><p>数据类型</p><ul><li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"><span class="attr">k:</span> {<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>}</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></tbody></table></figure><p><strong>实例</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">    <span class="keyword">private</span> String[] interests;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> {<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>}</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">tom</span>}</span><br><span class="line">      <span class="bullet">-</span> {<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>}</span><br><span class="line">    <span class="attr">health:</span> [{<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>}]</span><br></pre></td></tr></tbody></table></figure><h4 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h4><p>自定义的类和配置文件绑定一般没有提示。若要提示，添加如下依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="静态资源规则与定制化"><a href="#静态资源规则与定制化" class="headerlink" title="静态资源规则与定制化"></a>静态资源规则与定制化</h4><p>只要静态资源放在类路径下： /static (or /public or /resources or /META-INF/resources</p><p>访问 ： 当前项目根路径/ + 静态资源名</p><p>原理： 静态映射/**。</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面。<br><strong>改变默认的静态资源路径</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>添加访问前缀</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></tbody></table></figure><h4 id="welcome与favicon功能"><a href="#welcome与favicon功能" class="headerlink" title="welcome与favicon功能"></a>welcome与favicon功能</h4><p><strong>欢迎页支持</strong></p><ul><li>静态资源路径下 index.html。<ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>自定义Favicon</strong></p><p>favicon.ico 放在静态资源目录下即可。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></span><br></pre></td></tr></tbody></table></figure><h4 id="静态资源访问原理"><a href="#静态资源访问原理" class="headerlink" title="静态资源访问原理"></a>静态资源访问原理</h4><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code>，生效</li></ul><p><strong>WebMvcAutoConfiguration</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>给容器中配了什么。</li></ul><p><strong>WebMvcAutoConfiguration的静态内部类WebMvcAutoConfigurationAdapter</strong></p><p>配置文件的相关属性的绑定：WebMvcProperties==<strong>spring.mvc</strong>、ResourceProperties==<strong>spring.resources</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//构造函数，当只有一个有参构造函数时，所有参数从IOC容器找</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">org.springframework.boot.autoconfigure.web.ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">WebProperties webProperties, WebMvcProperties mvcProperties, ListableBeanFactory beanFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties.hasBeenCustomized() ? resourceProperties</span><br><span class="line">: webProperties.getResources();</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">}    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数解释：</p><ul><li>ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory Spring的beanFactory</li><li>HttpMessageConverters 找到所有的HttpMessageConverters</li><li>ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。</li><li>DispatcherServletPath</li><li>ServletRegistrationBean 给应用注册Servlet、Filter…</li></ul><h4 id="资源默认处理规则"><a href="#资源默认处理规则" class="headerlink" title="资源默认处理规则"></a>资源默认处理规则</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>{</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) {</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">ServletContext servletContext = getServletContext();</span><br><span class="line">addResourceHandler(registry, <span class="string">"/webjars/**"</span>, <span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; {</span><br><span class="line">registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line"><span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) {</span><br><span class="line">registration.addResourceLocations(<span class="keyword">new</span> ServletContextResource(servletContext, SERVLET_LOCATION));</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>静态资源规则</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = { <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">            <span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> };</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment">     * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置处理规则</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></tbody></table></figure><p><strong>欢迎页处理规则</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>{</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>{</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>{</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>看看WelcomePageHandlerMapping</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) {</span><br><span class="line">    <span class="keyword">if</span> (welcomePage != <span class="keyword">null</span> &amp;&amp; <span class="string">"/**"</span>.equals(staticPathPattern)) {</span><br><span class="line">        <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">        logger.info(<span class="string">"Adding welcome page: "</span> + welcomePage);</span><br><span class="line">        setRootViewName(<span class="string">"forward:index.html"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {</span><br><span class="line">        <span class="comment">//调用Controller /index</span></span><br><span class="line">        logger.info(<span class="string">"Adding welcome page template: index"</span>);</span><br><span class="line">        setRootViewName(<span class="string">"index"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h4><p>@xxxMapping;</p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping<br>Rest风格支持（使用HTTP请求方式动词来表示对资源的操作）</li></ul><p>核心Filter：HiddenHttpMethodFilter</p><ul><li><strong>用法</strong><ul><li>开启页面表单的Rest功能</li><li>页面 form的属性method=post，隐藏域 _method=put、delete等（如果直接get或post，无需隐藏域）</li><li>编写请求映射</li></ul></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></tbody></table></figure><p><strong>实例</strong></p><p>页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"REST-GET提交"</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"REST-POST提交"</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"REST-DELETE 提交"</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"PUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"REST-PUT提交"</span><span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>后台</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/user")</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"GET-张三"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping("/user")</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"POST-张三"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping("/user")</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"PUT-张三"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping("/user")</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = "/user",method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"DELETE-张三"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Rest原理（表单提交要使用REST的时候)</strong><br>表单提交会带上_method=PUT<br>请求过来被HiddenHttpMethodFilter拦截<br>请求是否正常，并且是POST<br>获取到_method的值。<br>兼容以下请求；PUT.DELETE.PATCH<br>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。<br>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。<br><strong>HiddenHttpMethodFilter</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiddenHttpMethodFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ALLOWED_METHODS =</span><br><span class="line">Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),</span><br><span class="line">HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Default method parameter: {<span class="doctag">@code</span> _method}. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_METHOD_PARAM = <span class="string">"_method"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String methodParam = DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the parameter name to look for HTTP methods.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #DEFAULT_METHOD_PARAM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMethodParam</span><span class="params">(String methodParam)</span> </span>{</span><br><span class="line">Assert.hasText(methodParam, <span class="string">"'methodParam' must not be empty"</span>);</span><br><span class="line"><span class="keyword">this</span>.methodParam = methodParam;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>{</span><br><span class="line"></span><br><span class="line">HttpServletRequest requestToUse = request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"POST"</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) {</span><br><span class="line">String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(paramValue)) {</span><br><span class="line">String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line"><span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) {</span><br><span class="line">requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">filterChain.doFilter(requestToUse, response);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple {<span class="doctag">@link</span> HttpServletRequest} wrapper that returns the supplied method for</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@link</span> HttpServletRequest#getMethod()}.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line"><span class="keyword">this</span>.method = method;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.method;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h4><p><img src="https://gitee.com/rain-sky/images/raw/master/20210716161538.png"></p><p>SpringMVC功能分析都从 <code>org.springframework.web.servlet.DispatcherServlet</code> -&gt; <code>doDispatch()</code>开始</p><p><strong>doDispatch</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>getHandler(processedRequest)</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) {</span><br><span class="line">            HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>this.handlerMappings</code>在Debug模式下展现的内容：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210717095547.png"></p><p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181662070-9e526de8-fd78-4a02-9410-728f059d6aef.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10"></p><p>所有的请求映射都在HandlerMapping中：</p><ul><li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</p></li><li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p></li><li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p><ul><li>如果有就找到这个请求对应的handler</li><li>如果没有就是下一个 HandlerMapping</li></ul></li></ul><blockquote><p>IDEA快捷键：</p></blockquote><ul><li>Ctrl + Alt + U : 以UML的类图展现类有哪些继承类，派生类以及实现哪些接口。</li><li>Crtl + Alt + Shift + U : 同上，区别在于上条快捷键结果在新页展现，而本条快捷键结果在弹窗展现。</li><li>Ctrl + H : 以树形方式展现类层次结构图。</li></ul><h4 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h4><p>@PathVariable 路径变量<br>@RequestHeader 获取请求头<br>@RequestParam 获取请求参数（指问号后的参数，url?a=1&amp;b=2）<br>@CookieValue 获取Cookie值<br>@RequestAttribute 获取request域属性<br>@RequestBody 获取请求体[POST]<br>@MatrixVariable 矩阵变量<br>@ModelAttribute</p><hr><p><strong>实例</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping("/car/{id}/owner/{username}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //获取路径变量</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable("username")</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //将路径变量封装为Map</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //获取请求头</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader("User-Agent")</span> String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //获取请求域参数</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam("age")</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam("inters")</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //封装请求域参数为一个Map</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     //获取cookie</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue("_ga")</span> String _ga,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue("_ga")</span> Cookie cookie)</span></span>{</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//        map.put("id",id);</span></span><br><span class="line"><span class="comment">//        map.put("name",name);</span></span><br><span class="line"><span class="comment">//        map.put("pv",pv);</span></span><br><span class="line"><span class="comment">//        map.put("userAgent",userAgent);</span></span><br><span class="line"><span class="comment">//        map.put("headers",header);</span></span><br><span class="line">        map.put(<span class="string">"age"</span>,age);</span><br><span class="line">        map.put(<span class="string">"inters"</span>,inters);</span><br><span class="line">        map.put(<span class="string">"params"</span>,params);</span><br><span class="line">        map.put(<span class="string">"_ga"</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">"===&gt;"</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/save")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>{</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"content"</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>@RequestAttribute</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/goto")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goToPage</span><span class="params">(HttpServletRequest request)</span></span>{</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"成功了..."</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/success"</span>;  <span class="comment">//转发到  /success请求</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">///&lt;-----------------主角@RequestAttribute在这个方法</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping("/success")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(value = "msg",required = false)</span> String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="meta">@RequestAttribute(value = "code",required = false)</span>Integer code,</span></span></span><br><span class="line"><span class="function"><span class="params">                       HttpServletRequest request)</span></span>{</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"reqMethod_msg"</span>,msg);</span><br><span class="line">        map.put(<span class="string">"annotation_msg"</span>,code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h4><p>复杂参数：</p><p>Map</p><p>Model（map、model里面的数据会被放在request的请求域 request.setAttribute）</p><p>Errors/BindingResult</p><p>RedirectAttributes（ 重定向携带数据）</p><p>ServletResponse（response）</p><p>SessionStatus</p><p>UriComponentsBuilder</p><p>ServletUriComponentsBuilder</p><p><strong>实例</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/params")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(Map&lt;String,Object&gt; map,</span></span></span><br><span class="line"><span class="function"><span class="params">                        Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response)</span></span>{</span><br><span class="line">    <span class="comment">//下面三位都是可以给request域中放数据</span></span><br><span class="line">    map.put(<span class="string">"hello"</span>,<span class="string">"world666"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"world"</span>,<span class="string">"hello666"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"message"</span>,<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"c1"</span>,<span class="string">"v1"</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/success"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping("/success")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">success</span><span class="params">(<span class="meta">@RequestAttribute(value = "msg",required = false)</span> String msg,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="meta">@RequestAttribute(value = "code",required = false)</span>Integer code,</span></span></span><br><span class="line"><span class="function"><span class="params">                   HttpServletRequest request)</span></span>{</span><br><span class="line">    Object msg1 = request.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Object hello = request.getAttribute(<span class="string">"hello"</span>);<span class="comment">//得出testParam方法赋予的值 world666</span></span><br><span class="line">    Object world = request.getAttribute(<span class="string">"world"</span>);<span class="comment">//得出testParam方法赋予的值 hello666</span></span><br><span class="line">    Object message = request.getAttribute(<span class="string">"message"</span>);<span class="comment">//得出testParam方法赋予的值 HelloWorld</span></span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"reqMethod_msg"</span>,msg1);</span><br><span class="line">    map.put(<span class="string">"annotation_msg"</span>,msg);</span><br><span class="line">    map.put(<span class="string">"hello"</span>,hello);</span><br><span class="line">    map.put(<span class="string">"world"</span>,world);</span><br><span class="line">    map.put(<span class="string">"message"</span>,message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>Map&lt;String,Object&gt; map</code></li><li><code>Model model</code></li><li><code>HttpServletRequest request</code></li></ul><p>在conroller方法返回结果之前，处理返回结果中会将model，map中的数据并入请求域</p><p>上面三位都是可以给request域中放数据，用<code>request.getAttribute()</code>获取</p><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><p><strong>开启浏览器请求内容协商</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span>  <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></tbody></table></figure><p>……</p><h4 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h4><p><a href="https://www.thymeleaf.org/documentation.html">官方文档</a></p><p>引入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>自动配置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ TemplateMode.class, SpringTemplateEngine.class })</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">public</span> <span class="string">static final String DEFAULT_PREFIX = "classpath:/templates/";//模板放置处</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String DEFAULT_SUFFIX = ".html";//文件的后缀名</span></span><br></pre></td></tr></tbody></table></figure><p><strong>表达式语法</strong></p><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td>链接</td><td>@{…}</td><td>生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><p><strong>字面量</strong></p><ul><li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li><li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li><li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li><li>空值: <strong>null</strong></li><li>变量： one，two，… 变量不能有空格</li></ul><p><strong>文本操作</strong></p><ul><li>字符串拼接: +</li><li>变量替换: |The name is ${name}|</li></ul><p><strong>数学运算</strong></p><ul><li>运算符: + , - , * , / , %</li></ul><p><strong>布尔运算</strong></p><ul><li>运算符: and , or</li><li>一元运算: ! , not</li></ul><p><strong>比较运算</strong></p><ul><li>比较: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</li><li>等式: == , != ( eq , ne )</li></ul><p><strong>条件运算</strong></p><ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else)</li></ul><p><strong>设置属性值-th:attr</strong></p><p>单个值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:attr</span>=<span class="string">"action=@{/subscribe}"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:attr</span>=<span class="string">"value=#{subscribe.submit}"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 替代写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe!"</span> <span class="attr">th:value</span>=<span class="string">"${subscribe.submit}"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>多个值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span>  </span></span><br><span class="line"><span class="tag">     <span class="attr">th:attr</span>=<span class="string">"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>迭代</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : ${prods}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.name}"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.price}"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.inStock}? #{true} : #{false}"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod,iterStat : ${prods}"</span> <span class="attr">th:class</span>=<span class="string">"${iterStat.odd}? 'odd'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.name}"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.price}"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"${prod.inStock}? #{true} : #{false}"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>条件运算</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:href</span>=<span class="string">"@{/product/comments(prodId=${prod.id})}"</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:if</span>=<span class="string">"${not #lists.isEmpty(prod.comments)}"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"${user.role}"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#{roles.manager}"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h4><p>视图解析原理流程：</p><ul><li>目标方法处理的过程中（阅读DispatcherServlet源码），所有数据都会被放在 ModelAndViewContainer 里面，其中包括数据和视图地址。</li><li>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 ModelAndViewContainer 。<br>任何目标方法执行完成以后都会返回ModelAndView（数据和视图地址）。</li><li>processDispatchResult()处理派发结果（页面改如何响应）<ul><li>render(mv, request, response); 进行页面渲染逻辑<ul><li>根据方法的String返回值得到 View 对象【定义了页面的渲染逻辑】<ul><li>所有的视图解析器尝试是否能根据当前返回值得到View对象</li><li>得到了 redirect:/main.html –&gt; Thymeleaf new RedirectView()。</li><li>ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li><li>view.render(mv.getModelInternal(), request, response); 视图对象调用自定义的render进行页面渲染工作。<ul><li>RedirectView 如何渲染【重定向到一个页面】</li><li>获取目标url地址</li><li>response.sendRedirect(encodedURL);</li></ul></li></ul></li></ul></li></ul></li></ul><p><strong>视图解析：</strong></p><ul><li><p><strong>返回值以 forward: 开始： new InternalResourceView(forwardUrl); –&gt;  转发**</strong>request.getRequestDispatcher(path).forward(request, response);** </p></li><li><p><strong>返回值以</strong> <strong>redirect: 开始：</strong> <strong>new RedirectView() –》 render就是重定向</strong> </p></li><li><p><strong>返回值是普通字符串： new ThymeleafView（）—&gt;</strong> </p></li></ul><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>实现HandlerInterceptor接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"=====前置登录拦截开始====="</span>);</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser!=<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        request.setAttribute(<span class="string">"msg"</span>,<span class="string">"请先登录"</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/"</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"=====处理登录拦截开始====="</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"=====后置登录拦截开始====="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <strong>拦截器注册到容器中 &amp;&amp; 指定拦截规则</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        <span class="comment">//拦截器注册到容器中</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">"/**"</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/login"</span>,<span class="string">"/css/**"</span>,<span class="string">"/fonts/**"</span>,<span class="string">"/images/**"</span>,</span><br><span class="line">                        <span class="string">"/js/**"</span>,<span class="string">"/aa/**"</span>); <span class="comment">//放行的请求</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">th:action</span>=<span class="string">"@{/upload}"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"headerImg"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>生活照<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- multiple表明多文件上传--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photos"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>后台</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表单控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>{</span><br><span class="line">    <span class="comment">//文件上传测试</span></span><br><span class="line">    <span class="meta">@PostMapping("/upload")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(String email, String password, <span class="meta">@RequestPart</span> MultipartFile headImage,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="meta">@RequestPart</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//如果按默认文件上传配置，文件过大会上传失败，为此我们修改配置</span></span><br><span class="line">        <span class="keyword">if</span>(!headImage.isEmpty()){</span><br><span class="line">            String originalFilename = headImage.getOriginalFilename();</span><br><span class="line">            headImage.transferTo(<span class="keyword">new</span> File(<span class="string">"D:\\images\\"</span>+originalFilename));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (photos.length&gt;<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) {</span><br><span class="line">                photo.transferTo(<span class="keyword">new</span> File(<span class="string">"D:\\images\\"</span>+photo.getOriginalFilename()));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>配置文件上传预设参数</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></tbody></table></figure><h4 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h4><h4 id="原生组件注入"><a href="#原生组件注入" class="headerlink" title="原生组件注入"></a>原生组件注入</h4><h4 id="嵌入式Servlet容器-切换web服务器与定制化"><a href="#嵌入式Servlet容器-切换web服务器与定制化" class="headerlink" title="嵌入式Servlet容器-切换web服务器与定制化"></a>嵌入式Servlet容器-切换web服务器与定制化</h4><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h4 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h4><p><strong>导入jdbc场景</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>他会给我们导入数据库连接池，事务管理等组件，但不导入数据库驱动，因为springboot无法知道你用何种数据库，mysql? or Oracle？</p><p><strong>导入数据库驱动</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认版本：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">想要修改版本</span></span><br><span class="line"><span class="comment">1、直接依赖引入具体版本（maven的就近依赖原则）</span></span><br><span class="line"><span class="comment">2、重新声明版本（maven的属性的就近优先原则）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>相关数据源配置类</strong></p><ul><li><p>DataSourceAutoConfiguration ： 数据源的自动配置。</p><p>修改数据源相关的配置：spring.datasource。<br>数据库连接池的配置，是自己容器中没有DataSource才自动配置的。<br>底层配置好的连接池是：HikariDataSource。</p></li><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置。</p></li><li><p>JdbcTemplateAutoConfiguration： JdbcTemplate的自动配置，可以来对数据库进行CRUD。</p><p>可以修改前缀为spring.jdbc的配置项来修改JdbcTemplate。<br>@Bean @Primary JdbcTemplate：Spring容器中有这个JdbcTemplate组件，使用@Autowired。</p></li><li><p>JndiDataSourceAutoConfiguration： JNDI的自动配置。</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的。</p></li></ul><p><strong>修改配置项</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Druid整合"><a href="#Druid整合" class="headerlink" title="Druid整合"></a>Druid整合</h4><p><a href="https://github.com/alibaba/druid">Druid官方GitHub地址</a></p><p><a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">介绍</a></p><p><strong>自定义方式整合</strong></p><p>添加依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置数据源</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties("spring.datasource")</span><span class="comment">//复用配置文件的数据源配置,可以在配置文件中配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"><span class="comment">//        druidDataSource.setUrl();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUsername();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setPassword();</span></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置参照</a></p></blockquote><ul><li><p>Druid的监控页功能：</p><p>Druid内置提供了一个StatViewServlet用于展示Druid的统计信息。官方文档 - 配置_StatViewServlet配置。这个StatViewServlet的用途包括：</p><p>提供监控信息展示的html页面<br>提供监控信息的JSON API</p><p>uid内置提供一个StatFilter，用于统计监控信息。官方文档 - 配置_StatFilter</p></li><li><p>bStatFilter用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。官方文档 - 配置_配置WebStatFilter</p></li><li><p>uid提供了WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的。官方文档 - 配置 wallfilter</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties("spring.datasource")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//加入监控和防火墙功能功能</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">"stat,wall"</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>{</span><br><span class="line">        StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">"/druid/*"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监控页账号密码：</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>{</span><br><span class="line">        WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>starter整合方式</strong></p><p><a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">官方文档</a></p><p>依赖引入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>自动配置</p><ul><li>配置项 spring.datasource.druid</li><li>自动配置类DruidDataSourceAutoConfigure</li><li>DruidSpringAopConfiguration.class, 监控SpringBean的；配置项：spring.datasource.druid.aop-patterns</li><li>DruidStatViewServletConfiguration.class, 监控页的配置。spring.datasource.druid.stat-view-servlet默认开启。</li><li>DruidWebStatFilterConfiguration.class，web监控配置。spring.datasource.druid.web-stat-filter默认开启。</li><li>DruidFilterConfiguration.class所有Druid的filter的配置</li></ul><p>一个实例</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.atguigu.admin.*</span>  <span class="comment">#监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>     <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span>   <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">'*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span>    <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h4 id="mybatis整合"><a href="#mybatis整合" class="headerlink" title="mybatis整合"></a>mybatis整合</h4><p><a href="https://github.com/mybatis">官方仓库</a></p><p>依赖引入</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置模式:</p><ul><li>配置文件</li><li>SqlSessionFactory：自动配置好了</li><li>SqlSession：自动配置了SqlSessionTemplate 组合了SqlSession</li><li>@Import(AutoConfiguredMapperScannerRegistrar.class)</li><li>Mapper： 只要我们写的操作MyBatis的接口标准了@Mapper就会被自动扫描进来</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(MybatisProperties.class)</span> <span class="comment">// MyBatis配置项绑定类。</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAutoConfiguration</span></span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "mybatis")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span></span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自定义配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span>  <span class="comment">#全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/*.xml</span>  <span class="comment">#sql映射文件位置</span></span><br></pre></td></tr></tbody></table></figure><p>全局配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>mapper接口</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lun.boot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultType</span>=<span class="string">"com.lun.boot.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.lun.boot.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不需要全局配置文件的方式</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 可以不写全局配置文件，所有全局配置文件的配置都放在configuration配置项中了。</span></span><br><span class="line">  <span class="comment"># config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h4 id="mybatis-plus整合"><a href="#mybatis-plus整合" class="headerlink" title="mybatis-plus整合"></a>mybatis-plus整合</h4><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 举个栗子</p><p>我们有一个服务，service</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OurService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span><span class="comment">//声明这是一个异步方法，并在启动类上使用@EnableAsync</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">async</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="comment">//假设这是一个业务，需要开启一个线程处理，处理完成他需要一定的时间</span></span><br><span class="line">        System.out.println(<span class="string">"任务处理中"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);<span class="comment">//模拟任务处理耗时</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一个controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OurService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">asyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">         <span class="comment">//模拟开启一个耗时五秒的业务。当开启异步任务后，会在后台执行此方法async()，</span></span><br><span class="line">        <span class="comment">//直接返回方法结果，用户不必等待</span></span><br><span class="line">        service.async();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果不声明anync为一个异步方法，那么当用户访问/hello时，需要等待(转圈圈)五秒才能得到结果，这不是我们想要的</p><h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3><p>在springboot中使用邮件任务</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以看一下此依赖下的依赖项</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>查看自动配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({MimeMessage.class, MimeType.class, MailSender.class})</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean({MailSender.class})</span></span><br><span class="line"><span class="meta">@Conditional({MailSenderAutoConfiguration.MailSenderCondition.class})</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties({MailProperties.class})</span><span class="comment">//配置绑定类</span></span><br><span class="line"><span class="meta">@Import({MailSenderJndiConfiguration.class, MailSenderPropertiesConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSenderAutoConfiguration</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailSenderAutoConfiguration</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSenderCondition</span> <span class="keyword">extends</span> <span class="title">AnyNestedCondition</span> </span>{</span><br><span class="line">        MailSenderCondition() {</span><br><span class="line">            <span class="keyword">super</span>(ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">            prefix = "spring.mail",</span></span><br><span class="line"><span class="meta">            name = {"jndi-name"}</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiNameProperty</span> </span>{</span><br><span class="line">            JndiNameProperty() {</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">            prefix = "spring.mail",</span></span><br><span class="line"><span class="meta">            name = {"host"}</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HostProperty</span> </span>{</span><br><span class="line">            HostProperty() {</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看配置项MailProperties</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = "spring.mail"</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String protocol = <span class="string">"smtp"</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</span><br><span class="line">    <span class="keyword">private</span> String jndiName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MailProperties</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.defaultEncoding = DEFAULT_CHARSET;</span><br><span class="line">        <span class="keyword">this</span>.properties = <span class="keyword">new</span> HashMap();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.host;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        DEFAULT_CHARSET = StandardCharsets.UTF_8;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>从配置绑定项中我们也可以看出默认使用的是SMTP协议</p><p><strong>配置QQ邮箱</strong></p><p>获取第三方登录授权码</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210806121418.png"></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">1816046297@qq.com</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">保密哟</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># 使用QQ邮箱需要开启安全验证</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>🐐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>OK，简单配置一下，让我们自己试着给自己发送一封复杂邮件吧~</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, IOException </span>{</span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">"rain，你好"</span>);</span><br><span class="line">    helper.setText(<span class="string">"于北京时间："</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-mm-dd hh-mm-ss"</span>).format(<span class="keyword">new</span> Date())+<span class="string">"发送"</span>);</span><br><span class="line">    helper.addAttachment(<span class="string">"song.mp3"</span>,<span class="keyword">new</span> File(<span class="string">"E:\\CloudMusic\\アネモネリア - 巣立ちの歌.mp3"</span>));</span><br><span class="line">    helper.setFrom(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">    helper.setTo(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>emmmm，OK了(づ￣ 3￣)づ</p></blockquote><img src="https://gitee.com/rain-sky/images/raw/master/20210806162702.png" style="zoom: 67%;"><blockquote><p>来个小小的实现吧(●’◡’●)~</p></blockquote><p>首先用一个简单的表单模拟富文本编辑器，如是写道</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">            复杂邮件发送测试用</span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">th:action</span>=<span class="string">"@{/mailsend}"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"theme"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Enter theme"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mytext"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"mytext"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--                            多文件上传--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"InputFile"</span> &gt;</span>我的相册<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"InputFile"</span> <span class="attr">name</span>=<span class="string">"photos"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 点击确认</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>写个请求处理，依然自己发给自己<span class="github-emoji"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/mailsend")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendMail</span><span class="params">(String theme,String text,<span class="meta">@RequestPart</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> MessagingException, FileNotFoundException </span>{</span><br><span class="line">    MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">    MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">    helper.setSubject(theme);</span><br><span class="line">    helper.setText(<span class="string">"于北京时间："</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-mm-dd hh-mm-ss"</span>).format(<span class="keyword">new</span> Date())+<span class="string">"发送"</span>+text);</span><br><span class="line">    <span class="keyword">if</span> (photos.length&gt;<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile photo : photos) {</span><br><span class="line">            <span class="comment">//MultipartFile继承了InputStreamResource</span></span><br><span class="line">            helper.addAttachment(photo.getOriginalFilename(),photo,photo.getContentType());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    helper.setFrom(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">    helper.setTo(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发送一个邮件给自己玩一玩，∑( 口 || OMG，当我点击提交以后没有立刻跳转到main.html，而是一直在转圈圈怎么肥四</p><img src="https://gitee.com/rain-sky/images/raw/master/20210806174404.png" style="zoom: 67%;"><p>(・∀・(・∀・(・∀・*)，处理邮件发送需要的时间不短，这样给用户造成的体验会非常差，那么我们将邮件发送封装成一个异步任务方法，再次改造代码</p><p>处理异步请求的service</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailSend</span><span class="params">(String theme, String text, MultipartFile[] files)</span> <span class="keyword">throws</span> MessagingException </span>{</span><br><span class="line">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line">        helper.setSubject(theme);</span><br><span class="line">        helper.setText(text+<span class="string">"\n于北京时间："</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-mm-dd hh-mm-ss"</span>).format(<span class="keyword">new</span> Date())+<span class="string">"发送"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (files.length&gt;<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile file : files) {</span><br><span class="line">                helper.addAttachment(file.getOriginalFilename(),file,file.getContentType());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        helper.setFrom(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">        helper.setTo(<span class="string">"1816046297@qq.com"</span>);</span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们的controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/mailsend")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMail</span><span class="params">(String theme,String text,<span class="meta">@RequestPart</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> MessagingException, FileNotFoundException </span>{</span><br><span class="line">        mailService.mailSend(theme, text, photos);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>再次测试，这次就没有转圈圈了，但是后太报错，在执行此方法时mailSender.send(mimeMessage);ヽ(✿ﾟ▽ﾟ)ノ</p><p>换一个方式，新开一个内部类实现Runable接口，通过构造函数传参，然后新开线程执行上述业务，依然报错，错误依然出在mailSender.send(mimeMessage);上</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>如果不传输附件则不会出现此问题，说明是IO的问题~</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 此问题未解决，待续~</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>springboot定时任务核心：</p><p>TaskScheduler：任务调度器</p><p>TaskExecutor：任务执行器</p><p>@EnableScheduling：开启定时任务</p><p>@Scheduled：声明定时任务</p><blockquote><p>主启动类开启定时任务</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OurService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = "0 0 6 * * 5")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledTask</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"每个月的周五上午六点执行该任务~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>Cron表达式</strong></p><p><a href="https://www.cnblogs.com/junrong624/p/4239517.html">文章推荐</a></p><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="分布式系统理论"><a href="#分布式系统理论" class="headerlink" title="分布式系统理论"></a>分布式系统理论</h3><p>在一个分布式系统中，一组独立的计算机展现给用户的是一个统一的整体，就好像是一个系统似的。</p><p><span class="github-emoji"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 举个栗子</p><p>在ORM单体应用时代，当一个网站的流量足够大的时候，我们可能会作垂直处理，垂直扩展多台服务器，也许用nginx去作负载均衡，但是当业务足。庞大且复杂时，在单体中处理所有业务是效率低下的，也许我们花大资金去升级设备硬件，但这代价太大，在一个应用中，每个服务对硬件的要求不一样，为此我们会将业务拆分独立出来，简单的业务分配更少的服务器资源，复杂服务给予更多资源。</p><p><strong>RPC</strong></p><p><a href="https://www.zhihu.com/search?type=content&amp;q=RPC">参考文章</a></p><p>RPC(Remote Procedure Call)：远程过程调用，它是一种通过网络从远程计算机程序上请求服务，RPC 是一种技术思想而非一种规范或协议。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210807144742.jpeg"></p><p>（图片来源：<a href="https://link.zhihu.com/?target=https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html">https://www.cs.rutgers.edu/~pxk/417/notes/03-rpc.html</a>）</p><p>为什么RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如比如不同的系统间的通讯，甚至不同的组织间的通讯。由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用，</p><p>RPC的协议有很多，比如最早的CORBA，Java RMI，Web Service的RPC风格，Hessian，Thrift，甚至Rest API。</p><p><strong>序列化和反序列化</strong><br>客户端怎么把参数值传给远程的函数呢?在本地调用中，我们只需要把参数压到栈里，然后让函数自己去栈里读就行。<br>但是在远程过程调用时，客户端跟服务端是不同的进程，不能通过内存来传递参数。<br>这时候就需要客户端把参数先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。<br>只有二进制数据才能在网络中传输，序列化和反序列化的定义是：</p><ul><li>将对象转换成二进制流的过程叫做序列化</li><li>将二进制流转换成对象的过程叫做反序列化</li></ul><h3 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h3><p><strong>简介，基于dubbo3</strong></p><p><a href="https://dubbo.apache.org/zh/docs/introduction/">dubbo3官方文档</a></p><p>如需了解发展背景，互联网应用架构发展请参考<a href="https://dubbo.apache.org/zh/docsv2.7/user/preface/background/">dubbo2官方文档</a></p><p>Apache Dubbo 是一款微服务开发框架，它提供了 RPC通信 与 微服务治理 两大关键能力。这意味着，使用 Dubbo 开发的微服务，将具备相互之间的远程发现与通信能力， 同时利用 Dubbo 提供的丰富服务治理能力，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。同时 Dubbo 是高度可扩展的，用户几乎可以在任意功能点去定制自己的实现，以改变框架的默认行为来满足自己的业务需求。</p><p>Dubbo3 基于 Dubbo2 演进而来，在保持原有核心功能特性的同时， Dubbo3 在易用性、超大规模微服务实践、云原生基础设施适配等几大方向上进行了全面升级。</p><p>Apache Dubbo提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。</p><p><strong>背景</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210807113250.jpeg"></p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 单一应用架构</p><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 垂直应用架构</p><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分布式服务架构</p><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 流动计算架构</p><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p><a href="http://archive.apache.org/dist/zookeeper/">下载地址</a></p><p>下载并解压</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;springboot的特性&quot;&gt;&lt;a href=&quot;#springboot的特性&quot; class=&quot;headerlink&quot; title=&quot;springboot的特性&quot;&gt;&lt;/a&gt;springboot的特性&lt;/h2&gt;&lt;h4 id=&quot;1-依赖管理&quot;&gt;&lt;a href=&quot;#1-依</summary>
      
    
    
    
    
    <category term="springboot" scheme="https://rain-sky.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://rain-sky.github.io/2021/07/11/%E9%93%BE%E8%A1%A8/"/>
    <id>https://rain-sky.github.io/2021/07/11/%E9%93%BE%E8%A1%A8/</id>
    <published>2021-07-11T08:33:56.000Z</published>
    <updated>2021-07-12T07:30:12.450Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单循环链表"><a href="#单循环链表" class="headerlink" title="单循环链表"></a>单循环链表</h4><p>要实现单循环链表很简单，只需要在单链表的基础上将尾部节点指向头节点，单循环链表相对于单链表来说从任何一个节点出发都能够遍历完整个链表。</p><p><strong>结构示意</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711170521.png"></p><p><strong>添加操作</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711170917.png"></p><p><strong>Java实现</strong></p><p>链表类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCircleLinkedList</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//头结点, 不存数据</span></span><br><span class="line">    <span class="keyword">private</span> Node tail;<span class="comment">//尾结点, 指向链表的最后一个节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCircleLinkedList</span><span class="params">()</span> </span>{</span><br><span class="line">        head = <span class="keyword">new</span> Node(Integer.MIN_VALUE, <span class="keyword">null</span>);</span><br><span class="line">        head.next = head;</span><br><span class="line">        tail = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到链表尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> item)</span> </span>{</span><br><span class="line">        Node no = <span class="keyword">new</span> Node(item,<span class="keyword">this</span>.head);</span><br><span class="line">        tail.next = no;</span><br><span class="line">        tail = no;</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历链表并输出元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>{</span><br><span class="line">        Node now = head.next;</span><br><span class="line">        <span class="keyword">while</span>(now!=head){</span><br><span class="line">            System.out.println(now.item);</span><br><span class="line">            now = now.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> head.next == head;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> item;</span><br><span class="line">        Node next;</span><br><span class="line">        Node(<span class="keyword">int</span> item, Node next) {</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCircleLinkedListTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyCircleLinkedList list = <span class="keyword">new</span> MyCircleLinkedList();</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) {</span><br><span class="line">            <span class="keyword">int</span> item = in.nextInt();</span><br><span class="line">            list.add(item);</span><br><span class="line">        }</span><br><span class="line">        list.output();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;单循环链表&quot;&gt;&lt;a href=&quot;#单循环链表&quot; class=&quot;headerlink&quot; title=&quot;单循环链表&quot;&gt;&lt;/a&gt;单循环链表&lt;/h4&gt;&lt;p&gt;要实现单循环链表很简单，只需要在单链表的基础上将尾部节点指向头节点，单循环链表相对于单链表来说从任何一个节点出发都能</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://rain-sky.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="https://rain-sky.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://rain-sky.github.io/2021/07/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://rain-sky.github.io/2021/07/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-11T08:03:54.000Z</published>
    <updated>2021-07-12T07:25:50.320Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Linux目录结构介绍"><a href="#Linux目录结构介绍" class="headerlink" title="Linux目录结构介绍"></a>Linux目录结构介绍</h5><p>对<code>Linux</code>文件系统目录结构的了解是学习和掌握<code>Linux</code>系统的基础。<code>Linux</code> 文件系统是树形层次结构，具体如下图所示。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711160900.png"></p><h6 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h6><p><code>pwd(Print Working Directory )</code>：显示当前所在目录。</p><h6 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h6><p><code>cd(Change Directory)</code>: 切换当前目录。</p><p>常用特殊目录表示：</p><ul><li>cd 进入用户主目录；</li><li>cd ~ 进入用户主目录；</li><li>cd - 返回进入此目录之前所在的目录；</li><li>cd .. 返回上级目录(若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思)；</li><li>cd ../.. 返回上两级目录；</li><li>cd !$ 把上个命令的参数作为<code>cd</code>参数使用。</li></ul><h6 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h6><p><code>ls(list)</code>: 列出指定目录列表信息，如果没有参数默认列出当前目录下的所有文件和文件夹(隐藏文件和文件夹除外)。</p><p>常见<code>ls</code>命令选项:</p><ul><li>-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；</li><li>-a：显示所有文件和文件夹(包括隐藏文件/文件夹)。</li></ul><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711161208.png"></p><h6 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h6><p>linux中创建文件的常用命令是<code>touch</code>，命令格式如下:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename</span><br></pre></td></tr></tbody></table></figure><p>如果想同时创建多个文件也可以使用<code>touch</code>命令完成，具体格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file1 file2 ...</span><br></pre></td></tr></tbody></table></figure><p>只需将不同的文件名用空格分隔即可完成创建多个文件。</p><h6 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h6><p><code>Linux</code>中常用的删除文件的命令是<code>rm</code>，使用格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [命令选项] filename</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f：强制删除文件或目录；</span><br><span class="line">-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</span><br><span class="line">-i：删除已有文件或目录之前先询问用户。</span><br></pre></td></tr></tbody></table></figure><p>例如，删除我们刚刚创建的文件<code>testfile</code>可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f testfilesh</span><br></pre></td></tr></tbody></table></figure><h6 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h6><p><code>Linux</code>中创建文件夹命令是<code>mkdir</code>，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [命令选项] dirname</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项： <code>-p或--parents</code> 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</p><p>例如：我们新创建一个文件夹<code>testdir</code>可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testdir</span><br></pre></td></tr></tbody></table></figure><h6 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h6><p><code>Linux</code>中删除文件夹的命令是<code>rmdir</code>或者<code>rm -r</code>，命令格式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [命令选项] dirname</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</p><p>例如：将刚刚新创建的文件夹<code>testdir</code>删除可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir testdir</span><br></pre></td></tr></tbody></table></figure><h6 id="Linux文件和文件夹拷贝"><a href="#Linux文件和文件夹拷贝" class="headerlink" title="Linux文件和文件夹拷贝"></a>Linux文件和文件夹拷贝</h6><p><code>Linux</code>使用<code>cp</code>命令用来将一个或多个源文件或者目录复制到指定的目录中，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [命令选项] 源文件 目的文件</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在；-i：</span><br><span class="line">覆盖既有文件之前先询问用户；</span><br><span class="line">-p：保留源文件或目录的属性；</span><br><span class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理。</span><br></pre></td></tr></tbody></table></figure><p>例如：新建一个文件<code>newfile</code>和一个文件夹<code>newdir</code>，将<code>newfile</code>复制到<code>newdir</code>目录下。具体命令如下。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch newfile</span><br><span class="line">mkdir newdir</span><br><span class="line">cp newfile newdir</span><br></pre></td></tr></tbody></table></figure><h6 id="Linux文件和文件夹移动-重命名"><a href="#Linux文件和文件夹移动-重命名" class="headerlink" title="Linux文件和文件夹移动/重命名"></a>Linux文件和文件夹移动/重命名</h6><p>Linux使用<code>mv</code>命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [命令选项] 源文件 目标文件</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在；</span><br><span class="line">-i：覆盖既有文件之前先询问用户；</span><br><span class="line">-p：保留源文件或目录的属性；</span><br><span class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理'。</span><br></pre></td></tr></tbody></table></figure><p>例如：新建一个文件<code>newfile</code>和一个文件夹<code>newdir</code>，将<code>newfile</code>剪切到<code>newdir</code>目录下，并重新命名为<code>newfileCpy</code>。具体命令如下。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch newfile</span><br><span class="line">mkdir newdir</span><br><span class="line">mv newfile newdir/newfileCpy</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Linux目录结构介绍&quot;&gt;&lt;a href=&quot;#Linux目录结构介绍&quot; class=&quot;headerlink&quot; title=&quot;Linux目录结构介绍&quot;&gt;&lt;/a&gt;Linux目录结构介绍&lt;/h5&gt;&lt;p&gt;对&lt;code&gt;Linux&lt;/code&gt;文件系统目录结构的了解是学习和</summary>
      
    
    
    
    
    <category term="linux" scheme="https://rain-sky.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题笔记</title>
    <link href="https://rain-sky.github.io/2021/07/03/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://rain-sky.github.io/2021/07/03/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-03T08:33:05.000Z</published>
    <updated>2021-08-13T12:12:28.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h3><p><strong>题目大意</strong></p><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p><strong>暴力法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++ ){</span><br><span class="line">            <span class="keyword">for</span>( j = i + <span class="number">1</span>; j &lt; nums.length ;j++){</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target ){</span><br><span class="line">                    a[<span class="number">0</span>] = i;</span><br><span class="line">                    a[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">return</span> a ;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>哈希表法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">       HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(target-nums[i])){</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{map.get(target-nums[i]),i};</span><br><span class="line">           }</span><br><span class="line">           map.put(nums[i],i);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>执行效率对比</strong></p><table><thead><tr><th>哈希表法</th><th>3 ms</th><th>40.8 MB</th><th>Java</th><th>2020/02/29 14:58</th><th>添加备注</th></tr></thead><tbody><tr><td>暴力法</td><td>65 ms</td><td>38.2 MB</td><td>Java</td><td>2020/02/28 19:57</td><td>添加备注</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="1-面试题-01-01-判定字符是否唯一"><a href="#1-面试题-01-01-判定字符是否唯一" class="headerlink" title="1 面试题 01.01. 判定字符是否唯一"></a>1 面试题 01.01. 判定字符是否唯一</h3><p><strong>问题描述</strong></p><p>实现一个算法，确定一个字符串 s 的所有字符是否全都不同。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = "leetcode"</span><br><span class="line">输出: false </span><br></pre></td></tr></tbody></table></figure><p><strong>Java 解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String astr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;astr.length();i++){</span><br><span class="line">        <span class="keyword">if</span>(astr.lastIndexOf(astr.charAt(i))!=i){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-面试题-01-02-判定是否互为字符重排"><a href="#2-面试题-01-02-判定是否互为字符重排" class="headerlink" title="2 面试题 01.02. 判定是否互为字符重排"></a>2 面试题 01.02. 判定是否互为字符重排</h3><p><strong>问题描述</strong></p><p>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p><p>示例 1：</p><p>输入: s1 = “abc”, s2 = “bca”<br>输出: true<br>示例 2：</p><p>输入: s1 = “abc”, s2 = “bad”<br>输出: false</p><p><strong>Java解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">CheckPermutation</span><span class="params">(String s1, String s2)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chs1 = s1.toCharArray();</span><br><span class="line">        Arrays.sort(chs1);</span><br><span class="line">        <span class="keyword">char</span>[] chs2 = s2.toCharArray();</span><br><span class="line">        Arrays.sort(chs2);</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(chs1).equals(Arrays.toString(chs2));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3 无重复字符的最长子串"></a>3 无重复字符的最长子串</h3><p><strong>归类：</strong><code>滑动窗口</code></p><p><strong>题目描述</strong></p><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br>示例 4:</p><p>输入: s = “”<br>输出: 0</p><p><strong>自己写的笨方法,暴力法求解，遍历法求解子串</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.length(); i++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j&lt;s.length(); j++){</span><br><span class="line">                <span class="keyword">if</span>(set.contains(s.charAt(j))){</span><br><span class="line">                    set.clear();</span><br><span class="line">                    <span class="keyword">if</span>(count&gt;max)max = count;</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    set.add(s.charAt(j));</span><br><span class="line">                    count++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(count&gt;max)max = count;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>执行用时：73 ms, 在所有 Java 提交中击败了14.95%的用户</p><p>内存消耗：39.1 MB, 在所有 Java 提交中击败了12.41%的用户</p><p><strong>官方题解，改进方法，滑动窗口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="comment">// 哈希集合，记录每个字符是否出现过</span></span><br><span class="line">        Set&lt;Character&gt; occ = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="comment">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></span><br><span class="line">        <span class="keyword">int</span> rk = -<span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 左指针向右移动一格，移除一个字符,目的是为了将第一个重复字符第一次出现位置之前的字符全部删除</span></span><br><span class="line">                occ.remove(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span> (rk + <span class="number">1</span> &lt; n &amp;&amp; !occ.contains(s.charAt(rk + <span class="number">1</span>))) {</span><br><span class="line">                <span class="comment">// 不断地移动右指针</span></span><br><span class="line">                occ.add(s.charAt(rk + <span class="number">1</span>));</span><br><span class="line">                ++rk;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span></span><br><span class="line">            ans = Math.max(ans, rk - i + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>一点点总结</strong></p><blockquote><p>看见出现次数：联想到散列表</p><p>涉及子串：联想到滑动窗口</p></blockquote><h3 id="4-字符串相加"><a href="#4-字符串相加" class="headerlink" title="4 字符串相加"></a>4 字符串相加</h3><p><strong>题目描述</strong></p><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和。</p><p><strong>自己写的低效率代码，Java实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>{</span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer(num1);</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer(num2);</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> len = s2.length()-s1.length()&gt;<span class="number">0</span>?s2.length()-s1.length():</span><br><span class="line">        s1.length()-s2.length();</span><br><span class="line">        <span class="comment">//处理两个字符穿位数不同的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">             <span class="keyword">if</span> (s1.length()&gt;s2.length()){</span><br><span class="line">                 s2.insert(<span class="number">0</span>,<span class="string">'0'</span>);</span><br><span class="line">             }<span class="keyword">else</span>{</span><br><span class="line">                 s1.insert(<span class="number">0</span>,<span class="string">'0'</span>);</span><br><span class="line">             }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>,num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s1.length()-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) {</span><br><span class="line">            num = s1.charAt(i)+s2.charAt(i)+carry-<span class="number">96</span>;</span><br><span class="line">            ans.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(num%<span class="number">10</span>+<span class="number">48</span>));</span><br><span class="line">            carry = num/<span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)ans.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(carry+<span class="number">48</span>));</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>改进写法，双指针</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>{</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//定义两个指针指向字符穿末尾</span></span><br><span class="line">        <span class="keyword">int</span> i = num1.length()-<span class="number">1</span>,j = num2.length()-<span class="number">1</span>,add = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//add!=0，最后一次若add进位不为零，会多增加一位</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span> || add!=<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">int</span> a = i &gt;= <span class="number">0</span>?num1.charAt(i) - <span class="string">'0'</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> b = j &gt;= <span class="number">0</span>?num2.charAt(j) - <span class="string">'0'</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> res = a + b + add;</span><br><span class="line">            ans.insert(<span class="number">0</span>,(<span class="keyword">char</span>)(res%<span class="number">10</span>+<span class="number">48</span>));</span><br><span class="line">            add = res/<span class="number">10</span>;</span><br><span class="line">            --i;</span><br><span class="line">            --j;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>对比链表题中的 “两数相加”</p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1 两数相加"></a>1 两数相加</h3><p><strong>题目描述</strong></p><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p> <img src="https://gitee.com/rain-sky/images/raw/master/20210712174531.png"></p><p>示例 1：</p><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p><p><strong>Java解答</strong></p><p>自己写的分情况讨论法，尚不美观的代码，代码重复度过高</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode head = <span class="keyword">null</span>, tail = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> vals = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> ( head == <span class="keyword">null</span>){</span><br><span class="line">                vals = (l1.val+l2.val+carry)%<span class="number">10</span>;</span><br><span class="line">                carry = (l1.val+l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                head = tail = <span class="keyword">new</span> ListNode(vals);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>){</span><br><span class="line">                vals = (l1.val+l2.val + carry)%<span class="number">10</span>;</span><br><span class="line">                carry = (l1.val+l2.val + carry)/<span class="number">10</span>;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(vals);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>){</span><br><span class="line">                vals = (l1.val + carry)%<span class="number">10</span>;</span><br><span class="line">                carry = (l1.val+carry)/<span class="number">10</span>;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(vals);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1 == <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>){</span><br><span class="line">                vals = (l2.val + carry)%<span class="number">10</span>;</span><br><span class="line">                carry = (l2.val+carry)/<span class="number">10</span>;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(vals);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="keyword">null</span>)l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2!=<span class="keyword">null</span>)l2 = l2.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) {</span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>执行效率：</p></blockquote><p>执行用时：2 ms, 在所有 Java 提交中击败了99.77%的用户</p><p>内存消耗：38.6 MB, 在所有 Java 提交中击败了76.85%的用户</p><p><strong>优化版</strong></p><p>代码重复度降低</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        ListNode head = <span class="keyword">null</span>, tail = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">int</span> n1 = l1 != <span class="keyword">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = l2 != <span class="keyword">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) {</span><br><span class="line">                head = tail = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            }</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) {</span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-判断回文链表"><a href="#2-判断回文链表" class="headerlink" title="2 判断回文链表"></a>2 判断回文链表</h3><p><strong>题目描述</strong></p><p>请判断一个链表是否为回文链表。</p><p><strong>示例 1:</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><p><strong>示例 2:</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Java利用堆栈解答</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="keyword">null</span>){</span><br><span class="line">            stack.push(tmp.val);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        }</span><br><span class="line">        tmp = head;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(tmp.val!=stack.pop().intValue()){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            tmp=tmp.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Java数组解答</strong></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>题目描述</strong></p><p>给定 <em>n</em> 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p><p><strong>C解法</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(heightSize==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left[heightSize];</span><br><span class="line">    <span class="keyword">int</span> right[heightSize];</span><br><span class="line">    left[<span class="number">0</span>] = height[<span class="number">0</span>],right[heightSize<span class="number">-1</span>] = height[heightSize<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; heightSize;i++){</span><br><span class="line">        left[i] = fmax(left[i - <span class="number">1</span>], height[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = heightSize - <span class="number">2</span>; j&gt;=<span class="number">0</span>; j--){</span><br><span class="line">        right[j] = fmax(right[j + <span class="number">1</span>],height[j]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;heightSize; k++){</span><br><span class="line">        sum+=fmin(left[k], right[k]) - height[k];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h2><blockquote><p>二分搜索的大致解法</p></blockquote><p>二分查找是一种基于比较目标值和数组中间元素的教科书式算法。</p><ul><li>如果目标值等于中间元素，则找到目标值。</li><li>如果目标值较小，继续在左侧搜索。</li><li>如果目标值较大，则继续在右侧搜索。</li></ul><p>算法（依据题目要求，边界条件也许会有所不同）：</p><p>初始化指针 left = 0, right = n - 1。<br>当 left &lt;= right：<br>比较中间元素 nums[pivot] 和目标值 target 。</p><ul><li>如果 target = nums[pivot]，返回 pivot。</li><li>如果 target &lt; nums[pivot]，则在左侧继续搜索 right = pivot - 1。</li><li>如果 target &gt; nums[pivot]，则在右侧继续搜索 left = pivot + 1。</li></ul><p><img src="https://gitee.com/rain-sky/images/raw/master/20210813194801.jpeg"></p><p>作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode/">https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode/</a></p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h3><p><strong>题目描述</strong></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p><p><strong>Java解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>,p;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;=end){</span><br><span class="line">            p = (head+end)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[p]){</span><br><span class="line">                end = p-<span class="number">1</span>;</span><br><span class="line">            }<span class="keyword">if</span>(target&gt;nums[p]){</span><br><span class="line">                head = p+<span class="number">1</span>;</span><br><span class="line">            }<span class="keyword">if</span>(target==nums[p]){</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a><a href="https://leetcode-cn.com/problems/first-bad-version/">278. 第一个错误的版本</a></h3><p><strong>题目描述</strong></p><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p>示例 1：</p><p>输入：n = 5, bad = 4<br>输出：4<br>解释：<br>调用 isBadVersion(3) -&gt; false<br>调用 isBadVersion(5) -&gt; true<br>调用 isBadVersion(4) -&gt; true<br>所以，4 是第一个错误的版本。</p><p>提示：</p><p>1 &lt;= bad &lt;= n &lt;= 231 - 1</p><p><strong>Java解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">VersionControl</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="comment">//定义左右指针</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j){</span><br><span class="line">            <span class="keyword">int</span> ans = i + (j - i)/<span class="number">2</span>;<span class="comment">//此种写法可以防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(isBadVersion(ans)){</span><br><span class="line">                j = ans;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                i = ans + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>特别注意，笔者此题ans 最初的写法为(i+j)/2，这种写法在左右指针足够大的时候会发生溢出，亦因此导致第一次提交在<strong>2126753390 1702766719</strong>这组测试数据上超时。</p><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a></h3><p><strong>题目描述</strong></p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><p>输入: nums = [1,3,5,6], target = 5<br>输出: 2<br>示例 2:</p><p>输入: nums = [1,3,5,6], target = 2<br>输出: 1</p><p><strong>java解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>,p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//先处理target在两端情况</span></span><br><span class="line">        <span class="keyword">if</span>(target&lt;nums[head])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(target&gt;nums[end])<span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">while</span>(head&lt;end-<span class="number">1</span>){</span><br><span class="line">            p = head + (end - head)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[p]){</span><br><span class="line">                end = p;</span><br><span class="line">            }<span class="keyword">if</span>(target&gt;nums[p]){</span><br><span class="line">                head = p;</span><br><span class="line">            }<span class="keyword">if</span>(target==nums[p]){</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//当while循环结束时，head + 1 = end，此时要么已经找到，要么target等于下标为head或者end的对应值</span></span><br><span class="line">        <span class="keyword">if</span>(target==nums[head]){</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target==nums[end]){</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果未找到，那么此时的target必定nums[head]&lt;target&lt;nums[end]</span></span><br><span class="line">        <span class="keyword">return</span> head + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>虽然与上两题同是二分搜索，但依据题目情况，有所改动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1 两数之和&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    
    <category term="算法" scheme="https://rain-sky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://rain-sky.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>全干工程师进阶-Vue</title>
    <link href="https://rain-sky.github.io/2021/06/24/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6-Vue/"/>
    <id>https://rain-sky.github.io/2021/06/24/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6-Vue/</id>
    <published>2021-06-24T02:08:45.000Z</published>
    <updated>2021-07-11T09:16:26.370Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相关链接</p><p>Vue: <a href="https://vuejs.org/">https://vuejs.org/</a></p><p>webpack：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p><p>Vue中文：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>Axios: <a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p><p>ElementUI : <a href="https://element-plus.gitee.io/#/zh-CN">https://element-plus.gitee.io/#/zh-CN</a> </p><p>vue-element-admin: <a href="https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#CDN">CDN</a></h3><p>对于制作原型或学习，你可以这样使用最新版本：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#NPM">NPM</a></h3><p>在用 Vue 构建大型应用时推荐使用 NPM 安装[<a href="https://cn.vuejs.org/v2/guide/installation.html#footnote-1">1]</a>。NPM 能很好地和诸如 <a href="https://webpack.js.org/">webpack</a> 或 <a href="http://browserify.org/">Browserify</a> 模块打包器配合使用。同时 Vue 也提供配套工具来开发<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 最新稳定版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install vue</span></span><br></pre></td></tr></tbody></table></figure><h3 id="对不同构建版本的解释"><a href="#对不同构建版本的解释" class="headerlink" title="对不同构建版本的解释"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A">对不同构建版本的解释</a></h3><p>在 <a href="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/">NPM 包的 <code>dist/</code> 目录</a>你将会找到很多不同的 Vue.js 构建版本。这里列出了它们之间的差别：</p><table><thead><tr><th align="left"></th><th align="left">UMD</th><th align="left">CommonJS</th><th align="left">ES Module (基于构建工具使用)</th><th align="left">ES Module (直接用于浏览器)</th></tr></thead><tbody><tr><td align="left"><strong>完整版</strong></td><td align="left">vue.js</td><td align="left">vue.common.js</td><td align="left">vue.esm.js</td><td align="left">vue.esm.browser.js</td></tr><tr><td align="left"><strong>只包含运行时版</strong></td><td align="left">vue.runtime.js</td><td align="left">vue.runtime.common.js</td><td align="left">vue.runtime.esm.js</td><td align="left">-</td></tr><tr><td align="left"><strong>完整版 (生产环境)</strong></td><td align="left">vue.min.js</td><td align="left">-</td><td align="left">-</td><td align="left">vue.esm.browser.min.js</td></tr><tr><td align="left"><strong>只包含运行时版 (生产环境)</strong></td><td align="left">vue.runtime.min.js</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#%E6%9C%AF%E8%AF%AD">术语</a></h3><ul><li><strong>完整版</strong>：同时包含编译器和运行时的版本。</li><li><strong>编译器</strong>：用来将模板字符串编译成为 JavaScript 渲染函数的代码。</li><li><strong>运行时</strong>：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</li></ul><blockquote><p>学习参照官方文档:<a href="https://vuejs.org/">https://vuejs.org/</a></p></blockquote><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>v-if</strong></p><p>v-if指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>也可以用 v-else 添加一个“else 块”：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-eles 必须跟在v-if 之后，否则不被识别</p></blockquote><p>在 template元素上使用 v-if 条件渲染分组</p><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>v-show</strong></p><p>另一个用于根据条件展示元素的选项是 v-show指令。用法大致一样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show只是简单地切换元素的 CSS property display。</p><p><strong>v-show vs v-if</strong></p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p><strong>使用v-for 把数组对应为一组元素进行渲染</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">              {{item.message}}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:{</span><br><span class="line">                items:[</span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"你好世界"</span>},</span></span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"樱花庄的宠物女孩"</span>},</span></span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"青出于蓝"</span>}</span></span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h3><h4 id="一个组件的实例"><a href="#一个组件的实例" class="headerlink" title="一个组件的实例"></a>一个组件的实例</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, {</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <button-counter>。我们可以在一个通过 new Vue`创建的 Vue 根实例中，把这个组件作为自定义元素来使用.</button-counter></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p></blockquote><h4 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h4><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: {</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过prop向子组件传递数据"><a href="#通过prop向子组件传递数据" class="headerlink" title="通过prop向子组件传递数据"></a>通过prop向子组件传递数据</h4><p>如创建一个博文组件为例，需要向子组件传递博文信息,props中属性无上限</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, {</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;{{ title }}&lt;/h3&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title=<span class="string">"My journey with Vue"</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></tbody></table></figure><p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个博文的数组：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#blog-post-demo'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    posts: [</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'My journey with Vue'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Blogging with Vue'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Why Vue is so fun'</span> }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>并想要为每篇博文渲染一个组件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-for="post in posts"</span><br><span class="line">  v-bind:key="post.id"</span><br><span class="line">  v-bind:title="post.title"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如上所示，你会发现我们可以使用 <code>v-bind</code> 来动态传递 prop。这在你一开始不清楚要渲染的具体内容，比如<a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-component-blog-post-example">从一个 API 获取博文列表</a>的时候，是非常有用的。</p><h4 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h4><p>如下例子:</p><p>在我们开发 <blog-post> 组件时，它的一些功能可能要求我们和父级组件进行沟通。例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</blog-post></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue插槽,自定义事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前端， --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 由于组件无法访问到Vue实例中的方法，解决办法，自定义事件 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在视图中自定义事件绑定到组件中的方法，并把自定义事件赋值为Vue实例中的方法 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件可以通过调用内建的 $emit 方法并传入事件名称来触发一个事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blog-posts-events-demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"{ fontSize: postFontSize + 'em' }"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 让我们来自定义一个enlarge-text事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-for</span>=<span class="string">"post in posts"</span> <span class="attr">v-bind:key</span>=<span class="string">"post.id"</span> <span class="attr">v-bind:post</span>=<span class="string">"post"</span> <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += 0.1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'blog-post'</span>, {</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">'post'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">{{ <span class="name">post.title</span> }}</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text')"</span>&gt;</span></span></span></span><br><span class="line">                    Enlarge text</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"post.content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                `</span><br><span class="line">    })</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#blog-posts-events-demo'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line">        posts: [</span><br><span class="line"><span class="javascript">          { <span class="attr">id</span>: <span class="number">1001</span>, <span class="string">'title'</span>: <span class="string">"有手你就行"</span>, <span class="attr">content</span>: <span class="string">"好吧，有手，但还是不太行呢~"</span> }</span></span><br><span class="line">        ],</span><br><span class="line">        postFontSize: 1</span><br><span class="line">      },</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click="$emit('enlarge-text', 0.1)"&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text="postFontSize += $event"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当这个是个函数的时候</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text="onEnlargeText"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么这个值将会作为第一个参数传入这个方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">  onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用v-model</h4><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等价于</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-bind:value="searchText"</span><br><span class="line">  v-on:input="searchText = $event.target.value"</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  {{ message.split('').reverse().join('') }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 message 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><p>For example</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- methods中的是方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>methods中的nowTime1: {{nowTime1()}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 计算属性，重点在于属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>computed中的nowTime2: {{nowTime2}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// Model</span></span></span><br><span class="line">            data:{</span><br><span class="line"><span class="javascript">                message:<span class="string">"hello world"</span>,</span></span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line"><span class="javascript">                nowTime1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            computed:{</span><br><span class="line"><span class="javascript">                <span class="comment">// 当计算属性中有改变才会重新计算，相当于缓存</span></span></span><br><span class="line"><span class="javascript">                nowTime2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a><a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95">计算属性缓存 vs 方法</a></h3><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Reversed message: "{{ reversedMessage() }}"&lt;/p&gt;</span><br><span class="line">// 在组件中</span><br><span class="line">methods: {</span><br><span class="line">  reversedMessage: function () {</span><br><span class="line">    return this.message.split('').reverse().join('')</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: {</span><br><span class="line">  now: function () {</span><br><span class="line">    return Date.now()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><h3 id="为什么要使用计算属性呢"><a href="#为什么要使用计算属性呢" class="headerlink" title="为什么要使用计算属性呢"></a>为什么要使用计算属性呢</h3><blockquote><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p></blockquote><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95">对象语法</a></h3><p>我们可以传给 v-bind:class 一个对象，以动态地切换 class：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class="{ active: isActive }"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>上面的语法表示active 这个 class 存在与否将取决于数据 property isActive 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a>。</p><p>你可以在对象中传入更多字段来动态切换多个 class。此外，v-bind:class 指令也可以与普通的 class attribute 共存。当有如下模板：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  class="static"</span><br><span class="line">  v-bind:class="{ active: isActive, 'text-danger': hasError }"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>和如下 data：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: {</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果渲染为：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当 isActive或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError的值为 true，class 列表将变为 “static active text-danger”。</p><hr><h2 id="vue插槽与自定义事件"><a href="#vue插槽与自定义事件" class="headerlink" title="vue插槽与自定义事件"></a>vue插槽与自定义事件</h2><blockquote><p>For Example</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue插槽,自定义事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前端，纯视图 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 由于组件无法访问到Vue实例中的方法，解决办法，自定义事件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在视图中自定义事件绑定到组件中的方法，并把自定义事件赋值为Vue实例中的方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on可缩写为@，v-bind：可缩写为: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">"todo-title"</span> <span class="attr">v-bind:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">"todo-items"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">v-on:remove</span>=<span class="string">"removeItem(index)"</span> <span class="attr">v-bind:item</span>=<span class="string">"item"</span> <span class="attr">v-bind:index</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo"</span>, {</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo-title"</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo-items"</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo-title"</span>, {</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">{{<span class="name">title</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo-items"</span>,{</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'item'</span>,<span class="string">'index'</span>],</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 无法在组件里掉用到下面vm的remove方法，怎么办，通过前端自定义事件搭桥</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">{{<span class="name">index</span>}}</span><span class="xml">：</span><span class="template-variable">{{<span class="name">item</span>}}</span><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>',</span></span></span><br><span class="line">            methods:{</span><br><span class="line"><span class="javascript">                remove:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// removeItem(idnex)，写法错误，掉用不到vm实例中的方法</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$emit(<span class="string">"remove"</span>,index);</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:{</span><br><span class="line"><span class="javascript">                title:<span class="string">"番剧"</span>,</span></span><br><span class="line">                items:[</span><br><span class="line"><span class="javascript">                    <span class="string">"你好世界"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"樱花庄的宠物女孩"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"青出于蓝"</span></span></span><br><span class="line">                ]</span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line"><span class="javascript">                removeItem:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue router"></a>vue router</h2><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>开始你的第一个vue-cli开发</p><blockquote><ul><li><p>全局安装淘宝镜像加速器 npm install cnpm -g</p></li><li><p>安装vue-cli    cnpm install vue-cli -g (vue3.0后为npm install -g @vue/cli)</p></li><li><p>初始化一个 vue项目： vue init webpack appname(vue3.0后为 vue create appname)</p></li><li><p>如果使用的为3.0版本的 vue-cli ：接下来直接 cd appname然后npm run server</p></li><li><p>如果使用的为2.0版本的 vue-cli 还需要进入项目目录下以后运行 npm install（3.0版本依赖自动下载node_modules）然后 npm run dev</p></li></ul></blockquote><h2 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中，主要作用用于实现Ajax异步通信。</p><blockquote><p>Vue坚持关注度分离原则，只关注于视图层，因此并不提供网络通信功能，官方推荐使用Axios，减少使用jquery，因为jQuery操作Dom频繁。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>使用 npm:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install axios</span></span><br></pre></td></tr></tbody></table></figure><p>使用 bower:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bower install axios</span></span><br></pre></td></tr></tbody></table></figure><p>使用 cdn:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>学习参见官方文档：<a href="http://www.axios-js.com/zh-cn/docs/index.html">http://www.axios-js.com/zh-cn/docs/index.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;相关链接&lt;/p&gt;
&lt;p&gt;Vue: &lt;a href=&quot;https://vuejs.org/&quot;&gt;https://vuejs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;webpack：&lt;a href=&quot;https://webpack.docschina.org/&quot;</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://rain-sky.github.io/tags/Vue/"/>
    
    <category term="前端" scheme="https://rain-sky.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ajax初见</title>
    <link href="https://rain-sky.github.io/2021/06/22/Ajax%E5%88%9D%E8%A7%81/"/>
    <id>https://rain-sky.github.io/2021/06/22/Ajax%E5%88%9D%E8%A7%81/</id>
    <published>2021-06-22T01:47:34.000Z</published>
    <updated>2021-06-23T01:29:17.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax初见"><a href="#Ajax初见" class="headerlink" title="Ajax初见"></a>Ajax初见</h1><h2 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h2><p>Ajax即 Asynchronous JavaScript and XML（异步的JavaScript和xml），实际上数据交换通常都是json。</p><p>AJAX 是一种用于创建快速动态网页的技术。</p><p>AJAX 通过在后台与服务器进行少量数据交换，使网页实现异步更新。这意味着可以在不重载整个页面的情况下，对网页的某些部分进行更新。</p><p>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个页面。</p><h2 id="使用ajax"><a href="#使用ajax" class="headerlink" title="使用ajax"></a>使用ajax</h2><h3 id="原生js实现"><a href="#原生js实现" class="headerlink" title="原生js实现"></a>原生js实现</h3><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>XMLHttpRequest对象是ajax的基础,XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。目前所有浏览器都支持XMLHttpRequest</p><table><thead><tr><th>方  法</th><th>描  述</th></tr></thead><tbody><tr><td>abort()</td><td>停止当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>把HTTP请求的所有响应首部作为键/值对返回</td></tr><tr><td>getResponseHeader(“header”)</td><td>返回指定首部的串值</td></tr><tr><td>open(“method”,”URL”,[asyncFlag],[“userName”],[“password”])</td><td>建立对服务器的调用。method参数可以是GET、POST或PUT。url参数可以是相对URL或绝对URL。这个方法还包括3个可选的参数，是否异步，用户名，密码</td></tr><tr><td>send(content)</td><td>向服务器发送请求</td></tr><tr><td>setRequestHeader(“header”, “value”)</td><td>把指定首部设置为所提供的值。在设置任何首部之前必须先调用open()。设置header并和请求一起发送 (‘post’方法一定要 )</td></tr></tbody></table><h4 id="五步使用法"><a href="#五步使用法" class="headerlink" title="五步使用法"></a>五步使用法</h4><p>　　1.创建XMLHTTPRequest对象</p><p>　　2.使用open方法设置和服务器的交互信息</p><p>　　3.设置发送的数据，开始和服务器端交互</p><p>　　4.注册事件</p><p>　　5.更新界面</p><h4 id="post方法实例"><a href="#post方法实例" class="headerlink" title="post方法实例"></a>post方法实例</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建异步对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//设置请求的类型及url</span></span><br><span class="line"><span class="comment">//post请求一定要添加请求头才行不然会报错</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"> xhr.open(<span class="string">'post'</span>, <span class="string">'02.post.php'</span> );</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.send(<span class="string">'name=fox&amp;age=18'</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 这步为判断服务器是否正确响应</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">}</span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line">}</span><br><span class="line"><span class="javascript">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="javascript">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span></span><br><span class="line">xmlhttp.send();</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用jquery提供的Ajax实现-springMvc环境"><a href="#使用jquery提供的Ajax实现-springMvc环境" class="headerlink" title="使用jquery提供的Ajax实现(springMvc环境)"></a>使用jquery提供的Ajax实现(springMvc环境)</h3><blockquote><p>让我们来使用Ajax动态的给前端页面加点小东西吧~</p></blockquote><h3 id="创建Demo"><a href="#创建Demo" class="headerlink" title="创建Demo"></a>创建Demo</h3><p>至少有个最基本的亚子，对吧~</p><img src="https://gitee.com/rain-sky/images/raw/master/20210622104900.png" style="zoom:50%;"><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>给前端传点数据，视图控制咱不做(￢︿̫̿￢☆)</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTest</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/t2")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajaxT2</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"PanPan"</span>,<span class="number">12</span>,<span class="string">"男"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"DanDan"</span>,<span class="number">13</span>,<span class="string">"女"</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h3><blockquote><p>我只想让局部的table增加点数据，但我又不想整个页面刷新，好烦恼，ajax来帮忙(づ￣ 3￣)づ</p></blockquote><p>点击button时发起一个Ajax的post请求，局部刷新table。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        $.post({</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 请求url --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          url: <span class="string">"${pageContext.request.contextPath}/t2"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 数据交互 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          data:{<span class="string">'name'</span>:<span class="string">"hello"</span>},</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 回调函数，同样失败也有一个error,此处未写出 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> html = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++){</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">"&lt;tr&gt;"</span>+</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].name + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].age + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].sex + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;/tr&gt;"</span></span></span><br><span class="line">            }</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(html);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#ajaxTest"</span>).html(html);</span></span><br><span class="line">        }</span><br><span class="line">        });</span><br><span class="line">      }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"a()"</span>&gt;</span>憋碰我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"ajaxTest"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><blockquote><p>启动汤姆猫，访问测试</p></blockquote><p>这是他一开始的亚子~</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110307.png"></p><p>当我们触发这个点击事件(●’◡’●)</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110454.png"></p><p><code>惊喜的发现我们的table他更新了，但是页面并未刷新，测试成功了。</code></p><h3 id="过程试探"><a href="#过程试探" class="headerlink" title="过程试探"></a>过程试探</h3><p>打开控制台看看这个过程发生了啥，xhr请求，是个啥？(・∀・(・∀・(・∀・*)？ajax请求，一种异步请求。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110836.png"></p><p>详细</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110854.png"></p><blockquote><p>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果我们可以再来处理这个事。（当然，在其他语境下这个解释可能就不对了）<br>这个很重要，如果不是这样的话，我们点完按钮，页面就会死在那里，其他的数据请求不会往下走了。这样比等待刷新似乎更加讨厌。<br>（虽然提供异步通讯功能的组件默认情况下都是异步的，但它们也提供了同步选项，如果你好奇把那个选项改为false的话，你的页面就会死在那里）<br>xml只是一种数据格式，在这件事里并不重要，我们在更新一行字的时候理论上说不需要这个格式，但如果我们更新很多内容，那么格式化的数据可以使我们有条理地去实现更新。</p><p>现在大部分人其实是用JSON这种格式来代替XML的，因为前者更加简洁，据说目前的解析速度也更快。多快好省，能省则省啊。</p><p><strong>总结：只要是JS调用异步通讯组件并使用格式化的数据来更新web页面上的内容或操作过程，那么我们用的方法就可算是AJAX。</strong></p><p>作者：食铁兽<br>链接：<a href="https://www.zhihu.com/question/20874229/answer/24708736">https://www.zhihu.com/question/20874229/answer/24708736</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax初见&quot;&gt;&lt;a href=&quot;#Ajax初见&quot; class=&quot;headerlink&quot; title=&quot;Ajax初见&quot;&gt;&lt;/a&gt;Ajax初见&lt;/h1&gt;&lt;h2 id=&quot;什么是ajax&quot;&gt;&lt;a href=&quot;#什么是ajax&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Ajax" scheme="https://rain-sky.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Java小积累</title>
    <link href="https://rain-sky.github.io/2021/05/26/Java%E5%B0%8F%E7%A7%AF%E7%B4%AF/"/>
    <id>https://rain-sky.github.io/2021/05/26/Java%E5%B0%8F%E7%A7%AF%E7%B4%AF/</id>
    <published>2021-05-26T01:37:27.000Z</published>
    <updated>2021-08-11T11:33:14.632Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange icon simple"><i class="note-icon fas fa-bullhorn"></i><p>要踩的坑还有很多，自学者，你将去往何方~</p></div><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>switch case</p></blockquote><p>基本写法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression){</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>switch case 语句有如下规则：</p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li></ul><blockquote><p>if-else-if语法</p></blockquote><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p><p>使用 if，else if，else 语句的时候，需要注意下面几点：</p><ul><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li></ul><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>一个问题</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.多个else if块之间的顺序可以改变，改变之后对程序的执行结果没有影响</span><br><span class="line">2.多个else if块之间的顺序可以改变，改变之后可能对程序的执行结果有影响</span><br><span class="line">3.多个else if块之间的顺序不可以改变，改变后程序编译不通过</span><br><span class="line">4.多个else if块之间的顺序可以改变，改变后程序编译可以通过</span><br><span class="line">其中2，4正确</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">int age = 11;</span><br><span class="line">int a = 0;</span><br><span class="line">if(age &lt; 10){</span><br><span class="line">    a += 1;</span><br><span class="line">}else if(age &lt; 15){</span><br><span class="line">    a += 2;</span><br><span class="line">}else if(age &lt; 25){</span><br><span class="line">    a += 3;</span><br><span class="line">}上面的代码  两个ifelse如果互换位置   a的值就不一样了</span><br></pre></td></tr></tbody></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p>概述</p></blockquote><p>算术运算符</p><table><thead><tr><th>+</th><th>加法 - 相加运算符两侧的值</th><th>A + B 等于 30</th></tr></thead><tbody><tr><td>-</td><td>减法 - 左操作数减去右操作数</td><td>A – B 等于 -10</td></tr><tr><td>*</td><td>乘法 - 相乘操作符两侧的值</td><td>A * B等于200</td></tr><tr><td>/</td><td>除法 - 左操作数除以右操作数</td><td>B / A等于2</td></tr><tr><td>％</td><td>取余 - 左操作数除以右操作数的余数</td><td>B%A等于0</td></tr><tr><td>++</td><td>自增: 操作数的值增加1</td><td>B++ 或 ++B 等于 21（区别详见下文）</td></tr><tr><td>–</td><td>自减: 操作数的值减少1</td><td>B– 或 –B 等于 19（区别详见下文）</td></tr></tbody></table><p>关系运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A == B）为假。</td></tr><tr><td align="left">!=</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A != B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）为假。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; = B）为假。</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;= B）为真。</td></tr></tbody></table><p>位运算符</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><blockquote><p>容易踩坑</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = -<span class="number">3</span>；</span><br><span class="line">i = ++(i++);</span><br><span class="line"><span class="comment">//-----输出？？？----</span></span><br><span class="line"><span class="comment">//答案是编译错误，因为++右侧应该是一个变量，而i++后是一个常数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><hr><blockquote><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p></blockquote><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><table><thead><tr><th align="left">修饰符</th><th align="left">当前类</th><th align="left">同一包内</th><th align="left">子孙类(同一包)</th><th align="left">子孙类(不同包)</th><th align="left">其他包</th></tr></thead><tbody><tr><td align="left"><code>public</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><code>protected</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y/N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc">说明</a>）</td><td align="left">N</td></tr><tr><td align="left"><code>default</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left"><code>private</code></td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><blockquote><p>访问控制和继承</p></blockquote><p>请注意以下方法继承的规则：</p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被继承，实际子类内存空间中有该方法或类变量的内存，但无法访问，private变量可以通过public方法间接访问。</li></ul><h3 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h3><hr><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><blockquote><p>基础</p></blockquote><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>单根继承结构</p><img src="https://gitee.com/rain-sky/images/raw/master/20210811160307.png" style="zoom: 67%;"><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意，在Java中所有类都直接或者间接继承自object类，但是interface不继承object</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>注意点</p><ul><li><p>子类拥有父类非 private 的属性、方法。</p></li><li><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p></li><li><p>子类可以用自己的方式实现父类的方法。</p></li><li><p>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类。</p></li><li><p>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</p></li><li><p>构造方法</p><ul><li><p>父类的构造方法不会被子类继承！<br>第一：构造方法语法上要求方法名必须和类名保持一致。所以如果子类继承了父类的构造方法，那么很明显两个语法就冲突了（父类构造方法的名字肯定是父类名，必然和子类名不一样）。</p></li><li><p>第二：构造方法是用来产生对象的。如果子类通过继承拥有了父类的构造方法，那么子类可以控制父类对象的产生？这也是违背场景的。</p><p>构造方法不能被重写！<br>这就不多说了，子类没有继承父类的构造方法，当然也不可能对父类构造进行重写实现了</p></li></ul></li></ul><blockquote><p>方法重写</p></blockquote><p><strong>两同两小一大原则</strong>， 方法名相同，参数类型相同，子类返回类型小于等于父类方法返回类型， 子类抛出异常小于等于父类方法抛出异常， 子类访问权限大于等于父类方法访问权限。［注意：这里的返回类型必须要在有继承关系的前提下比较］</p><p>重载 方法名必须相同，参数类型必须不同，包括但不限于一项，参数数目，参数类型，参数顺序<br>再来说说这道题 A B 都是方法名和参数相同，是重写，但是返回类型没与父类返回类型有继承关系，错误 D 返回一个类错误 c的参数类型与父类不同，所以不是重写，可以理解为广义上的重载访问权限小于父类，都会显示错误<br>虽然题目没点明一定要重载或者重写，但是当你的方法名与参数类型与父类相同时，已经是重写了，这时候如果返回类型或者异常类型比父类大，或者访问权限比父类小都会编译错误.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">foo</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="keyword">this</span>;}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">foo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    ___哪句可填入此处___</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">-------以下四句只有<span class="number">3</span>符合要求----------</span><br><span class="line"><span class="number">1</span>,<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>{}</span><br><span class="line"><span class="number">2</span>,<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="number">1</span>;}</span><br><span class="line"><span class="number">3</span>,<span class="function"><span class="keyword">public</span> A <span class="title">foo</span><span class="params">(B b)</span></span>{<span class="keyword">return</span> b;}</span><br><span class="line"><span class="number">4</span>,<span class="function"><span class="keyword">public</span> A <span class="title">foo</span><span class="params">()</span></span>{<span class="keyword">return</span> A;}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>易踩坑</p></blockquote><p>子类无法访问父类私有域成员，想要访问通过公有接口获得</p><blockquote><p>基本解释</p></blockquote><p>在《Java编程思想》P86页有这样一段话：</p><p>　　“static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途。”</p><blockquote><p>使用</p></blockquote><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>修饰方法</p><p>static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。</p><h3 id="关于final"><a href="#关于final" class="headerlink" title="关于final"></a>关于final</h3><blockquote><p>基本解释</p></blockquote><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。<strong>被 final 修饰的实例变量必须显式指定初始值。</strong></p><p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><blockquote><p>使用</p></blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> final关键字可以用来修饰引用、方法和类。修饰的类不可被继承，修饰方法不可被重写。</p><p>用final修饰变量通常分为两种情况，修饰普通基本类变量和修饰引用类型变量，也就是对象类型变量。</p><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>修饰基本变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"Manager"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">()</span></span>{</span><br><span class="line">     value = <span class="number">12</span>; <span class="comment">//将输出一个错误</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>修饰引用变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Java"</span>);</span><br><span class="line">sb.append(<span class="string">"Script"</span>);</span><br><span class="line">System.out.println(sb);  <span class="comment">//resultJavaScript</span></span><br></pre></td></tr></tbody></table></figure><p>final修饰引用表明本身不可被修改，但无法阻止引用指向的对象本身被修改</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>创建常量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONST_ONE = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="关于抽象类"><a href="#关于抽象类" class="headerlink" title="关于抽象类"></a>关于抽象类</h3><h3 id="关于接口"><a href="#关于接口" class="headerlink" title="关于接口"></a>关于接口</h3><blockquote><p>概述</p></blockquote><p>接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>集合框架体系</p></blockquote><p><img src="https://gitee.com/rain-sky/images/raw/master/20210810160733.gif"></p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h3><h2 id="错题积累"><a href="#错题积累" class="headerlink" title="错题积累"></a>错题积累</h2><blockquote><p>1</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">   Integer var1=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">   Integer var2=var1;</span><br><span class="line">   doSomething(var2);</span><br><span class="line">   System.out.print(var1.intValue());</span><br><span class="line">   System.out.print(var1==var2);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//传递的integer只是原var2的一个副本，生命周期仅限于此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(Integer integer)</span></span>{</span><br><span class="line">    integer=<span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：1true</p><p>解释：</p><p>只有对引用对象的内部做了修改，才会影响原对象，如果直接将引用修改了，则对原对象没有影响，唯一的影响就是：这个被修改的引用，现在不是原来对象的引用，而是新对象的引用。</p><p>引用传递指的是传递的时候，传递的是对象的引用。如果对引用的内部成员进行操作，则会直接影响到原对象，但是如果直接把此引用指向了其他对象，那对不起，这个引用从此以后，便与之前的对象没有任何关系，当前代表的仅仅是新指向的对象。</p><p><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>其实Java里并无什么引用传递，归根结底都是值传递</p><blockquote><p>2</p></blockquote><p>1.sleep会使当前线程睡眠指定时间，不释放锁</p><p>2.yield会使当前线程重回到可执行状态，等待cpu的调度，不释放锁</p><p>3.wait会使当前线程回到线程池中等待，释放锁，当被其他线程使用notify，notifyAll唤醒时进入可执行状态</p><p>4.当前线程调用 某线程.join（）时会使当前线程等待某线程执行完毕再结束，底层调用了wait，释放锁</p><blockquote><p>3</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">returnTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出：false</p><p>解释：try处return前会先执行finally，故直接返回false</p><blockquote><p>4</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>{</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> String sRet = <span class="string">""</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> <span class="keyword">try</span></span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"> {</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line"> }</span><br><span class="line"> }</span><br><span class="line"> <span class="keyword">catch</span> (Exception e)</span><br><span class="line"> {</span><br><span class="line"> sRet += <span class="string">"0"</span>;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> } </span><br><span class="line"> <span class="keyword">finally</span></span><br><span class="line"> {</span><br><span class="line"> sRet += <span class="string">"1"</span>;</span><br><span class="line"> }</span><br><span class="line"> sRet += <span class="string">"2"</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"> </span>{</span><br><span class="line"> func(<span class="number">1</span>);</span><br><span class="line"> func(<span class="number">2</span>);</span><br><span class="line"> System.out.println(sRet);</span><br><span class="line"> }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>输出：1201</p><p>解释：第一步，func(1)，if条件不成立，不抛出异常，catch不运行，final运行，拼串得到“1”，程序继续往下走，拼串得到“12”。 第二步，fun(2)，if条件成立，抛出异常，catch捕获异常，运行catch里面代码，拼串得到“120”，虽然有return，但是不管出不出异常，final里代码必须执行，执行final，拼串得到“1201”，然后return结束。所以最终结果“1201”。</p><blockquote><p>5</p></blockquote><p>Servlet的生命周期</p><p>1.加载：容器通过类加载器使用Servlet类对应的文件来加载Servlet</p><p>2.创建：通过<strong>调用Servlet的构造函数来创建一个Servlet实例</strong></p><p>3.初始化：通过调用Servlet的init()方法来完成初始化工作，<strong>这个方法是在Servlet已经被创建，但在向客户端提供服务之前调用。</strong></p><p>4.处理客户请求：Servlet创建后就可以处理请求，当有新的客户端请求时，Web容器都会<strong>创建一个新的线程</strong>来处理该请求。接着调用Servlet的</p><p>Service()方法来响应客户端请求（Service方***根据请求的method属性来调用doGet（）和doPost（））</p><p>5.卸载：<strong>容器在卸载Servlet之前</strong>需要调用destroy()方法，让Servlet释放其占用的资源。</p><blockquote><p>6</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> b1=<span class="number">1</span>,b2=<span class="number">2</span>,b3,b6,b8;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span> b4=<span class="number">4</span>,b5=<span class="number">6</span>,b7;</span><br><span class="line">b3=(b1+b2);  <span class="comment">/*语句1*/</span></span><br><span class="line">b6=b4+b5;    <span class="comment">/*语句2*/</span></span><br><span class="line">b8=(b1+b4);  <span class="comment">/*语句3*/</span></span><br><span class="line">b7=(b2+b5);  <span class="comment">/*语句4*/</span></span><br><span class="line">System.out.println(b3+b6);</span><br></pre></td></tr></tbody></table></figure><p>结果：语句1，3，4错误</p><p>解释：一、关于final的重要知识点;</p><p>1、final关键字可以用于成员变量、本地变量、方法以及类。</p><p>2、 final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。</p><p>3、 你不能够对final变量再次赋值。</p><p>4、 本地变量必须在声明时赋值。</p><p>5、 在匿名类中所有变量都必须是final变量。</p><p>6、 final方法不能被重写。</p><p>7、 final类不能被继承。</p><p>8、 没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。</p><p>二、数据类型转换</p><p>当使用 +、-、*、/、%、运算操作是，遵循如下规则：</p><p>只要两个操作数中有一个是double类型的，另一个将会被转换成double类型，并且结果也是double类型，如果两个操作数中有一个是float类型的，另一个将会被转换为float类型，并且结果也是float类型，如果两个操作数中有一个是long类型的，另一个将会被转换成long类型，并且结果也是long类型，否则（操作数为：byte、short、int 、char），两个数都会被转换成int类型，并且结果也是int类型。</p><p>语句 1  :（b1 + b2） 被转换为int类型 但是 b3仍为 byte ，所以出错 要么将b3转化为int 要么将（b1 + b2） 强制转换为byte类型。所以语句1错误。</p><p>语句 2：b4 、b5被声明final 所以类型是不会转换， 计算结果任然是byte  ，所以 语句2正确。</p><p>语句 3：(b1 + b4)  结果仍然转换成int  所以语句 3 错误。</p><p>语句 4 : (b2 + b5)  结果仍然转换为int ， 所以语句4错误。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note orange icon simple&quot;&gt;&lt;i class=&quot;note-icon fas fa-bullhorn&quot;&gt;&lt;/i&gt;&lt;p&gt;要踩的坑还有很多，自学者，你将去往何方~&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; </summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
