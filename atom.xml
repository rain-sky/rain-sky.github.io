<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨水的天空落了雨</title>
  
  <subtitle>rainSkyの乌托邦</subtitle>
  <link href="https://rain-sky.github.io/atom.xml" rel="self"/>
  
  <link href="https://rain-sky.github.io/"/>
  <updated>2021-07-11T09:09:54.683Z</updated>
  <id>https://rain-sky.github.io/</id>
  
  <author>
    <name>rain-Sky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表</title>
    <link href="https://rain-sky.github.io/2021/07/11/%E9%93%BE%E8%A1%A8/"/>
    <id>https://rain-sky.github.io/2021/07/11/%E9%93%BE%E8%A1%A8/</id>
    <published>2021-07-11T08:33:56.000Z</published>
    <updated>2021-07-11T09:09:54.683Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单循环链表"><a href="#单循环链表" class="headerlink" title="单循环链表"></a>单循环链表</h4><p><strong>结构示意</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711170521.png"></p><p><strong>添加操作</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711170917.png"></p><p><strong>Java实现</strong></p><p>链表类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCircleLinkedList</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Node head;<span class="comment">//头结点, 不存数据</span></span><br><span class="line">    <span class="keyword">private</span> Node tail;<span class="comment">//尾结点, 指向链表的最后一个节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCircleLinkedList</span><span class="params">()</span> </span>{</span><br><span class="line">        head = <span class="keyword">new</span> Node(Integer.MIN_VALUE, <span class="keyword">null</span>);</span><br><span class="line">        head.next = head;</span><br><span class="line">        tail = head;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到链表尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> item)</span> </span>{</span><br><span class="line">        Node no = <span class="keyword">new</span> Node(item,<span class="keyword">this</span>.head);</span><br><span class="line">        tail.next = no;</span><br><span class="line">        tail = no;</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历链表并输出元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>{</span><br><span class="line">        Node now = head.next;</span><br><span class="line">        <span class="keyword">while</span>(now!=head){</span><br><span class="line">            System.out.println(now.item);</span><br><span class="line">            now = now.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> head.next == head;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> item;</span><br><span class="line">        Node next;</span><br><span class="line">        Node(<span class="keyword">int</span> item, Node next) {</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCircleLinkedListTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        MyCircleLinkedList list = <span class="keyword">new</span> MyCircleLinkedList();</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) {</span><br><span class="line">            <span class="keyword">int</span> item = in.nextInt();</span><br><span class="line">            list.add(item);</span><br><span class="line">        }</span><br><span class="line">        list.output();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;单循环链表&quot;&gt;&lt;a href=&quot;#单循环链表&quot; class=&quot;headerlink&quot; title=&quot;单循环链表&quot;&gt;&lt;/a&gt;单循环链表&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;结构示意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/r</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://rain-sky.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="https://rain-sky.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="https://rain-sky.github.io/2021/07/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://rain-sky.github.io/2021/07/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-07-11T08:03:54.000Z</published>
    <updated>2021-07-11T08:23:05.584Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Linux目录结构介绍"><a href="#Linux目录结构介绍" class="headerlink" title="Linux目录结构介绍"></a>Linux目录结构介绍</h5><p>对<code>Linux</code>文件系统目录结构的了解是学习和掌握<code>Linux</code>系统的基础。<code>Linux</code> 文件系统是树形层次结构，具体如下图所示。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711160900.png"></p><h6 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h6><p><code>pwd(Print Working Directory )</code>：显示当前所在目录。</p><h6 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h6><p><code>cd(Change Directory)</code>: 切换当前目录。</p><p>常用特殊目录表示：</p><ul><li>cd 进入用户主目录；</li><li>cd ~ 进入用户主目录；</li><li>cd - 返回进入此目录之前所在的目录；</li><li>cd .. 返回上级目录(若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思)；</li><li>cd ../.. 返回上两级目录；</li><li>cd !$ 把上个命令的参数作为<code>cd</code>参数使用。</li></ul><h6 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h6><p><code>ls(list)</code>: 列出指定目录列表信息，如果没有参数默认列出当前目录下的所有文件和文件夹(隐藏文件和文件夹除外)。</p><p>常见<code>ls</code>命令选项:</p><ul><li>-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；</li><li>-a：显示所有文件和文件夹(包括隐藏文件/文件夹)。</li></ul><p><img src="https://gitee.com/rain-sky/images/raw/master/20210711161208.png"></p><h6 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h6><p>linux中创建文件的常用命令是<code>touch</code>，命令格式如下:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename</span><br></pre></td></tr></tbody></table></figure><p>如果想同时创建多个文件也可以使用<code>touch</code>命令完成，具体格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file1 file2 ...</span><br></pre></td></tr></tbody></table></figure><p>只需将不同的文件名用空格分隔即可完成创建多个文件。</p><h6 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h6><p><code>Linux</code>中常用的删除文件的命令是<code>rm</code>，使用格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [命令选项] filename</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f：强制删除文件或目录；</span><br><span class="line">-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</span><br><span class="line">-i：删除已有文件或目录之前先询问用户。</span><br></pre></td></tr></tbody></table></figure><p>例如，删除我们刚刚创建的文件<code>testfile</code>可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f testfilesh</span><br></pre></td></tr></tbody></table></figure><h6 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h6><p><code>Linux</code>中创建文件夹命令是<code>mkdir</code>，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [命令选项] dirname</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项： <code>-p或--parents</code> 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</p><p>例如：我们新创建一个文件夹<code>testdir</code>可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir testdir</span><br></pre></td></tr></tbody></table></figure><h6 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h6><p><code>Linux</code>中删除文件夹的命令是<code>rmdir</code>或者<code>rm -r</code>，命令格式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [命令选项] dirname</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</p><p>例如：将刚刚新创建的文件夹<code>testdir</code>删除可以使用如下命令。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir testdir</span><br></pre></td></tr></tbody></table></figure><h6 id="Linux文件和文件夹拷贝"><a href="#Linux文件和文件夹拷贝" class="headerlink" title="Linux文件和文件夹拷贝"></a>Linux文件和文件夹拷贝</h6><p><code>Linux</code>使用<code>cp</code>命令用来将一个或多个源文件或者目录复制到指定的目录中，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [命令选项] 源文件 目的文件</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在；-i：</span><br><span class="line">覆盖既有文件之前先询问用户；</span><br><span class="line">-p：保留源文件或目录的属性；</span><br><span class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理。</span><br></pre></td></tr></tbody></table></figure><p>例如：新建一个文件<code>newfile</code>和一个文件夹<code>newdir</code>，将<code>newfile</code>复制到<code>newdir</code>目录下。具体命令如下。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch newfile</span><br><span class="line">mkdir newdir</span><br><span class="line">cp newfile newdir</span><br></pre></td></tr></tbody></table></figure><h6 id="Linux文件和文件夹移动-重命名"><a href="#Linux文件和文件夹移动-重命名" class="headerlink" title="Linux文件和文件夹移动/重命名"></a>Linux文件和文件夹移动/重命名</h6><p>Linux使用<code>mv</code>命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中，命令格式如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [命令选项] 源文件 目标文件</span><br></pre></td></tr></tbody></table></figure><p>常用命令选项：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f：强行复制文件或目录，不论目标文件或目录是否已存在；</span><br><span class="line">-i：覆盖既有文件之前先询问用户；</span><br><span class="line">-p：保留源文件或目录的属性；</span><br><span class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理'。</span><br></pre></td></tr></tbody></table></figure><p>例如：新建一个文件<code>newfile</code>和一个文件夹<code>newdir</code>，将<code>newfile</code>剪切到<code>newdir</code>目录下，并重新命名为<code>newfileCpy</code>。具体命令如下。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch newfile</span><br><span class="line">mkdir newdir</span><br><span class="line">mv newfile newdir/newfileCpy</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Linux目录结构介绍&quot;&gt;&lt;a href=&quot;#Linux目录结构介绍&quot; class=&quot;headerlink&quot; title=&quot;Linux目录结构介绍&quot;&gt;&lt;/a&gt;Linux目录结构介绍&lt;/h5&gt;&lt;p&gt;对&lt;code&gt;Linux&lt;/code&gt;文件系统目录结构的了解是学习和</summary>
      
    
    
    
    
    <category term="linux" scheme="https://rain-sky.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题笔记</title>
    <link href="https://rain-sky.github.io/2021/07/03/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://rain-sky.github.io/2021/07/03/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-03T08:33:05.000Z</published>
    <updated>2021-07-05T05:58:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h3><p><strong>题目大意</strong></p><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p><strong>暴力法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++ ){</span><br><span class="line">            <span class="keyword">for</span>( j = i + <span class="number">1</span>; j &lt; nums.length ;j++){</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target ){</span><br><span class="line">                    a[<span class="number">0</span>] = i;</span><br><span class="line">                    a[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">return</span> a;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">return</span> a ;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>哈希表法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) {</span><br><span class="line">       HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(target-nums[i])){</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]{map.get(target-nums[i]),i};</span><br><span class="line">           }</span><br><span class="line">           map.put(nums[i],i);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>执行效率对比</strong></p><table><thead><tr><th><a href="https://leetcode-cn.com/submissions/detail/50157332/">通过</a></th><th>3 ms</th><th>40.8 MB</th><th>Java</th><th>2020/02/29 14:58</th><th>添加备注</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/submissions/detail/50031840/">通过</a></td><td>65 ms</td><td>38.2 MB</td><td>Java</td><td>2020/02/28 19:57</td><td>添加备注</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="面试题-01-01-判定字符是否唯一"><a href="#面试题-01-01-判定字符是否唯一" class="headerlink" title="面试题 01.01. 判定字符是否唯一"></a>面试题 01.01. 判定字符是否唯一</h3><p><strong>问题描述</strong></p><p>实现一个算法，确定一个字符串 s 的所有字符是否全都不同。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = "leetcode"</span><br><span class="line">输出: false </span><br></pre></td></tr></tbody></table></figure><p><strong>Java 解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUnique</span><span class="params">(String astr)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;astr.length();i++){</span><br><span class="line">        <span class="keyword">if</span>(astr.lastIndexOf(astr.charAt(i))!=i){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="面试题-01-02-判定是否互为字符重排"><a href="#面试题-01-02-判定是否互为字符重排" class="headerlink" title="面试题 01.02. 判定是否互为字符重排"></a>面试题 01.02. 判定是否互为字符重排</h3><p><strong>问题描述</strong></p><p>给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。</p><p>示例 1：</p><p>输入: s1 = “abc”, s2 = “bca”<br>输出: true<br>示例 2：</p><p>输入: s1 = “abc”, s2 = “bad”<br>输出: false</p><p><strong>Java解法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">CheckPermutation</span><span class="params">(String s1, String s2)</span> </span>{</span><br><span class="line">        <span class="keyword">char</span>[] chs1 = s1.toCharArray();</span><br><span class="line">        Arrays.sort(chs1);</span><br><span class="line">        <span class="keyword">char</span>[] chs2 = s2.toCharArray();</span><br><span class="line">        Arrays.sort(chs2);</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(chs1).equals(Arrays.toString(chs2));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode&quot;&gt;&lt;a href=&quot;#leetcode&quot; class=&quot;headerlink&quot; title=&quot;leetcode&quot;&gt;&lt;/a&gt;leetcode&lt;/h1&gt;&lt;h2 id=&quot;1-数组&quot;&gt;&lt;a href=&quot;#1-数组&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="算法" scheme="https://rain-sky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="https://rain-sky.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>全干工程师进阶-Vue</title>
    <link href="https://rain-sky.github.io/2021/06/24/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6-Vue/"/>
    <id>https://rain-sky.github.io/2021/06/24/%E5%85%A8%E5%B9%B2%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6-Vue/</id>
    <published>2021-06-24T02:08:45.000Z</published>
    <updated>2021-07-11T09:16:26.370Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相关链接</p><p>Vue: <a href="https://vuejs.org/">https://vuejs.org/</a></p><p>webpack：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p><p>Vue中文：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><p>Axios: <a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p><p>ElementUI : <a href="https://element-plus.gitee.io/#/zh-CN">https://element-plus.gitee.io/#/zh-CN</a> </p><p>vue-element-admin: <a href="https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#CDN">CDN</a></h3><p>对于制作原型或学习，你可以这样使用最新版本：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#NPM">NPM</a></h3><p>在用 Vue 构建大型应用时推荐使用 NPM 安装[<a href="https://cn.vuejs.org/v2/guide/installation.html#footnote-1">1]</a>。NPM 能很好地和诸如 <a href="https://webpack.js.org/">webpack</a> 或 <a href="http://browserify.org/">Browserify</a> 模块打包器配合使用。同时 Vue 也提供配套工具来开发<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件</a>。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 最新稳定版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install vue</span></span><br></pre></td></tr></tbody></table></figure><h3 id="对不同构建版本的解释"><a href="#对不同构建版本的解释" class="headerlink" title="对不同构建版本的解释"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A">对不同构建版本的解释</a></h3><p>在 <a href="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/">NPM 包的 <code>dist/</code> 目录</a>你将会找到很多不同的 Vue.js 构建版本。这里列出了它们之间的差别：</p><table><thead><tr><th align="left"></th><th align="left">UMD</th><th align="left">CommonJS</th><th align="left">ES Module (基于构建工具使用)</th><th align="left">ES Module (直接用于浏览器)</th></tr></thead><tbody><tr><td align="left"><strong>完整版</strong></td><td align="left">vue.js</td><td align="left">vue.common.js</td><td align="left">vue.esm.js</td><td align="left">vue.esm.browser.js</td></tr><tr><td align="left"><strong>只包含运行时版</strong></td><td align="left">vue.runtime.js</td><td align="left">vue.runtime.common.js</td><td align="left">vue.runtime.esm.js</td><td align="left">-</td></tr><tr><td align="left"><strong>完整版 (生产环境)</strong></td><td align="left">vue.min.js</td><td align="left">-</td><td align="left">-</td><td align="left">vue.esm.browser.min.js</td></tr><tr><td align="left"><strong>只包含运行时版 (生产环境)</strong></td><td align="left">vue.runtime.min.js</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a><a href="https://cn.vuejs.org/v2/guide/installation.html#%E6%9C%AF%E8%AF%AD">术语</a></h3><ul><li><strong>完整版</strong>：同时包含编译器和运行时的版本。</li><li><strong>编译器</strong>：用来将模板字符串编译成为 JavaScript 渲染函数的代码。</li><li><strong>运行时</strong>：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</li></ul><blockquote><p>学习参照官方文档:<a href="https://vuejs.org/">https://vuejs.org/</a></p></blockquote><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><strong>v-if</strong></p><p>v-if指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>也可以用 v-else 添加一个“else 块”：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>v-eles 必须跟在v-if 之后，否则不被识别</p></blockquote><p>在 template元素上使用 v-if 条件渲染分组</p><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>v-show</strong></p><p>另一个用于根据条件展示元素的选项是 v-show指令。用法大致一样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show只是简单地切换元素的 CSS property display。</p><p><strong>v-show vs v-if</strong></p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p><strong>使用v-for 把数组对应为一组元素进行渲染</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">              {{item.message}}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:{</span><br><span class="line">                items:[</span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"你好世界"</span>},</span></span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"樱花庄的宠物女孩"</span>},</span></span><br><span class="line"><span class="javascript">                    {<span class="attr">message</span>:<span class="string">"青出于蓝"</span>}</span></span><br><span class="line">                ]</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h3><h4 id="一个组件的实例"><a href="#一个组件的实例" class="headerlink" title="一个组件的实例"></a>一个组件的实例</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, {</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me {{ count }} times.&lt;/button&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <button-counter>。我们可以在一个通过 new Vue`创建的 Vue 根实例中，把这个组件作为自定义元素来使用.</button-counter></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p></blockquote><h4 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h4><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: {</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过prop向子组件传递数据"><a href="#通过prop向子组件传递数据" class="headerlink" title="通过prop向子组件传递数据"></a>通过prop向子组件传递数据</h4><p>如创建一个博文组件为例，需要向子组件传递博文信息,props中属性无上限</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, {</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;{{ title }}&lt;/h3&gt;'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title=<span class="string">"My journey with Vue"</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></tbody></table></figure><p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个博文的数组：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue({</span><br><span class="line">  el: <span class="string">'#blog-post-demo'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    posts: [</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'My journey with Vue'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Blogging with Vue'</span> },</span><br><span class="line">      { <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Why Vue is so fun'</span> }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>并想要为每篇博文渲染一个组件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-for="post in posts"</span><br><span class="line">  v-bind:key="post.id"</span><br><span class="line">  v-bind:title="post.title"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如上所示，你会发现我们可以使用 <code>v-bind</code> 来动态传递 prop。这在你一开始不清楚要渲染的具体内容，比如<a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-component-blog-post-example">从一个 API 获取博文列表</a>的时候，是非常有用的。</p><h4 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h4><p>如下例子:</p><p>在我们开发 <blog-post> 组件时，它的一些功能可能要求我们和父级组件进行沟通。例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</blog-post></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue插槽,自定义事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前端， --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 由于组件无法访问到Vue实例中的方法，解决办法，自定义事件 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在视图中自定义事件绑定到组件中的方法，并把自定义事件赋值为Vue实例中的方法 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件可以通过调用内建的 $emit 方法并传入事件名称来触发一个事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blog-posts-events-demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"{ fontSize: postFontSize + 'em' }"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 让我们来自定义一个enlarge-text事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-for</span>=<span class="string">"post in posts"</span> <span class="attr">v-bind:key</span>=<span class="string">"post.id"</span> <span class="attr">v-bind:post</span>=<span class="string">"post"</span> <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += 0.1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'blog-post'</span>, {</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">'post'</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="javascript">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"blog-post"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">{{ <span class="name">post.title</span> }}</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text')"</span>&gt;</span></span></span></span><br><span class="line">                    Enlarge text</span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"post.content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">                `</span><br><span class="line">    })</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#blog-posts-events-demo'</span>,</span></span><br><span class="line">      data: {</span><br><span class="line">        posts: [</span><br><span class="line"><span class="javascript">          { <span class="attr">id</span>: <span class="number">1001</span>, <span class="string">'title'</span>: <span class="string">"有手你就行"</span>, <span class="attr">content</span>: <span class="string">"好吧，有手，但还是不太行呢~"</span> }</span></span><br><span class="line">        ],</span><br><span class="line">        postFontSize: 1</span><br><span class="line">      },</span><br><span class="line">    })</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click="$emit('enlarge-text', 0.1)"&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text="postFontSize += $event"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当这个是个函数的时候</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text="onEnlargeText"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么这个值将会作为第一个参数传入这个方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: {</span><br><span class="line">  onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用v-model</h4><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>等价于</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-bind:value="searchText"</span><br><span class="line">  v-on:input="searchText = $event.target.value"</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  {{ message.split('').reverse().join('') }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 message 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><p>For example</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- methods中的是方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>methods中的nowTime1: {{nowTime1()}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 计算属性，重点在于属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>computed中的nowTime2: {{nowTime2}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// Model</span></span></span><br><span class="line">            data:{</span><br><span class="line"><span class="javascript">                message:<span class="string">"hello world"</span>,</span></span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line"><span class="javascript">                nowTime1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            computed:{</span><br><span class="line"><span class="javascript">                <span class="comment">// 当计算属性中有改变才会重新计算，相当于缓存</span></span></span><br><span class="line"><span class="javascript">                nowTime2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a><a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%BC%93%E5%AD%98-vs-%E6%96%B9%E6%B3%95">计算属性缓存 vs 方法</a></h3><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Reversed message: "{{ reversedMessage() }}"&lt;/p&gt;</span><br><span class="line">// 在组件中</span><br><span class="line">methods: {</span><br><span class="line">  reversedMessage: function () {</span><br><span class="line">    return this.message.split('').reverse().join('')</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: {</span><br><span class="line">  now: function () {</span><br><span class="line">    return Date.now()</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p><h3 id="为什么要使用计算属性呢"><a href="#为什么要使用计算属性呢" class="headerlink" title="为什么要使用计算属性呢"></a>为什么要使用计算属性呢</h3><blockquote><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p></blockquote><h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a><a href="https://cn.vuejs.org/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95">对象语法</a></h3><p>我们可以传给 v-bind:class 一个对象，以动态地切换 class：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class="{ active: isActive }"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>上面的语法表示active 这个 class 存在与否将取决于数据 property isActive 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a>。</p><p>你可以在对象中传入更多字段来动态切换多个 class。此外，v-bind:class 指令也可以与普通的 class attribute 共存。当有如下模板：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  class="static"</span><br><span class="line">  v-bind:class="{ active: isActive, 'text-danger': hasError }"</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>和如下 data：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: {</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果渲染为：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当 isActive或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError的值为 true，class 列表将变为 “static active text-danger”。</p><hr><h2 id="vue插槽与自定义事件"><a href="#vue插槽与自定义事件" class="headerlink" title="vue插槽与自定义事件"></a>vue插槽与自定义事件</h2><blockquote><p>For Example</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue插槽,自定义事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前端，纯视图 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 由于组件无法访问到Vue实例中的方法，解决办法，自定义事件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在视图中自定义事件绑定到组件中的方法，并把自定义事件赋值为Vue实例中的方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on可缩写为@，v-bind：可缩写为: --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">"todo-title"</span> <span class="attr">v-bind:title</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">"todo-items"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span> <span class="attr">v-on:remove</span>=<span class="string">"removeItem(index)"</span> <span class="attr">v-bind:item</span>=<span class="string">"item"</span> <span class="attr">v-bind:index</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo"</span>, {</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo-title"</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo-items"</span> &gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo-title"</span>, {</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'title'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">{{<span class="name">title</span>}}</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">"todo-items"</span>,{</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'item'</span>,<span class="string">'index'</span>],</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 无法在组件里掉用到下面vm的remove方法，怎么办，通过前端自定义事件搭桥</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            template:'<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">{{<span class="name">index</span>}}</span><span class="xml">：</span><span class="template-variable">{{<span class="name">item</span>}}</span><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>',</span></span></span><br><span class="line">            methods:{</span><br><span class="line"><span class="javascript">                remove:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// removeItem(idnex)，写法错误，掉用不到vm实例中的方法</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.$emit(<span class="string">"remove"</span>,index);</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:{</span><br><span class="line"><span class="javascript">                title:<span class="string">"番剧"</span>,</span></span><br><span class="line">                items:[</span><br><span class="line"><span class="javascript">                    <span class="string">"你好世界"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"樱花庄的宠物女孩"</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="string">"青出于蓝"</span></span></span><br><span class="line">                ]</span><br><span class="line">            },</span><br><span class="line">            methods: {</span><br><span class="line"><span class="javascript">                removeItem:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">        })</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue router"></a>vue router</h2><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h2><p>开始你的第一个vue-cli开发</p><blockquote><ul><li><p>全局安装淘宝镜像加速器 npm install cnpm -g</p></li><li><p>安装vue-cli    cnpm install vue-cli -g (vue3.0后为npm install -g @vue/cli)</p></li><li><p>初始化一个 vue项目： vue init webpack appname(vue3.0后为 vue create appname)</p></li><li><p>如果使用的为3.0版本的 vue-cli ：接下来直接 cd appname然后npm run server</p></li><li><p>如果使用的为2.0版本的 vue-cli 还需要进入项目目录下以后运行 npm install（3.0版本依赖自动下载node_modules）然后 npm run dev</p></li></ul></blockquote><h2 id="Axios异步通信"><a href="#Axios异步通信" class="headerlink" title="Axios异步通信"></a>Axios异步通信</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中，主要作用用于实现Ajax异步通信。</p><blockquote><p>Vue坚持关注度分离原则，只关注于视图层，因此并不提供网络通信功能，官方推荐使用Axios，减少使用jquery，因为jQuery操作Dom频繁。</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>使用 npm:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install axios</span></span><br></pre></td></tr></tbody></table></figure><p>使用 bower:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bower install axios</span></span><br></pre></td></tr></tbody></table></figure><p>使用 cdn:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>学习参见官方文档：<a href="http://www.axios-js.com/zh-cn/docs/index.html">http://www.axios-js.com/zh-cn/docs/index.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;相关链接&lt;/p&gt;
&lt;p&gt;Vue: &lt;a href=&quot;https://vuejs.org/&quot;&gt;https://vuejs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;webpack：&lt;a href=&quot;https://webpack.docschina.org/&quot;</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://rain-sky.github.io/tags/Vue/"/>
    
    <category term="前端" scheme="https://rain-sky.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ajax初见</title>
    <link href="https://rain-sky.github.io/2021/06/22/Ajax%E5%88%9D%E8%A7%81/"/>
    <id>https://rain-sky.github.io/2021/06/22/Ajax%E5%88%9D%E8%A7%81/</id>
    <published>2021-06-22T01:47:34.000Z</published>
    <updated>2021-06-23T01:29:17.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax初见"><a href="#Ajax初见" class="headerlink" title="Ajax初见"></a>Ajax初见</h1><h2 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h2><p>Ajax即 Asynchronous JavaScript and XML（异步的JavaScript和xml），实际上数据交换通常都是json。</p><p>AJAX 是一种用于创建快速动态网页的技术。</p><p>AJAX 通过在后台与服务器进行少量数据交换，使网页实现异步更新。这意味着可以在不重载整个页面的情况下，对网页的某些部分进行更新。</p><p>传统的网页（不使用 AJAX）如果需要更新内容，必须重载整个页面。</p><h2 id="使用ajax"><a href="#使用ajax" class="headerlink" title="使用ajax"></a>使用ajax</h2><h3 id="原生js实现"><a href="#原生js实现" class="headerlink" title="原生js实现"></a>原生js实现</h3><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>XMLHttpRequest对象是ajax的基础,XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。目前所有浏览器都支持XMLHttpRequest</p><table><thead><tr><th>方  法</th><th>描  述</th></tr></thead><tbody><tr><td>abort()</td><td>停止当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>把HTTP请求的所有响应首部作为键/值对返回</td></tr><tr><td>getResponseHeader(“header”)</td><td>返回指定首部的串值</td></tr><tr><td>open(“method”,”URL”,[asyncFlag],[“userName”],[“password”])</td><td>建立对服务器的调用。method参数可以是GET、POST或PUT。url参数可以是相对URL或绝对URL。这个方法还包括3个可选的参数，是否异步，用户名，密码</td></tr><tr><td>send(content)</td><td>向服务器发送请求</td></tr><tr><td>setRequestHeader(“header”, “value”)</td><td>把指定首部设置为所提供的值。在设置任何首部之前必须先调用open()。设置header并和请求一起发送 (‘post’方法一定要 )</td></tr></tbody></table><h4 id="五步使用法"><a href="#五步使用法" class="headerlink" title="五步使用法"></a>五步使用法</h4><p>　　1.创建XMLHTTPRequest对象</p><p>　　2.使用open方法设置和服务器的交互信息</p><p>　　3.设置发送的数据，开始和服务器端交互</p><p>　　4.注册事件</p><p>　　5.更新界面</p><h4 id="post方法实例"><a href="#post方法实例" class="headerlink" title="post方法实例"></a>post方法实例</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建异步对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">//设置请求的类型及url</span></span><br><span class="line"><span class="comment">//post请求一定要添加请求头才行不然会报错</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"> xhr.open(<span class="string">'post'</span>, <span class="string">'02.post.php'</span> );</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.send(<span class="string">'name=fox&amp;age=18'</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 这步为判断服务器是否正确响应</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">}</span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line">}</span><br><span class="line"><span class="javascript">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="javascript">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span></span><br><span class="line">xmlhttp.send();</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用jquery提供的Ajax实现-springMvc环境"><a href="#使用jquery提供的Ajax实现-springMvc环境" class="headerlink" title="使用jquery提供的Ajax实现(springMvc环境)"></a>使用jquery提供的Ajax实现(springMvc环境)</h3><blockquote><p>让我们来使用Ajax动态的给前端页面加点小东西吧~</p></blockquote><h3 id="创建Demo"><a href="#创建Demo" class="headerlink" title="创建Demo"></a>创建Demo</h3><p>至少有个最基本的亚子，对吧~</p><img src="https://gitee.com/rain-sky/images/raw/master/20210622104900.png" style="zoom:50%;"><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>给前端传点数据，视图控制咱不做(￢︿̫̿￢☆)</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTest</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/t2")</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">ajaxT2</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"PanPan"</span>,<span class="number">12</span>,<span class="string">"男"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"DanDan"</span>,<span class="number">13</span>,<span class="string">"女"</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h3><blockquote><p>我只想让局部的table增加点数据，但我又不想整个页面刷新，好烦恼，ajax来帮忙(づ￣ 3￣)づ</p></blockquote><p>点击button时发起一个Ajax的post请求，局部刷新table。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        $.post({</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 请求url --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          url: <span class="string">"${pageContext.request.contextPath}/t2"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 数据交互 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          data:{<span class="string">'name'</span>:<span class="string">"hello"</span>},</span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 回调函数，同样失败也有一个error,此处未写出 --&gt;</span></span></span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> html = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++){</span></span><br><span class="line"><span class="javascript">              html+=<span class="string">"&lt;tr&gt;"</span>+</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].name + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].age + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;td&gt;"</span> + data[i].sex + <span class="string">"&lt;/td&gt;"</span> +</span></span><br><span class="line"><span class="javascript">                      <span class="string">"&lt;/tr&gt;"</span></span></span><br><span class="line">            }</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(html);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#ajaxTest"</span>).html(html);</span></span><br><span class="line">        }</span><br><span class="line">        });</span><br><span class="line">      }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"a()"</span>&gt;</span>憋碰我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"ajaxTest"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><blockquote><p>启动汤姆猫，访问测试</p></blockquote><p>这是他一开始的亚子~</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110307.png"></p><p>当我们触发这个点击事件(●’◡’●)</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110454.png"></p><p><code>惊喜的发现我们的table他更新了，但是页面并未刷新，测试成功了。</code></p><h3 id="过程试探"><a href="#过程试探" class="headerlink" title="过程试探"></a>过程试探</h3><p>打开控制台看看这个过程发生了啥，xhr请求，是个啥？(・∀・(・∀・(・∀・*)？ajax请求，一种异步请求。</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110836.png"></p><p>详细</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210622110854.png"></p><blockquote><p>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果我们可以再来处理这个事。（当然，在其他语境下这个解释可能就不对了）<br>这个很重要，如果不是这样的话，我们点完按钮，页面就会死在那里，其他的数据请求不会往下走了。这样比等待刷新似乎更加讨厌。<br>（虽然提供异步通讯功能的组件默认情况下都是异步的，但它们也提供了同步选项，如果你好奇把那个选项改为false的话，你的页面就会死在那里）<br>xml只是一种数据格式，在这件事里并不重要，我们在更新一行字的时候理论上说不需要这个格式，但如果我们更新很多内容，那么格式化的数据可以使我们有条理地去实现更新。</p><p>现在大部分人其实是用JSON这种格式来代替XML的，因为前者更加简洁，据说目前的解析速度也更快。多快好省，能省则省啊。</p><p><strong>总结：只要是JS调用异步通讯组件并使用格式化的数据来更新web页面上的内容或操作过程，那么我们用的方法就可算是AJAX。</strong></p><p>作者：食铁兽<br>链接：<a href="https://www.zhihu.com/question/20874229/answer/24708736">https://www.zhihu.com/question/20874229/answer/24708736</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax初见&quot;&gt;&lt;a href=&quot;#Ajax初见&quot; class=&quot;headerlink&quot; title=&quot;Ajax初见&quot;&gt;&lt;/a&gt;Ajax初见&lt;/h1&gt;&lt;h2 id=&quot;什么是ajax&quot;&gt;&lt;a href=&quot;#什么是ajax&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Ajax" scheme="https://rain-sky.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Java小积累</title>
    <link href="https://rain-sky.github.io/2021/05/26/Java%E5%B0%8F%E7%A7%AF%E7%B4%AF/"/>
    <id>https://rain-sky.github.io/2021/05/26/Java%E5%B0%8F%E7%A7%AF%E7%B4%AF/</id>
    <published>2021-05-26T01:37:27.000Z</published>
    <updated>2021-05-26T01:40:39.387Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange icon simple"><i class="note-icon fas fa-bullhorn"></i><p>要踩的坑还有很多，自学者，你将去往何方~</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note orange icon simple&quot;&gt;&lt;i class=&quot;note-icon fas fa-bullhorn&quot;&gt;&lt;/i&gt;&lt;p&gt;要踩的坑还有很多，自学者，你将去往何方~&lt;/p&gt;
&lt;/div&gt;

</summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅析==,equals,hashcode</title>
    <link href="https://rain-sky.github.io/2021/04/27/%E6%B5%85%E6%9E%90-equals-hashcode/"/>
    <id>https://rain-sky.github.io/2021/04/27/%E6%B5%85%E6%9E%90-equals-hashcode/</id>
    <published>2021-04-27T00:52:45.000Z</published>
    <updated>2021-05-16T08:31:31.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅析-equals-hashcode"><a href="#浅析-equals-hashcode" class="headerlink" title="浅析==,equals,hashcode"></a>浅析==,equals,hashcode</h1><h2 id="情景回顾"><a href="#情景回顾" class="headerlink" title="情景回顾"></a>情景回顾</h2><p>有一问曰：两个obj，如果equals相等，hashCode()一定相等(符合代码规范的情况下)</p><p>首先：</p><ol><li>== 比较的是两个对象在java虚拟机中的地址</li><li>equals 默认比较的也是两个对象在java虚拟机中的地址，但是我们可以对一个对象的equals方法进行重写，而“==”我们无法重写</li><li>hashcode 返回一个对象在java虚拟机中的地址</li></ol><h2 id="JDK-8中Object类中对于equals与hashcode方法的描述"><a href="#JDK-8中Object类中对于equals与hashcode方法的描述" class="headerlink" title="JDK 8中Object类中对于equals与hashcode方法的描述"></a>JDK 8中Object类中对于equals与hashcode方法的描述</h2><blockquote><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></tbody></table></figure><p>指示一些其他对象是否等于此。</p><p><code>equals</code>方法在非空对象引用上实现等价关系： </p><ul><li><em>自反性</em> ：对于任何非空的参考值<code>x</code> ，  <code>x.equals(x)</code>应该返回<code>true</code> 。 </li><li>它是<em>对称的</em> ：对于任何非空引用值<code>x</code>和<code>y</code> ，  <code>x.equals(y)</code>应该返回<code>true</code>当且仅当<code>y.equals(x)</code>回报<code>true</code>  。 </li><li><em>传递性</em> ：对于任何非空引用值<code>x</code> ， <code>y</code>和<code>z</code>  ，如果<code>x.equals(y)</code>回报<code>true</code>个<code>y.equals(z)</code>回报<code>true</code>  ，然后<code>x.equals(z)</code>应该返回<code>true</code> 。 </li><li>它是<em>一致的</em> ：对于任何非空引用值<code>x</code>和<code>y</code>  ，多次调用<code>x.equals(y)</code>始终返回<code>true</code>或始终返回<code>false</code>  ，没有设置中使用的信息<code>equals</code>比较上的对象被修改。 </li><li>对于任何非空的参考值<code>x</code> ，  <code>x.equals(null)</code>应该返回<code>false</code> 。 </li></ul><p>该<code>equals</code>类方法<code>Object</code>实现对象上差别可能性最大的相等关系;  也就是说，对于任何非空的参考值<code>x</code>和<code>y</code>  ，当且仅当<code>x</code>和<code>y</code>引用相同的对象（ <code>x ==  y</code>具有值<code>true</code> ）时，该方法返回<code>true</code> 。 </p><p>请注意，无论何时覆盖该方法，通常需要覆盖<code>hashCode</code>方法，以便维护<code>hashCode</code>方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。 </p><ul><li><p>参数 </p><p><code>obj</code> - 与之比较的参考对象。 </p></li><li><p>结果 </p><p><code>true</code>如果此对象与obj参数相同;  <code>false</code>否则。 </p></li></ul></blockquote><blockquote><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br></pre></td></tr></tbody></table></figure><p>返回对象的哈希码值。支持这种方法是为了散列表，如<a href="../../java/util/HashMap.html"><code>HashMap</code></a>提供的那样 。</p><p><code>hashCode</code>的总合同是： </p><ul><li>只要在执行Java应用程序时多次在同一个对象上调用该方法，  <code>hashCode</code>方法必须始终返回相同的整数，前提是修改了对象中<code>equals</code>比较中的信息。  该整数不需要从一个应用程序的执行到相同应用程序的另一个执行保持一致。 </li><li>如果根据<code>equals(Object)</code>方法两个对象相等，则在两个对象中的每个对象上调用<code>hashCode</code>方法必须产生相同的整数结果。 </li><li><em>不</em>要求如果两个对象根据equals(java.lang.Object)方法不相等，那么在两个对象中的每个对象上调用hashCode方法必须产生不同的整数结果。  但是，程序员应该意识到，为不等对象生成不同的整数结果可能会提高哈希表的性能。 </li></ul><p>尽可能多的合理实用，由类别Object定义的hashCode方法确实为不同对象返回不同的整数。  （这通常通过将对象的内部地址转换为整数来实现，但Java的编程语言不需要此实现技术。） </p><ul><li><p>结果 </p><p>该对象的哈希码值。 </p></li></ul></blockquote><hr><p><strong>由以上描述可知：</strong></p><blockquote><p><strong>hashCode是所有java对象的固有方法，如果不重载的话，返回的实际上是该对象在jvm的堆上的内存地址，而不同对象的内存地址肯定不同，所以这个hashCode也就肯定不同</strong>了。如果重载了的话，由于采用的算法的问题，有可能导致两个不同对象的hashCode相同。</p><p>两个对象equals（）相同，那么hashcode肯定也相同，但equals()不同，hashcode不一定不同。</p><p>而且，还需要注意一下两点：</p><p>1）hashCode和equals两个方法是有语义关联的，它们需要满足：</p><p>A.equals(B)==true –&gt; A.hashCode()==B.hashCode()</p><p>因此重载其中一个方法时也需要将另一个也重载。</p></blockquote><p>附上String类equals源码实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) {</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) {</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅析-equals-hashcode&quot;&gt;&lt;a href=&quot;#浅析-equals-hashcode&quot; class=&quot;headerlink&quot; title=&quot;浅析==,equals,hashcode&quot;&gt;&lt;/a&gt;浅析==,equals,hashcode&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ssm整合</title>
    <link href="https://rain-sky.github.io/2021/04/24/ssm%E6%95%B4%E5%90%88/"/>
    <id>https://rain-sky.github.io/2021/04/24/ssm%E6%95%B4%E5%90%88/</id>
    <published>2021-04-24T01:49:32.000Z</published>
    <updated>2021-06-06T14:05:26.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssm整合流程"><a href="#ssm整合流程" class="headerlink" title="ssm整合流程"></a>ssm整合流程</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="1-1-数据库建立"><a href="#1-1-数据库建立" class="headerlink" title="1.1 数据库建立"></a>1.1 数据库建立</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> ssmbuild;</span><br><span class="line"><span class="keyword">USE</span> ssmbuild;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`books`</span>(</span><br><span class="line"><span class="string">`bookID`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">"书id"</span>,</span><br><span class="line"><span class="string">`bookName`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">"书名"</span>,</span><br><span class="line"><span class="string">`bookCounts`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">"数量"</span>,</span><br><span class="line"><span class="string">`detail`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">"描述"</span>,</span><br><span class="line"><span class="keyword">KEY</span> <span class="string">`bookID`</span>(<span class="string">`bookID`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`books`</span> <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'Spring'</span>,<span class="number">1</span>,<span class="string">'从入门到放弃'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'MySQL'</span>,<span class="number">10</span>,<span class="string">'从删库到跑路'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'Linux'</span>,<span class="number">5</span>,<span class="string">'从进门到进牢'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-在IDEA中连接数据库-测试连接成功"><a href="#1-2-在IDEA中连接数据库-测试连接成功" class="headerlink" title="1.2 在IDEA中连接数据库(测试连接成功)"></a>1.2 在IDEA中连接数据库(测试连接成功)</h3><p><img src="https://gitee.com/rain-sky/images/raw/master/20210428140125.png"></p><h3 id="1-3-编写数据库实体映射类"><a href="#1-3-编写数据库实体映射类" class="headerlink" title="1.3 编写数据库实体映射类"></a>1.3 编写数据库实体映射类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> boolID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> boolID, String bookName, <span class="keyword">int</span> bookCounts, String detail)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.boolID = boolID;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">        <span class="keyword">this</span>.detail = detail;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBoolID</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> boolID;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoolID</span><span class="params">(<span class="keyword">int</span> boolID)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.boolID = boolID;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBookCounts</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookCounts;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookCounts</span><span class="params">(<span class="keyword">int</span> bookCounts)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDetail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDetail</span><span class="params">(String detail)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.detail = detail;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The book: "</span>+<span class="keyword">this</span>.bookName+<span class="string">", "</span>+<span class="keyword">this</span>.boolID+<span class="string">", "</span>+<span class="keyword">this</span>.bookCounts+<span class="string">", "</span>+<span class="keyword">this</span>.detail;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-maven配置，依赖导入以及资源过滤"><a href="#2-maven配置，依赖导入以及资源过滤" class="headerlink" title="2 maven配置，依赖导入以及资源过滤"></a>2 maven配置，依赖导入以及资源过滤</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>BookManage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用Jackson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-配置DAO层"><a href="#3-配置DAO层" class="headerlink" title="3. 配置DAO层"></a>3. 配置DAO层</h2><h3 id="3-1-编写外部数据源配置database-properties"><a href="#3-1-编写外部数据源配置database-properties" class="headerlink" title="3.1 编写外部数据源配置database.properties"></a>3.1 编写外部数据源配置database.properties</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123123</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-编写mybatis-config-xml"><a href="#3-2-编写mybatis-config-xml" class="headerlink" title="3.2 编写mybatis-config.xml"></a>3.2 编写mybatis-config.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.chen.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一般我们会在mybatis-config.xml做set的配置，如配置日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-编写spring-dao-xml"><a href="#3-3-编写spring-dao-xml" class="headerlink" title="3.3 编写spring-dao.xml"></a>3.3 编写spring-dao.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.dao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssmbuild?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/chen/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.chen.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-编写DAO层接口"><a href="#3-4-编写DAO层接口" class="headerlink" title="3.4 编写DAO层接口"></a>3.4 编写DAO层接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chen.pojo.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">( <span class="meta">@Param("bookId")</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function">Book <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param("bookId")</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-编写接口对应的mapper"><a href="#3-5-编写接口对应的mapper" class="headerlink" title="3.5 编写接口对应的mapper"></a>3.5 编写接口对应的mapper</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.chen.dao.BookMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertBook"</span> <span class="attr">parameterType</span>=<span class="string">"com.chen.pojo.Book"</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books values (#{bookId},#{bookName},#{bookCounts},#{detail});</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete * from ssmbuild.books where bookID = #{bookId};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"com.chen.pojo.Book"</span>&gt;</span></span><br><span class="line">        update ssmbuild.books set bookID = #{bookId},bookCounts = #{bookCounts},bookName = #{bookName},detail = #{detail};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.chen.pojo.Book"</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books where bookID = #{bookId};</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"com.chen.pojo.Book"</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4-配置service层"><a href="#4-配置service层" class="headerlink" title="4 配置service层"></a>4 配置service层</h2><h3 id="4-1-配置spring-service-xml"><a href="#4-1-配置spring-service-xml" class="headerlink" title="4.1 配置spring-service.xml"></a>4.1 配置spring-service.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描所有service,交给springIOC容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-编写service层接口"><a href="#4-2-编写service层接口" class="headerlink" title="4.2 编写service层接口"></a>4.2 编写service层接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.servises;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chen.pojo.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">( <span class="meta">@Param("bookId")</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function">Book <span class="title">queryBookById</span><span class="params">(<span class="meta">@Param("bookId")</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-编写接口实现类"><a href="#4-3-编写接口实现类" class="headerlink" title="4.3 编写接口实现类"></a>4.3 编写接口实现类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chen.servises;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chen.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.chen.pojo.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookMapper</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        bookMapper.insertBook(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        bookMapper.deleteBookById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        bookMapper.updateBook(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-配置springMvc"><a href="#5-配置springMvc" class="headerlink" title="5 配置springMvc"></a>5 配置springMvc</h2><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-配置web-xml"><a href="#6-配置web-xml" class="headerlink" title="6 配置web.xml"></a>6 配置web.xml</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring的过滤器，解决乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>备用spring 总配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.dao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssmbuild?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/chen/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.chen.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssm整合流程&quot;&gt;&lt;a href=&quot;#ssm整合流程&quot; class=&quot;headerlink&quot; title=&quot;ssm整合流程&quot;&gt;&lt;/a&gt;ssm整合流程&lt;/h1&gt;&lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="spring" scheme="https://rain-sky.github.io/tags/spring/"/>
    
    <category term="mybatis" scheme="https://rain-sky.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>问题集锦</title>
    <link href="https://rain-sky.github.io/2021/04/24/%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>https://rain-sky.github.io/2021/04/24/%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2021-04-24T00:48:41.000Z</published>
    <updated>2021-04-24T00:50:12.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字节跳动技术一面"><a href="#字节跳动技术一面" class="headerlink" title="字节跳动技术一面"></a><strong>字节跳动技术一面</strong></h2><ul><li>讲一下线程参数的含义</li><li>Innodb的索引实现</li><li>为什么是B+树？</li><li>Redis的使用，分布式锁的实现</li><li>操作系统虚拟内存换页的过程</li><li>TCP三次握手</li><li>volatile关键字的作用</li><li>乐观锁、悲观锁</li><li>之前用过哪些设计模式？</li><li>算法题：滑动窗口</li></ul><h2 id="字节跳动技术二面"><a href="#字节跳动技术二面" class="headerlink" title="字节跳动技术二面"></a><strong>字节跳动技术二面</strong></h2><ul><li>说一下B树和B+树的区别</li><li>说一下HashMap的实现，扩容机制，扩容时如何保证可操作？</li><li>Redis扩容机制（渐进式单线程扩容）</li><li>Spring IoC的原理，如何实现，如何解决循环依赖？</li><li>两线程对变量i进行加1操作，结果如何？为什么？怎么解决？</li><li>CAS概念、原子类实现原理</li><li>synchronize底层实现，如何实现Lock？</li><li>AQS有什么特点？</li><li>手写项目中某个模块代码。</li><li>介绍各种网络协议。</li><li>DNS在网络层用哪个协议，为什么。</li><li>介绍HTTPS协议，详述SSL建立连接过程。</li><li>代码题：反转单链表。</li><li>代码题：复杂链表复制。</li></ul><h2 id="字节跳动技术三面"><a href="#字节跳动技术三面" class="headerlink" title="字节跳动技术三面"></a><strong>字节跳动技术三面</strong></h2><ul><li>算法题多到爆炸，感觉是算法专场，宇宙条果真名不虚传</li><li>说一下Java垃圾回收机制</li><li>64匹马，8个赛道，找最快的4匹马</li><li>给出两个升序数组A、B和长度m、n，求第k个大的</li><li>给出数组A，长度为n，数组中元素的值位于[0, n - 1]之间，求是否有重复元素</li><li>讲一下多线程与多进程区别</li><li>JVM中什么时候会进行垃圾回收？什么样的对象是可以回收的？</li><li>Spring主要思想是什么？</li></ul><h2 id="字节跳动技术四面"><a href="#字节跳动技术四面" class="headerlink" title="字节跳动技术四面"></a><strong>字节跳动技术四面</strong></h2><ul><li>场景题目：设计一个短域名服务：短信存不了太长网站，需要弄成短域名，你该如何设计一个服务，可以为全国的网址服务。</li><li>TCP为什么是三次握手四次挥手？</li><li>数据库的隔离级别</li><li>sql题，写了个连表查询外加模糊查询</li><li>算法：镜像二叉树 ……</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字节跳动技术一面&quot;&gt;&lt;a href=&quot;#字节跳动技术一面&quot; class=&quot;headerlink&quot; title=&quot;字节跳动技术一面&quot;&gt;&lt;/a&gt;&lt;strong&gt;字节跳动技术一面&lt;/strong&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;讲一下线程参数的含义&lt;/li&gt;
&lt;li&gt;Inn</summary>
      
    
    
    
    
    <category term="面试" scheme="https://rain-sky.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>springMvc执行流程</title>
    <link href="https://rain-sky.github.io/2021/04/12/springMvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>https://rain-sky.github.io/2021/04/12/springMvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</id>
    <published>2021-04-12T02:21:46.000Z</published>
    <updated>2021-05-16T05:57:37.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springMvc执行流程"><a href="#springMvc执行流程" class="headerlink" title="springMvc执行流程"></a>springMvc执行流程</h1><h2 id="spring4-2-4原文档图"><a href="#spring4-2-4原文档图" class="headerlink" title="spring4.2.4原文档图"></a>spring4.2.4原文档图</h2><p><img src="https://gitee.com/rain-sky/images/raw/master/20210414220342.png"></p><p><code>前置控制器，springMvc核心</code></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210419100723.png"></p><p>参照：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210419102208.png"></p><h2 id="springMvc执行流程-1"><a href="#springMvc执行流程-1" class="headerlink" title="springMvc执行流程"></a>springMvc执行流程</h2><h3 id="准备概要："><a href="#准备概要：" class="headerlink" title="准备概要："></a>准备概要：</h3><h4 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>SpringMVC-01-servlet<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springMVC-02-hellomvc<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置web-xml，注册DispatcherServlet"><a href="#配置web-xml，注册DispatcherServlet" class="headerlink" title="配置web.xml，注册DispatcherServlet"></a>配置web.xml，注册DispatcherServlet</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>编写springMvc-servlet.xml，此处使用注解方式实现</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 扫描指定包下的所有controller --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chen.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让springMvc不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加处理映射器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加处理适配器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加视图解析器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="编写自己的controller"><a href="#编写自己的controller" class="headerlink" title="编写自己的controller"></a>编写自己的controller</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServlertContorller</span></span>{</span><br><span class="line">    <span class="meta">@RequestMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPageHello</span><span class="params">(Model model)</span></span>{</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello world!"</span>);</span><br><span class="line">        <span class="comment">//返回需要拼接的视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="执行流程分析"><a href="#执行流程分析" class="headerlink" title="执行流程分析"></a>执行流程分析</h2><ol><li>用户发起请求，此处以localhost:8080\hello 为例</li><li>前端控制器DispatcherServlet拦截请求\hello**(配置所有\ 请求均被前端控制器拦截)**</li><li>DispatcherServlet调用处理映射器HandlerMapping，处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。<code>此处具体的处理器即为 &lt;bean id="/hello" class="com.chen.controller.ServlertContorller"/&gt;</code></li><li>DispatcherServlet调用处理适配器HandlerAdapter，请求执行对应handler(即此处自己编写的controller)</li><li>HandlerAdapter调用对应controller执行对应的处理，处理结果返回ModelAndView回传HandlerAdapter</li><li>HandlerAdapter将ModelAndView中继到前端控制器DispatcherServlet</li><li>DispatcherServlet将ModelAndView传送给ViewResolve</li><li>视图解析器对ModelAndView进行视图解析，拼接具体视图路径，解析返回具体视图Viewhui前端控制器</li><li>前端控制器调用具体视图(渲染装填model中的数据)</li><li>将视图返回给用户</li></ol><h2 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h2><ul><li>DispatcherServlet：前端控制器，也称为中央控制器，它是整个请求响应的控制中心，组件的调用由它统一调度。</li><li>HandlerMapping：处理器映射器，它根据用户访问的 URL 映射到对应的后端处理器 Handler，springmvc提供了不同的映射器实现不同的映射方式，根据一定的规则去查找,例如：xml配置方式，实现接口方式，注解方式等。它知道处理用户请求的后端处理器，但是它并不执行后端处理器，而是将处理器告诉给中央处理器。</li><li>HandlerAdapter：处理器适配器，它调用后端处理器中的方法，返回逻辑视图 ModelAndView 对象。</li><li>ViewResolver：视图解析器，将 ModelAndView 逻辑视图解析为具体的视图（如 JSP）。</li><li>Handler：后端处理器，对用户具体请求进行处理，也就是我们编写的 Controller 类。Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</li><li>View: 是springmvc的封装对象，是一个接口, springmvc框架提供了很多的View视图类型，包括：jspview，pdfview,jstlView、freemarkerView、pdfView等。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springMvc执行流程&quot;&gt;&lt;a href=&quot;#springMvc执行流程&quot; class=&quot;headerlink&quot; title=&quot;springMvc执行流程&quot;&gt;&lt;/a&gt;springMvc执行流程&lt;/h1&gt;&lt;h2 id=&quot;spring4-2-4原文档图&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="sprigMvc" scheme="https://rain-sky.github.io/tags/sprigMvc/"/>
    
  </entry>
  
  <entry>
    <title>springMvc项目打包后未打包依赖导致404问题</title>
    <link href="https://rain-sky.github.io/2021/04/11/springMvc%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%90%8E%E6%9C%AA%E6%89%93%E5%8C%85%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4404%E9%97%AE%E9%A2%98/"/>
    <id>https://rain-sky.github.io/2021/04/11/springMvc%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%90%8E%E6%9C%AA%E6%89%93%E5%8C%85%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4404%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-11T02:52:47.000Z</published>
    <updated>2021-05-26T01:38:47.247Z</updated>
    
    <content type="html"><![CDATA[<p>controller</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServlertContorller</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"the first springMvc program"</span>);</span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加处理映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加处理适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加视图解析器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 将自己编写的controller交由ioc容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.chen.controller.ServlertContorller"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>目录结构</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210414220343.png"></p><p>404错误原因，E:\javaweb\springMVC\out\artifacts\springMVC_02_hellomvc_war_exploded中没有打包相关依赖jar包</p><p>解决方案：</p><p>手动添加lib目录并导入相关依赖</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210414220344.png"></p><p>添加完成，如图所示：</p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210414220345.png"></p><p>再次测试访问localhost:8080/hello 成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;controller&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
    <category term="springMvc" scheme="https://rain-sky.github.io/tags/springMvc/"/>
    
    <category term="maven" scheme="https://rain-sky.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>spring整合mybatis</title>
    <link href="https://rain-sky.github.io/2021/04/10/spring%E6%95%B4%E5%90%88mybatis/"/>
    <id>https://rain-sky.github.io/2021/04/10/spring%E6%95%B4%E5%90%88mybatis/</id>
    <published>2021-04-10T08:44:20.000Z</published>
    <updated>2021-04-10T12:04:30.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-整合mybatis"><a href="#spring-整合mybatis" class="headerlink" title="spring 整合mybatis"></a>spring 整合mybatis</h1><h2 id="回顾mybatis步骤"><a href="#回顾mybatis步骤" class="headerlink" title="回顾mybatis步骤"></a>回顾mybatis步骤</h2><ol><li>导入mybatis与mysqsl相关包</li><li>编写mybatis核心配置文件</li><li>编写业务接口</li><li>编写接口对应的***mapper.xml</li><li>在mybatise核心配置文件中注册mapper</li><li>获取核心配置文件的输入流,通过输入流build(**)获得sqlsessionFactory,通过sqlsessionFactory获得sqlsession</li><li>通过sqlsession.getMapper(***.class)动态代理获得业务接口实现类</li><li>调用业务对应方法</li></ol><h2 id="spring整合mybatis"><a href="#spring整合mybatis" class="headerlink" title="spring整合mybatis"></a>spring整合mybatis</h2><blockquote><p>步骤</p></blockquote><p>1、导入相关jar包</p><p>junit</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>mybatis</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>mysql-connector-java</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>spring相关</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>aspectJ AOP 织入器</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>mybatis-spring整合包 【重点】</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置Maven静态资源过滤问题！</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="spring核心配置"><a href="#spring核心配置" class="headerlink" title="spring核心配置"></a>spring核心配置</h2><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 <code>SqlSessionFactory </code>和至少一个<code>数据映射器类</code>。</p><p>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：<strong>SqlSessionFactory需要一个 DataSource（数据源）</strong>。这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>在基础的 MyBatis 用法中，是通过 SqlSessionFactoryBuilder 来创建 SqlSessionFactory 的。而在 MyBatis-Spring 中，则使用 SqlSessionFactoryBean 来创建。</p><p>在 MyBatis 中，你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。</p><p>SqlSessionFactory有一个唯一的必要属性：用于 JDBC 的 DataSource。这可以是任意的 DataSource 对象，它的配置方法和其它 Spring 数据库连接是一样的。</p><p>一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。</p><p>需要注意的是，这个配置文件并不需要是一个完整的 MyBatis 配置。确切地说，任何环境配置（<environments>），数据源（<datasource>）和 MyBatis 的事务管理器（<transactionmanager>）都会被忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环境的值。</transactionmanager></datasource></environments></p><p>SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。</p><p>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置详细"><a href="#配置详细" class="headerlink" title="配置详细"></a>配置详细</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line">       &lt;!-- 开启注解支持 --&gt;</span><br><span class="line">       xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">   <span class="comment">&lt;!-- 开启面向切面aop支持 --&gt;</span></span><br><span class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</span><br><span class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans</span><br><span class="line">        https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        https://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        https://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</span><br><span class="line">    <span class="comment">&lt;!--开启注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置datasource数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将sqlSessionFactory置入spring容器托管 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关联mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath: mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册该包下所有***Mapper.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/chen/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建sqlSession  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>由于已经创建sqlSessionFactory与sqlSession 故在应用中可直接使用</code></p><p>mybatis-config.xml配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.chen.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通常mybatis-config.xml会用于typeAliases与settings的配置</p><p>编写接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编写UserMapper.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.chen.dao.UserDao"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>原mybatis获取代理类并执行业务</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">       <span class="comment">//获取mybatis核心配置文件输入流</span></span><br><span class="line">           InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">           <span class="comment">//建造者模式，解析配置文件获取sqlSessionFactory</span></span><br><span class="line">           sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">       } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//此处以上代码一般编写为一个工具类，用于获取sqlSession</span></span><br><span class="line"><span class="comment">//通过反射得到***Mapper.xml的代理类</span></span><br><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">List&lt;Student&gt; allStudent = mapper.getAllStudent();</span><br><span class="line">   <span class="keyword">for</span> (Student student: allStudent) {</span><br><span class="line">        System.out.println(student);</span><br><span class="line">       }</span><br><span class="line">   sqlSession.close();</span><br></pre></td></tr></tbody></table></figure><p><strong>整合获取代理类执行业务</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span></span>{</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">       SqlSessionTemplate sqlSession = (SqlSessionTemplate) context.getBean(<span class="string">"sqlSession"</span>);</span><br><span class="line">       UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">       <span class="keyword">for</span> (User user : mapper.getAllUser()) {</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><strong>在spring中对象都交由IOC容器，为此，sqlSessionFactory与sqlSession均从IOC容器中获得，对比原mybatis步骤中，我们一般会在spring整合mybatis多增加一个实现类交由IOC容器管理</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">getSqlSession</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>{</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getAllUser();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUsers</span><span class="params">()</span></span>{</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        UserMapperImpl userMapper = (UserMapperImpl) context.getBean(<span class="string">"userMapperImpl"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//userMapper.setSqlSession(sqlSessionTemplate);</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.getAllUser()) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-整合mybatis&quot;&gt;&lt;a href=&quot;#spring-整合mybatis&quot; class=&quot;headerlink&quot; title=&quot;spring 整合mybatis&quot;&gt;&lt;/a&gt;spring 整合mybatis&lt;/h1&gt;&lt;h2 id=&quot;回顾mybatis</summary>
      
    
    
    
    
    <category term="spring" scheme="https://rain-sky.github.io/tags/spring/"/>
    
    <category term="mybatis" scheme="https://rain-sky.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>select 子句后的列取别名不能应用与where子句的问题</title>
    <link href="https://rain-sky.github.io/2021/04/04/select-%E5%AD%90%E5%8F%A5%E5%90%8E%E7%9A%84%E5%88%97%E5%8F%96%E5%88%AB%E5%90%8D%E4%B8%8D%E8%83%BD%E5%BA%94%E7%94%A8%E4%B8%8Ewhere%E5%AD%90%E5%8F%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://rain-sky.github.io/2021/04/04/select-%E5%AD%90%E5%8F%A5%E5%90%8E%E7%9A%84%E5%88%97%E5%8F%96%E5%88%AB%E5%90%8D%E4%B8%8D%E8%83%BD%E5%BA%94%E7%94%A8%E4%B8%8Ewhere%E5%AD%90%E5%8F%A5%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-04T05:54:34.000Z</published>
    <updated>2021-04-04T06:16:37.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="select子句中列别名无法应用于where子句问题"><a href="#select子句中列别名无法应用于where子句问题" class="headerlink" title="select子句中列别名无法应用于where子句问题"></a>select子句中列别名无法应用于where子句问题</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><ol><li><p>sailors</p><p> CREATE TABLE Sailors</p><pre><code>(Sid CHAR(10)PRIMARY KEY,sname CHAR(20),rating INT ,age INT);</code></pre></li><li><p>boats</p><p>CREATE TABLE Boats</p><pre><code>(bid CHAR(10)PRIMARY KEY,bname CHAR(20) NOT NULL,color CHAR(10));</code></pre></li><li><p>reserves</p><p>CREATE TABLE Reserves(Sid CHAR(10) ,</p><pre><code>bid CHAR(10), rdate DATE,PRIMARY KEY(Sid,bid,rdate),FOREIGN KEY(Sid)REFERENCES Sailors(Sid),FOREIGN KEY(bid)REFERENCES Boats(bid));</code></pre></li></ol><p>求解问题：</p><blockquote><p>统计水手表中人数最少的级别组及人数</p></blockquote><p>解法:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rating ,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> ttp <span class="keyword">FROM</span> sailors </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> rating <span class="keyword">HAVING</span> ttp =(<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(ttps) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> rating,<span class="keyword">COUNT</span>(*) ttps <span class="keyword">FROM</span> sailors <span class="keyword">GROUP</span> <span class="keyword">BY</span> rating) <span class="keyword">AS</span> res);</span><br></pre></td></tr></tbody></table></figure><p>错误写法：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rating ,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> ttp <span class="keyword">FROM</span> sailors <span class="keyword">where</span> ttp = (<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(ttps) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> rating,<span class="keyword">COUNT</span>(*) ttps <span class="keyword">FROM</span> sailors <span class="keyword">GROUP</span> <span class="keyword">BY</span> rating) <span class="keyword">AS</span> res)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> rating;</span><br></pre></td></tr></tbody></table></figure><p>解惑：</p><hr><p><code>执行顺序,先执行FROM 子句,然后执行WHERE 子句,最后执行SELECT 所以Select 子句后的别名,在where条件中不能使用。</code></p><p><strong>一、sql执行顺序</strong><br>(1) FROM:对FROM子句中的左表<left_table>和右表<right_table>执行笛卡儿积，产生虚拟表VT1;<br>(2) ON: 对虚拟表VT1进行ON筛选，只有那些符合<join_condition>的行才被插入虚拟表VT2;<br>(3) JOIN: 如果指定了OUTER JOIN(如LEFT OUTER JOIN、RIGHT OUTER JOIN)，那么保留表中未匹配的行作为外部行添加到虚拟表VT2，产生虚拟表VT3。如果FROM子句包含两个以上的表，则对上一个连接生成的结果表VT3和下一个表重复执行步骤1~步骤3，直到处理完所有的表;<br>(4) WHERE: 对虚拟表VT3应用WHERE过滤条件，只有符合<where_condition>的记录才会被插入虚拟表VT4;<br>(5) GROUP By: 根据GROUP BY子句中的列，对VT4中的记录进行分组操作，产生VT5;如果应用了group by，那么后面的所有步骤都只能得到的vt5的列或者是聚合函数（count、sum、avg等）。原因在于最终的结果集中只为每个组包含一行。这一点请牢记。<br>(6) CUBE|ROllUP: 对VT5进行CUBE或ROLLUP操作，产生表VT6;<br>(7) HAVING: 对虚拟表VT6应用HAVING过滤器，只有符合<having_condition>的记录才会被插入到VT7;<br>(8) SELECT: 第二次执行SELECT操作，选择指定的列，插入到虚拟表VT8中;<br>(9) DISTINCT: 去除重复，产生虚拟表VT9;<br>(10) ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10;<br>(11) LIMIT: 取出指定街行的记录，产生虚拟表VT11，并返回给查询用户</order_by_list></having_condition></where_condition></join_condition></right_table></left_table></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;select子句中列别名无法应用于where子句问题&quot;&gt;&lt;a href=&quot;#select子句中列别名无法应用于where子句问题&quot; class=&quot;headerlink&quot; title=&quot;select子句中列别名无法应用于where子句问题&quot;&gt;&lt;/a&gt;select子句</summary>
      
    
    
    
    
    <category term="sql" scheme="https://rain-sky.github.io/tags/sql/"/>
    
    <category term="数据库" scheme="https://rain-sky.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机类加载机制</title>
    <link href="https://rain-sky.github.io/2021/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://rain-sky.github.io/2021/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-03-20T07:25:53.000Z</published>
    <updated>2021-05-08T01:43:23.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>与编译时需要进行连接的语言不同，Java语言类的加载，连接和初始化，都是在程序运行期间进行的。</p><p><strong>类的生命周期</strong></p><p><img src="https://gitee.com/rain-sky/images/raw/master/20210427085136.webp"></p><blockquote><p>加载，验证，准备，初始化与卸载阶段顺序确定，类加载过程必须按照这种顺序按部就班开始，解析阶段则不一定，某些情况下它可以在初始化阶段之后开始，这是为了支持Java运行时绑定的特性(动态绑定或晚期绑定)。此处是值按部就班的“开始”，而不是按部就班的“进行”，强调这一点因为这些阶段通常都是交叉混合进行的。</p><p>​                                                                                                                                                            ——《深入理解Java虚拟机》</p></blockquote><h2 id="2-类加载时机"><a href="#2-类加载时机" class="headerlink" title="2.类加载时机"></a>2.类加载时机</h2><p>在《Java虚拟机规范》中有且只有六种情况必须立即对类进行初始化(之前阶段必然已在初始化阶段前开始)。</p><ol><li><p>遇到new、getstatic、putstatic和invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。<br>生成这4条指令的最常见Java场景：</p><p><em>使用new关键字实例化对象的时候；</em><br><em>读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候；</em><br><em>调用一个类的静态方法的时候。</em></p></li><li><p>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。</p></li><li><p>当初始化一个类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p></li><li><p>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。</p></li><li><p>当使用JDK 1.7 的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</p></li><li><p>当一个接口中定义了JDK 8 新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。如：<em>default void sort(Comparator&lt;? super E&gt; c) {      …      …    }</em></p></li></ol><hr><p>以上六种场景中的行为称为对一个类型进行主动引用，除此之外，所有引用类型的方式都不会触发初始化，成为被动引用。</p><p>举例说明何为被动引用：</p><ol><li>通过子类引用父类的静态字段，不会导致子类的初始化</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">static</span>{</span><br><span class="line">        System.out.println(<span class="string">"SuperClass is init!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>{</span><br><span class="line"><span class="keyword">static</span>{</span><br><span class="line">        System.out.println(<span class="string">"SubClass is init!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInit</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        System.out.println(SubClass.value);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过数组定义来引用类，不触发此类初始化</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SuperClass[] sp = <span class="keyword">new</span> SuperClass[<span class="number">100</span>];</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>常量会在编译阶段存入调用类的常量池中，本质上没有直接引用到定义常类的类，因此不会触发定义常量的类的初始化</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">static</span>{</span><br><span class="line">        System.out.println(<span class="string">"SuperClass is init!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInit</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="comment">//常量调用</span></span><br><span class="line">        System.out.println(SubClass.value);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PS：接口加载与类加载过程稍有不同，触发类加载的第三种情况对于接口而言，当一个接口在初始化时，并不要求父接口全部完成初始化，只有在引用到了父类的时候才触发符类的初始化，如使用到了父接口中的常量。</p><h2 id="3-类加载的过程"><a href="#3-类加载的过程" class="headerlink" title="3.类加载的过程"></a>3.类加载的过程</h2><h3 id="3-1-加载"><a href="#3-1-加载" class="headerlink" title="3.1 加载"></a>3.1 加载</h3><p>加载阶段虚拟机主要完成一下三件事</p><ol><li>通过一个类的全限定名来获取定义此类的二进制字节流（所以说，先编译得到Class文件才有类加载对吧）</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的Java.lang.Class对象,作为方法区这个类的各种数据访问入口</li></ol><p><code>通过一个类的全限定名来获取定义此类的二进制字节流并未指明从哪获取，如何获取。</code></p><p>​        类加载阶段结束后，Java虚拟机外部的数据二进制字节流就按照虚拟机所定义的格式存储的方法区之中了,存储格式完全由虚拟机自定义。类型数据妥善安置在方法区之后，会在Java堆内存中实例化一个Java.lang.Class对象，这个对象将作为程序访问方法区中的类型数据的外部接口。</p><p>​        加载阶段与连接极端的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，即加载阶段未结束，连接已开始，但二者开始先后顺序依然严格按照定义进行。</p><h3 id="3-2-验证"><a href="#3-2-验证" class="headerlink" title="3.2 验证"></a>3.2 验证</h3><p>验证是连接阶段的第一步，从代码量何耗费的执行性能的角度上讲，验证阶段的工作量在Java虚拟机的类加载过程中占据相当大的比重。</p><p>验证阶段大致完成以下四个阶段的检验动作</p><ol><li>文件格式验证<ul><li>是否以魔数0xCAFEBABE开头</li><li>主次版本号是否在虚拟机接受范围内</li><li>……</li></ul></li><li>元数据验证<ul><li>这个类是否有父类</li><li>这个类的父类是否继承了不被允许继承的类（final修饰）</li><li>……</li></ul></li><li>字节码验证(最复杂的一个阶段，通过数据流分析何控制流分析，确定程序语义合法，符合逻辑)<ul><li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上</li><li>保证方法体钟的类型转换总是有效的（保证转型安全）</li><li>……</li></ul></li><li>符号引用验证（发生在虚拟机将符号引用转化为直接用于的时候，该动作将在连接第三阶段——解析阶段发生，该验证主要为了保证解析行为能正常进行）<ul><li>符号引用中通过字符穿描述的全限定名是否能找到对应类</li><li>符号引用中的类，字段，方法的可访问性，是否可被当前类访问</li><li>……</li></ul></li></ol><hr><p><code>验证阶段对于虚拟机类加载机制来说，是一个非常重要却不是必须执行的阶段，如程序运行的代码都已经被反复使用何验证过，就可以考虑使用-Xverify:none参数关闭大部分类验证措施。</code></p><h3 id="3-3-准备"><a href="#3-3-准备" class="headerlink" title="3.3 准备"></a>3.3 准备</h3><p>准备阶段是正式为类中定义的变量（静态变量）分配内存设置初始值阶段， <strong>注意，不包括实例变量</strong> ，从概念上将这些变量所使用的内存都应在方法区中进行分配，但方法区本身就是一个逻辑上的区域，在JDK 7之前，HotSpot使用永久代来实现方法区，而在JDK 8 之后，类变量则会随着Class对象一起存放在Java堆中，此时“类变量在方法区”就是一种逻辑表述了。</p><p>其次，此处表述的初始值“通常情况”下是数据类型的零值，如一个变量定义为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></tbody></table></figure><p>那么 value在准备阶段结束后初始值不为123，而是int 型的零值0。因为此时还未执行任何Java方法，而vlaue = 123的赋值动作将在执行类构造器<clinit>()完成。</clinit></p><p>非“通常情况”</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">123</span>;</span><br></pre></td></tr></tbody></table></figure><p>编译时，Javac会为value生成ConstantValue属性，准备阶段value直接被初始化为ConstantValue所指定的初始值。</p><h3 id="3-4-解析"><a href="#3-4-解析" class="headerlink" title="3.4 解析"></a>3.4 解析</h3><p>解析阶段是Java虚拟机将符号引用替换为直接引用的过程。</p><p>符号引用：</p><p>符号引用是一个字符串，它给出了被引用的内容的名字并且可能会包含一些其他关于这个被引用项的信息——这些信息必须足以唯一的识别一个类、字段、方法。这样，对于其他类的符号引用必须给出类的全名。对于其他类的字段，必须给出类名、字段名以及字段描述符。对于其他类的方法的引用必须给出类名、方法名以及方法的描述符。在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。</p><p>2.直接引用：</p><p>直接引用可以是<br> （1）直接指向目标的指针（比如，指向“类型”【Class对象】、类变量、类方法的直接引用可能是指向方法区的指针）<br> （2）相对偏移量（比如，指向实例变量、实例方法的直接引用都是偏移量）<br> （3）一个能间接定位到目标的句柄<br> 直接引用是和虚拟机的布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经被加载入内存中了。</p><hr><p>关于符号引用与直接引用的更详细解析，可参考知乎大佬文章<a href="https://www.zhihu.com/question/30300585">https://www.zhihu.com/question/30300585</a></p><h3 id="3-5-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5 初始化"></a>3.5 初始化</h3><p>初始化阶段就是执行类构造器<clinit>（）方法的过程，它是Javac编译后生成的产物，它是由编译器自动收集类中所有类变量的赋值动作和静态语句块合并产生的，收集顺序是源代码中语句出现的先后顺序。所以静态语句块中只能访问的定义在此之前的变量，在它之后的变量可以赋值，但不能访问。</clinit></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="keyword">static</span>{</span><br><span class="line">        i = <span class="number">0</span>;<span class="comment">//编译通过</span></span><br><span class="line">        System.out.println(i);<span class="comment">//非法向前引用</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>java虚拟机必须保证一个类的&lt;clinit&gt;（）方法在多线程环境中被正确加锁同步,若活动线程在一个类的&lt;clinit&gt;（）方法耗时过长，或造成多个线程阻塞。</code></p><p>rundll32.exe keymgr.dll,KRShowKeyMgr</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h2&gt;&lt;p&gt;与编译时需要进行连接的语言不同，Java语言类的加载，连接和初始化，都是在程序运行期间进行的。&lt;/p&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理</title>
    <link href="https://rain-sky.github.io/2021/03/20/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>https://rain-sky.github.io/2021/03/20/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</id>
    <published>2021-03-20T02:38:14.000Z</published>
    <updated>2021-03-20T02:38:14.547Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>多线程基础</title>
    <link href="https://rain-sky.github.io/2021/03/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://rain-sky.github.io/2021/03/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2021-03-17T01:48:45.000Z</published>
    <updated>2021-04-05T01:38:08.424Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中，线程通常有五种状态：创建，就绪，运行，阻塞和死亡。</p><p>创建状态：在生成线程对象，并没有调用该对象的star方法，这时线程处于创建状态。</p><p>就绪状态：当调用了线程对象的start方法之后，该线程就进入就绪状态。但是此时线程调度程序还没有把该线程设置</p><pre><code>            为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。</code></pre><p>运行状态：线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数中的代码。</p><p>阻塞状态：线程正在运行的时候，被暂停 ，通常是为了等待某个事件的发生之后再运行。sleep，suspend，wait等方法</p><pre><code>             都可以导致线程阻塞。</code></pre><p>死亡状态：如果一个线程的run方法执行结束或者被调用stop方法后，该线程就会死亡。对于死亡的线程，无法再使用start方法</p><pre><code>           令其进入就绪。</code></pre><p>实现线程的方法</p><pre><code>Java中实现并启动线程有两种方法：1.写一个类继承Thread类，重写run方法，用start方法启动线程。2.写一个类实现Runnable接口，实现run方法。用new Thread(Runnable target).start()方法来启动。</code></pre><p>start()方法   </p><pre><code>用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。</code></pre><p>run()方法</p><pre><code>run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。这两个方法应该都比较熟悉，把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。并且run()方法必须是public访问权限，返回值类型为void。Thread的子类要重写这个方法，通过Thread调用run()方法，执行线程的线程体。</code></pre><p>调用start（）后，线程会被放到等待队列，等待CPU调度，并不一定要马上开始执行，只是将这个线程置于可动行状态。然后通过JVM，线程Thread会调用run（）方法，执行本线程的线程体。先调用start后调用run，这么麻烦，为了不直接调用run？就是为了实现多线程的优点，没这个start不行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Java中，线程通常有五种状态：创建，就绪，运行，阻塞和死亡。&lt;/p&gt;
&lt;p&gt;创建状态：在生成线程对象，并没有调用该对象的star方法，这时线程处于创建状态。&lt;/p&gt;
&lt;p&gt;就绪状态：当调用了线程对象的start方法之后，该线程就进入就绪状态。但是此时线程调度程序还没有把</summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="https://rain-sky.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>值传递与引用传递</title>
    <link href="https://rain-sky.github.io/2021/01/31/%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>https://rain-sky.github.io/2021/01/31/%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8E%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</id>
    <published>2021-01-31T03:12:08.000Z</published>
    <updated>2021-03-07T11:58:50.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h1><h2 id="一：什么是基本数据类型，什么是引用数据类型。"><a href="#一：什么是基本数据类型，什么是引用数据类型。" class="headerlink" title="一：什么是基本数据类型，什么是引用数据类型。"></a>一：什么是基本数据类型，什么是引用数据类型。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic3.zhimg.com/80/166032bc90958c21604110441ad03f45_720w.jpg?source=1940ef5c"></p><p>如图所示，num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为”引用”，引用指向实际对象，实际对象中保存着内容。</p><h2 id="二：搞清楚赋值运算符（-）的作用"><a href="#二：搞清楚赋值运算符（-）的作用" class="headerlink" title="二：搞清楚赋值运算符（=）的作用"></a>二：搞清楚赋值运算符（=）的作用</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span>;</span><br><span class="line">str = <span class="string">"java"</span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://pic1.zhimg.com/80/287c0efbb179638cf4cf27cbfdf3e746_720w.jpg?source=1940ef5c"></p><p>对于基本数据类型，内存中的内容直接覆盖。</p><p>对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。<strong>但是原来的对象不会被改变（重要）。</strong><br>如上图所示，”hello” 字符串对象没有被改变。（没有被任何引用所指向的对象是垃圾，会被垃圾回收器回收）</p><p>eg:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StringBuilder;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>  a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putStr</span><span class="params">(StringBuilder stringBuilder,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        b = <span class="number">4</span>;</span><br><span class="line">        System.out.println(<span class="string">"a = "</span>+a+<span class="string">"  "</span>+<span class="string">"b = "</span>+b );<span class="comment">//a依然不变</span></span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuilder.hashCode());</span><br><span class="line">        stringBuilder.append(<span class="string">" world!"</span>);<span class="comment">//sb指向内容改变</span></span><br><span class="line">        System.out.println(stringBuilder.hashCode());</span><br><span class="line">        stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">"see you~"</span>);<span class="comment">//sb指向内容不变</span></span><br><span class="line">        System.out.println(stringBuilder.hashCode());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        StringBuilder sb =  <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(sb.hashCode());</span><br><span class="line">        putStr(sb,a);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">_________________________________________________________________________________________________________</span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">a = <span class="number">1</span>  b = <span class="number">4</span></span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">460141958</span></span><br><span class="line"><span class="number">1163157884</span></span><br></pre></td></tr></tbody></table></figure><h2 id="C-中的一些相似问题"><a href="#C-中的一些相似问题" class="headerlink" title="C++中的一些相似问题"></a>C++中的一些相似问题</h2><p>举例如下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">n = <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> &amp;n)</span></span>{</span><br><span class="line">n =<span class="number">10</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>上示两个函数，掉用前者并不导致实参改变，掉用后者导致实参改变。</p><p>在 C++中  i<strong>nt a = 5; int &amp;b = a;</strong> 该种写法称b 为 a的别名，b与a指向同一片内存；</p><p>PS：</p><ol><li>引用在定义时必须初始话，如 int &amp;b;错误。</li><li>引用初始化只能榜顶佐治，不能榜顶常量值，如int &amp;b = 10; 错误。</li><li>引用一旦初始化其值便不能修改，即不能做其他变量的引用。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;值传递与引用传递&quot;&gt;&lt;a href=&quot;#值传递与引用传递&quot; class=&quot;headerlink&quot; title=&quot;值传递与引用传递&quot;&gt;&lt;/a&gt;值传递与引用传递&lt;/h1&gt;&lt;h2 id=&quot;一：什么是基本数据类型，什么是引用数据类型。&quot;&gt;&lt;a href=&quot;#一：什么是基本</summary>
      
    
    
    
    
    <category term="Java" scheme="https://rain-sky.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://rain-sky.github.io/2021/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://rain-sky.github.io/2021/01/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2021-01-12T09:41:37.000Z</published>
    <updated>2021-07-10T10:31:32.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-网络层次划分"><a href="#1-网络层次划分" class="headerlink" title="1. 网络层次划分"></a>1. 网络层次划分</h3><p>　　为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了“开放系统互联参考模型”，即著名的OSI/RM模型（Open System Interconnection/Reference Model）。它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层（Physics Layer）、数据链路层（Data Link Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）、应用层（Application Layer）。 其中第四层完成数据传送服务，上面三层面向用户。</p><p>　　除了标准的OSI七层模型以外，常见的网络层次划分还有TCP/IP四层协议以及TCP/IP五层协议，它们之间的对应关系如下图所示：</p><p><img src="https://images2015.cnblogs.com/blog/764050/201509/764050-20150904094019903-1923900106.jpg" alt="img"></p><h3 id="2-OSI七层网络模型"><a href="#2-OSI七层网络模型" class="headerlink" title="2. OSI七层网络模型"></a>2. OSI七层网络模型</h3><p>　　TCP/IP协议毫无疑问是互联网的基础协议，没有它就根本不可能上网，任何和互联网有关的操作都离不开TCP/IP协议。不管是OSI七层模型还是TCP/IP的四层、五层模型，每一层中都要自己的专属协议，完成自己相应的工作以及与上下层级之间进行沟通。由于OSI七层模型为网络的标准层次划分，所以我们以OSI七层模型为例从下向上进行一一介绍。</p><p><img src="https://images2015.cnblogs.com/blog/764050/201509/764050-20150904095142060-1017190812.gif" alt="img"></p><p>　　1）物理层（Physical Layer）</p><p>　　激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p>　　2）数据链路层（Data Link Layer）</p><p>　　数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>　　有关数据链路层的重要知识点：</p><p>　　1&gt; 数据链路层为网络层提供可靠的数据传输；</p><p>　　2&gt; 基本数据单位为帧；</p><p>　　3&gt; 主要的协议：以太网协议；</p><p>　　4&gt; 两个重要设备名称：网桥和交换机。</p><p>　　3）网络层（Network Layer）</p><p>　　网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是“路径选择、路由及逻辑寻址”。</p><p>　　网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p><p>　　1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</p><p>　　2&gt; 基本数据单位为IP数据报；</p><p>　　3&gt; 包含的主要协议：</p><p>　　IP协议（Internet Protocol，因特网互联协议）;</p><p>　　ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</p><p>　　ARP协议（Address Resolution Protocol，地址解析协议）;</p><p>　　RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</p><p>　　4&gt; 重要的设备：路由器。</p><p>　　4）传输层（Transport Layer）</p><p>　　第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p><p>　　传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。</p><p>　　网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。</p><p>　　有关网络层的重点：</p><p>　　1&gt; 传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</p><p>　　2&gt; 包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；</p><p>　　3&gt; 重要设备：网关。</p><p>　　5）会话层</p><p>　　会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p><p>　　6）表示层</p><p>　　表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p><p>　　7）应用层</p><p>　　为操作系统或网络应用程序提供访问网络服务的接口。</p><p>　　会话层、表示层和应用层重点：</p><p>　　1&gt; 数据传输基本单位为报文；</p><p>　　2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</p><h3 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h3><p>　　1）网络地址</p><p>　　IP地址由网络号（包括子网号）和主机号组成，网络地址的主机号为全0，网络地址代表着整个网络。</p><p>　　2）广播地址</p><p>　　广播地址通常称为直接广播地址，是为了区分受限广播地址。</p><p>　　广播地址与网络地址的主机号正好相反，广播地址中，主机号为全1。当向某个网络的广播地址发送消息时，该网络内的所有主机都能收到该广播消息。</p><p>　　3）组播地址</p><p>　　D类地址就是组播地址。</p><p>　　先回忆下A，B，C，D类地址吧：</p><p>　　A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255；(modified @2016.05.31)</p><p>　　B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255;</p><p>　　C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255。</p><p>　　D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）；</p><p>　　E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p><p>　　注：只有A,B,C有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。</p><p>　　4）255.255.255.255</p><p>　　该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。例如：主机192.168.1.1/30上的直接广播数据包后，另外一个网段192.168.1.5/30也能收到该数据报；若发送受限广播数据报，则不能收到。</p><p>　　注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。</p><p>　　5）0.0.0.0</p><p>　　常用于寻找自己的IP地址，例如在我们的RARP，BOOTP和DHCP协议中，若某个未知IP地址的无盘机想要知道自己的IP地址，它就以255.255.255.255为目的地址，向本地范围（具体而言是被各个路由器屏蔽的范围内）的服务器发送IP请求分组。</p><p>　　6）回环地址</p><p>　　127.0.0.0/8被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是127.0.0.1。</p><p>　　7）A、B、C类私有地址</p><p>　　私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义。</p><p>　　A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255</p><p>　　B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255</p><p>　　C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</p><h3 id="4-子网掩码及网络划分"><a href="#4-子网掩码及网络划分" class="headerlink" title="4. 子网掩码及网络划分"></a>4. 子网掩码及网络划分</h3><p>　　随着互连网应用的不断扩大，原先的IPv4的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用NAT在企业内部利用保留地址自行分配以外，通常都对一个高类别的IP地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。</p><p>　　这里主要是为了在网络分段情况下有效地利用IP地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。</p><p>　　什么是子网掩码？</p><p>　　子网掩码是标志两个IP地址是否同属于一个子网的，也是32位二进制地址，其每一个为1代表该位是网络位，为0代表主机位。它和IP地址一样也是使用点式十进制来表示的。如果两个IP地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。</p><p>　　在计算子网掩码时，我们要注意IP地址中的保留地址，即“ 0”地址和广播地址，它们是指主机地址或网络地址全为“ 0”或“ 1”时的IP地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。</p><p>　　子网掩码的计算：</p><p>　　对于无须再划分成子网的IP地址来说，其子网掩码非常简单，即按照其定义即可写出：如某B类IP地址为 10.12.3.0，无须再分割子网，则该IP地址的子网掩码255.255.0.0。如果它是一个C类地址，则其子网掩码为 255.255.255.0。其它类推，不再详述。下面我们关键要介绍的是一个IP地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。</p><p>　　下面总结一下有关子网掩码和网络划分常见的面试考题：</p><p>　　1）利用子网数来计算</p><p>　　在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p><p>　　(1) 将子网数目转化为二进制来表示;</p><p>　　如欲将B类IP地址168.195.0.0划分成27个子网：27=11011；</p><p>　　(2) 取得该二进制的位数，为N；</p><p>　　该二进制为五位数，N = 5</p><p>　　(3) 取得该IP地址的类子网掩码，将其主机地址部分的的前N位置1即得出该IP地址划分子网的子网掩码。</p><p>　　将B类地址的子网掩码255.255.0.0的主机地址前5位置 1，得到 255.255.248.0</p><p>　　2）利用主机数来计算</p><p>　　如欲将B类IP地址168.195.0.0划分成若干子网，每个子网内有主机700台：</p><p>　　(1) 将主机数目转化为二进制来表示；</p><p>　　700=1010111100；</p><p>　　(2) 如果主机数小于或等于254（注意去掉保留的两个IP地址），则取得该主机的二进制位数，为N，这里肯定 N&lt;8。如果大于254，则 N&gt;8，这就是说主机地址将占据不止8位；</p><p>　　该二进制为十位数，N=10；</p><p>　　(3) 使用255.255.255.255来将该类IP地址的主机地址位数全部置1，然后从后向前的将N位全部置为 0，即为子网掩码值。</p><p>　　将该B类地址的子网掩码255.255.0.0的主机地址全部置1，得到255.255.255.255，然后再从后向前将后 10位置0,即为：11111111.11111111.11111100.00000000，即255.255.252.0。这就是该欲划分成主机为700台的B类IP地址 168.195.0.0的子网掩码。</p><p>　　3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和计算子网掩码。这也可按上述原则进行计算。</p><p>　　比如一个子网有10台主机，那么对于这个子网需要的IP地址是：</p><p>　　10＋1＋1＋1＝13</p><p>　　注意：加的第一个1是指这个网络连接时所需的网关地址，接着的两个1分别是指网络地址和广播地址。</p><p>　　因为13小于16（16等于2的4次方），所以主机位为4位。而256－16＝240，所以该子网掩码为255.255.255.240。</p><p>　　如果一个子网有14台主机，不少人常犯的错误是：依然分配具有16个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为14＋1＋1＋1＝17，17大于16，所以我们只能分配具有32个地址（32等于2的5次方）空间的子网。这时子网掩码为：255.255.255.224。</p><h3 id="5-ARP-RARP协议"><a href="#5-ARP-RARP协议" class="headerlink" title="5. ARP/RARP协议"></a>5. ARP/RARP协议</h3><p>　　地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</p><p>　　ARP工作流程举例：</p><p>　　主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p><p>　　主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p><p>　　当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p><p>　　（1）根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p><p>　　（2）如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p><p>　　（3）主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p><p>　　（4）主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p><p>　　（5）当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p><p>　　逆地址解析协议，即RARP，功能和ARP协议相对，其将局域网中某个主机的物理地址转换为IP地址，比如局域网中有一台主机只知道物理地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。</p><p>　　RARP协议工作流程：</p><p>　　（1）给主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</p><p>　　（2）本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</p><p>　　（3）如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；</p><p>　　（4）如果不存在，RARP服务器对此不做任何的响应；</p><p>　　（5）源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</p><h3 id="6-路由选择协议"><a href="#6-路由选择协议" class="headerlink" title="6. 路由选择协议"></a>6. 路由选择协议</h3><p>　　常见的路由选择协议有：RIP协议、OSPF协议。</p><p>　　RIP协议 ：底层是贝尔曼福特算法，它选择路由的度量标准（metric)是跳数，最大跳数是15跳，如果大于15跳，它就会丢弃数据包。</p><p>　　OSPF协议 ：Open Shortest Path First开放式最短路径优先，底层是迪杰斯特拉算法，是链路状态路由选择协议，它选择路由的度量标准是带宽，延迟。</p><h3 id="7-TCP-IP协议"><a href="#7-TCP-IP协议" class="headerlink" title="7. TCP/IP协议"></a>7. TCP/IP协议</h3><p>　　TCP/IP协议是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p><p>　　IP层接收由更低层（网络接口层例如以太网设备驱动程序）发来的数据包，并把该数据包发送到更高层—TCP或UDP层；相反，IP层也把从TCP或UDP层接收来的数据包传送到更低层。IP数据包是不可靠的，因为IP并没有做任何事情来确认数据包是否按顺序发送的或者有没有被破坏，IP数据包中含有发送它的主机的地址（源地址）和接收它的主机的地址（目的地址）。</p><p> 　TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接的所以只能用于端到端的通讯。TCP提供的是一种可靠的数据流服务，采用“带重传的肯定确认”技术来实现传输的可靠性。TCP还采用一种称为“滑动窗口”的方式进行流量控制，所谓窗口实际表示接收能力，用以限制发送方的发送速度。</p><p>　　TCP报文首部格式：</p><p><img src="https://images2015.cnblogs.com/blog/764050/201509/764050-20150904110054856-961661137.png" alt="img"></p><p>　　TCP协议的三次握手和四次挥手：</p><p><img src="https://images2015.cnblogs.com/blog/764050/201509/764050-20150904110008388-1768388886.gif" alt="img"></p><p>　　注：seq:”sequance”序列号；ack:”acknowledge”确认号；SYN:”synchronize”请求同步标志；；ACK:”acknowledge”确认标志”；FIN：”Finally”结束标志。</p><p>　　TCP连接建立过程：首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p><p>　　TCP连接断开过程：假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p><p>　　为什么要三次挥手？</p><p>　　在只有两次“握手”的情形下，假设Client想跟Server建立连接，但是却因为中途连接请求的数据报丢失了，故Client端不得不重新发送一遍；这个时候Server端仅收到一个连接请求，因此可以正常的建立连接。但是，有时候Client端重新发送请求不是因为数据报丢失了，而是有可能数据传输过程因为网络并发量很大在某结点被阻塞了，这种情形下Server端将先后收到2次请求，并持续等待两个Client请求向他发送数据…问题就在这里，Cient端实际上只有一次请求，而Server端却有2个响应，极端的情况可能由于Client端多次重新发送请求数据而导致Server端最后建立了N多个响应在等待，因而造成极大的资源浪费！所以，“三次握手”很有必要！</p><p>　　为什么要四次挥手？</p><p>　　试想一下，假如现在你是客户端你想断开跟Server的所有连接该怎么做？第一步，你自己先停止向Server端发送数据，并等待Server的回复。但事情还没有完，虽然你自身不往Server发送数据了，但是因为你们之前已经建立好平等的连接了，所以此时他也有主动权向你发送数据；故Server端还得终止主动向你发送数据，并等待你的确认。其实，说白了就是保证双方的一个合约的完整执行！</p><p>　　使用TCP的协议：FTP（文件传输协议）、Telnet（远程登录协议）、SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等。</p><hr><p>TCP三次握手<strong>TCP运输连接有三个阶段：连接建立、数据传送、连接释放</strong>TCP连接过程通常叫做<strong>握手</strong>，握手需要客户端和服务器端交换三个报文，如下图所示之所以需要三次握手是因为TCP是可靠传输，三次能够刚好可靠又不多余TCP三次握手与Socket的连接过程是相关联对应的，Socket就是对于TCP/IP的封装么<strong>客户端有CLOSED、SYN-SEND、ESTABLISHED三种状态**</strong>客户端有CLOSED、LISTEN、SYN-RCVD、ESTABLISHED四种状态**<strong>服务器会首先创建连接，并且进入监听等待阶段，等待客户端的请求**</strong>当需要发送请求时，浏览器客户端主动打开连接，然后服务器被动打开连接**<img src="https://uploadfiles.nowcoder.com/images/20190828/8309948_1566974042905_FC5D1E4A8542CB51426DC924E8578CD5" alt="img"></p><p>连接过程客户端在需要时，向服务器发起请求连接报文，发出后状态从CLOSED转换为SYN-SEND 同步-已发送状态服务器一直处于LISTEN状态，接收到请求后，对客户端的请求进行回应，转换为SYN-RCVD，同步-已收到状态客户端收到服务器的回应后，状态转换为ESTABLISHED，并且再次向服务器发送确认服务器收到客户端的确认之后，服务器也转换为ESTABLISHED状态，完成了连接<strong>发出消息或者收到消息后状态才会进行切换**</strong>客户端与服务器的握手是一个往复确认的过程<strong>客户端：发出确认请求，SYN=1，seq=x，你听得到么，我想建立连接（SYN=1），我的序号是x（seq=x）服务器：对请求进行确认，也就是回应，我听到了（ACK=1，ack=x+1），你听得到么（SYN=1），我的序号是y（seq=y）客户端：对服务器的回应进行确认，我听到了（ACK=1，ack=y+1），我的序号是x+1IP数据报经过运输层需要分段发送，所以在TCP的处理过程中，有</strong>序号<strong>的概念比如客户端说我要从666号开始，发送100个数据，服务器说，我是从888号开始回应的上面的seq=x 和 seq=y  seq=x+1（上一个seq=x，下一个自然就是seq=x+1了）都是各自的序号</strong>握手的过程就是SYN seq  ACK ack的来回确认<strong>SYN ACK是头部的字段，可以理解为标志位，协议中有对他们的值有具体的规定ack就是确认号，确认号是期望收到的对方的下一个报文段的第一个数据字节的序号，也就是收到的序号+1否则随便一个，怎么对得上号为什么要三次握手？如果不是三次握手，只有两次如果客户端发出请求连接时，报文延时了，于是客户端重新发送了一次连接请求消息后来收到了确认，建立了连接，然后完成了数据传输，关闭了连接此时，服务器收到了那个迟到的请求消息，此时他应该是个废物了但是如果只有两次握手，服务器收到请求就响应建立了连接了但是如果是三次，客户端不会再次确认，服务器也就随后知道了这消息有问题，不会建立连接TCP四次挥手连接建立以后就可以进行数据通信传输了通信结束后，需要断开连接，断开连接需要四次交互，常被称为</strong>四次挥手**<strong>最初状态均为ESTABLISHED</strong>，客户端与服务器相互进行数据传送下图假设客户端无数据发送，请求断开连接<img src="https://uploadfiles.nowcoder.com/images/20190828/8309948_1566974066111_035082E832E529B2DFF7F11FE4D076A4" alt="img"></p><p>断开过程客户端无数据发送时，请求关闭连接，我好了，我想断开连接了（FIN=1）我的序号是u（u就是之前传送过的所有数据的最后一个字节的序号+1）此时客户端转变为FIN-WAIT-1状态服务器收到客户端的消息后，告诉客户端“好的，我知道了”（ACK=1，ack=u+1），这条消息的序号是v（seq=v ，这是服务器发送消息的序号)此时服务器的状态就转换为了CLOSE-WAIT状态此时，客户端通往服务器的路就断开了，客户端不能向服务器发送数据但是服务器仍旧可以向客户端发送数据，现在是“半关闭”的状态当客户端收到来自服务器的确认之后，进入FIN-WAIT-2状态，等待服务器那边说断开连接，等待中。。。。。当服务器所有的数据也都完全发送完成了之后，服务器才开始主动告知客户端断开连接（FIN=1，seq=w）这中间服务器可能又继续发送了一些数据，可能是v+1 也可能发送了更多，所以设置为w并且再次发送确认信息（ACK=1，ack=u+1，因为客户端已经不能发送数据了，服务器期望收到的序号永远都是最后一个序号+1，也就是u+1）这时，服务器就进入了LAST-ACK状态，最后确认状态客户端收到了服务器的断开连接请求后，也需要给出确认响应（ACK=1，ack=w+1，seq=u+1），然后进入TIME-WAIT状态等待两个MSL后，进入关闭状态MSL 是Maximum Segment Lifetime英文的缩写“报文最大生存时间”，他是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。服务器最终收到来自客户端的确认信息后，关闭，进入CLOSED状态<strong>四次挥手也是一个互相确认的过程，你说不玩了，别人答应了，还要等别人都搞好了再告诉你可以走了，你才能走</strong>客户端：我不想玩了服务器：好的我知道了服务器：你可以走了客户端：好的我走了就如同在网吧上网，你点击下机之后，再去网管那边结账结账清楚了之后才彻底结束，而不是你说走就走了，难道你办会员卡了么这个过程很好理解，<strong>客户端发出请求后，并不意味着服务器都已经完成响应**</strong>所以当客户端请求断开时，并不能立即断开，还需要等待服务器那边处理妥当，再来通知你的确是可以断开了**消息发出来谁知道别人收没收到，所以还需要一个确认</p><h3 id="8-UDP协议"><a href="#8-UDP协议" class="headerlink" title="8. UDP协议"></a>8. UDP协议</h3><p>　　UDP用户数据报协议，是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。 UDP通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。</p><p>　　 UDP与TCP位于同一层，但它不管数据包的顺序、错误或重发。因此，UDP不被应用于那些使用虚电路的面向连接的服务，UDP主要用于那些面向查询—应答的服务，例如NFS。相对于FTP或Telnet，这些服务需要交换的信息量较小。</p><p>　　每个UDP报文分UDP报头和UDP数据区两部分。报头由四个16位长（2字节）字段组成，分别说明该报文的源端口、目的端口、报文长度以及校验值。UDP报头由4个域组成，其中每个域各占用2个字节，具体如下：<br>　　（1）源端口号；</p><p>　　（2）目标端口号；</p><p>　　（3）数据报长度；</p><p>　　（4）校验值。</p><p>　　使用UDP协议包括：TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议） 、 NFS、 BOOTP。</p><p>　　 TCP 与 UDP 的区别：TCP是面向连接的，可靠的字节流服务；UDP是面向无连接的，不可靠的数据报服务。</p><h3 id="9-DNS协议"><a href="#9-DNS协议" class="headerlink" title="9. DNS协议"></a>9. DNS协议</h3><p>　　DNS是域名系统(DomainNameSystem)的缩写，该系统用于命名组织到域层次结构中的计算机和网络服务，可以简单地理解为将URL转换为IP地址。域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，在Internet上域名与IP地址之间是一一对应的，DNS就是进行域名解析的服务器。DNS命名用于Internet等TCP/IP网络中，通过用户友好的名称查找计算机和服务。</p><h3 id="10-NAT协议"><a href="#10-NAT协议" class="headerlink" title="10. NAT协议"></a>10. NAT协议</h3><p>　　NAT网络地址转换(Network Address Translation)属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><h3 id="11-DHCP协议"><a href="#11-DHCP协议" class="headerlink" title="11. DHCP协议"></a>11. DHCP协议</h3><p>　　DHCP动态主机设置协议（Dynamic Host Configuration Protocol）是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><h3 id="12-HTTP协议"><a href="#12-HTTP协议" class="headerlink" title="12. HTTP协议"></a>12. HTTP协议</h3><p>　　超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。</p><p>　　HTTP 协议包括哪些请求？</p><p>　　GET：请求读取由URL所标志的信息。</p><p>　　POST：给服务器添加信息（如注释）。</p><p>　　PUT：在给定的URL下存储一个文档。</p><p>　　DELETE：删除给定的URL所标志的资源。</p><p>　　HTTP 中， POST 与 GET 的区别</p><p>　　1）Get是从服务器上获取数据，Post是向服务器传送数据。</p><p>　　2）Get是把参数数据队列加到提交表单的Action属性所指向的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p><p>　　3）Get传送的数据量小，不能大于2KB；Post传送的数据量较大，一般被默认为不受限制。</p><p>　　4）根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>　　I. 所谓 安全的 意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>　　II. 幂等 的意味着对同一URL的多个请求应该返回同样的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-网络层次划分&quot;&gt;&lt;a href=&quot;#1-网络层次划分&quot; class=&quot;headerlink&quot; title=&quot;1. 网络层次划分&quot;&gt;&lt;/a&gt;1. 网络层次划分&lt;/h3&gt;&lt;p&gt;　　为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://rain-sky.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计网" scheme="https://rain-sky.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://rain-sky.github.io/2021/01/12/%E7%AE%97%E6%B3%95/"/>
    <id>https://rain-sky.github.io/2021/01/12/%E7%AE%97%E6%B3%95/</id>
    <published>2021-01-12T09:40:09.000Z</published>
    <updated>2021-01-22T13:09:47.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>广度优先搜索算法（Breadth-First Search，BFS）是一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。BFS并不使用经验法则算法。</p><p>广度优先搜索让你能够找出两样东西之间的最短距离，不过最短距离的含义有很多！使用广度优先搜索可以：</p><ol><li>编写国际跳棋AI，计算最少走多少步就可获胜；</li><li>编写拼写检查器，计算最少编辑多少个地方就可将错拼的单词改成正确的单词，如将READED改为READER需要编辑一个地方；</li><li>根据你的人际关系网络找到关系最近的医生。</li></ol><h1 id="二、例子"><a href="#二、例子" class="headerlink" title="二、例子"></a>二、例子</h1><p>假设你居住在旧金山，要从双子峰前往金门大桥。你想乘公交车前往，并希望换乘最少。可乘坐的公交车如下。</p><p><img src="https://img-blog.csdnimg.cn/2019042512582052.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>为找出换乘最少的乘车路线，你将使用什么样的算法？<br>一步就能到达金门大桥吗？下面突出了所有一步就能到达的地方。</p><p><img src="https://img-blog.csdnimg.cn/20190425125909925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>金门大桥未突出，因此一步无法到达那里。两步能吗？</p><p><img src="https://img-blog.csdnimg.cn/20190425125941127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>金门大桥也未突出，因此两步也到不了。三步呢？</p><p><img src="https://img-blog.csdnimg.cn/20190425130010971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>金门大桥突出了！因此从双子峰出发，可沿下面的路线三步到达金门大桥。</p><p><img src="https://img-blog.csdnimg.cn/20190425130033978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p> 还有其他前往金门大桥的路线，但它们更远（需要四步）。这个算法发现，前往金门大桥的最短路径需要三步。这种问题被称为最短路径问题（shorterst-path problem）。你经常要找出最短路径，这可能是前往朋友家的最短路径，也可能是国际象棋中把对方将死的最少步数。解决最短路径问题的算法被称为广度优先搜索。要确定如何从双子峰前往金门大桥，需要两个步骤。<br>(1) 使用图来建立问题模型。<br>(2) 使用广度优先搜索解决问题。<br>下面介绍什么是图，然后再详细探讨广度优先搜索。</p><h1 id="三、图"><a href="#三、图" class="headerlink" title="三、图"></a>三、图</h1><p>图是由顶点的有穷非空集合和顶点之间边的集合组成，通过表示为G(V,E)，其中，G标示一个图，V是图G中顶点的集合，E是图G中边的集合。</p><p>无边图：若顶点Vi到Vj之间的边没有方向，则称这条边为无项边（Edge），用序偶对(Vi,Vj)标示。</p><p>对于下图无向图G1来说，G1=(V1, {E1})，其中顶点集合V1={A,B,C,D}；边集合E1={(A,B),(B,C),(C,D),(D,A),(A,C)}:</p><p><img src="https://img-blog.csdnimg.cn/20190425130245486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>有向图：若从顶点Vi到Vj的边是有方向的，则成这条边为有向边，也称为弧（Arc）。用有序对（Vi，Vj）标示，Vi称为弧尾，Vj称为弧头。如果任意两条边之间都是有向的，则称该图为有向图。</p><p>有向图G2中，G2=（V2,{E2}），顶点集合（A,B,C,D）,弧集合E2={&lt;A,D&gt;,{B,A},&lt;C,A&gt;,&lt;B,C&gt;}.</p><p>权：有些图的边和弧有相关的数，这个数叫做权。这些带权的图通常称为网。</p><h1 id="四、广度优先搜索算法"><a href="#四、广度优先搜索算法" class="headerlink" title="四、广度优先搜索算法"></a>四、广度优先搜索算法</h1><p>假设你经营着一个芒果农场，需要寻找芒果销售商，以便将芒果卖给他。在Facebook，你与芒果销售商有联系吗？为此，你可在朋友中查找。</p><p><img src="https://img-blog.csdnimg.cn/20190425130541285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>这种查找很简单。首先，创建一个朋友名单。</p><p><img src="https://img-blog.csdnimg.cn/20190425130557936.png" alt="img"></p><p> 然后，依次检查名单中的每个人，看看他是否是芒果销售商。</p><p><img src="https://img-blog.csdnimg.cn/20190425130627134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p> 假设你没有朋友是芒果销售商，那么你就必须在朋友的朋友中查找。</p><p><img src="https://img-blog.csdnimg.cn/20190425130708732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p> 检查名单中的每个人时，你都将其朋友加入名单。</p><p><img src="https://img-blog.csdnimg.cn/20190425130746766.png" alt="img"></p><p> 这样一来，你不仅在朋友中查找，还在朋友的朋友中查找。别忘了，你的目标是在你的人际关系网中找到一位芒果销售商。因此，如果Alice不是芒果销售商，就将其朋友也加入到名单中。这意味着你将在她的朋友、朋友的朋友等中查找。使用这种算法将搜遍你的整个人际关系网，直到找到芒果销售商。这就是广度优先搜索算法。</p><h1 id="五、查找最短路径"><a href="#五、查找最短路径" class="headerlink" title="五、查找最短路径"></a>五、查找最短路径</h1><p>再说一次，广度优先搜索可回答两类问题。<br>第一类问题：从节点A出发，有前往节点B的路径吗？（在你的人际关系网中，有芒果销售商吗？）<br>第二类问题：从节点A出发，前往节点B的哪条路径最短？（哪个芒果销售商与你的关系最近？）<br>刚才你看到了如何回答第一类问题，下面来尝试回答第二类问题——谁是关系最近的芒果销售商。例如，朋友是一度关系，朋友的朋友是二度关系。</p><p><img src="https://img-blog.csdnimg.cn/20190425130919177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p> 在你看来，一度关系胜过二度关系，二度关系胜过三度关系，以此类推。因此，你应先在一度关系中搜索，确定其中没有芒果销售商后，才在二度关系中搜索。广度优先搜索就是这样做的！在广度优先搜索的执行过程中，搜索范围从起点开始逐渐向外延伸，即先检查一度关系，再检查二度关系。顺便问一句：将先检查Claire还是Anuj呢？Claire是一度关系，而Anuj是二度关系，因<br>此将先检查Claire，后检查Anuj。</p><p>你也可以这样看，一度关系在二度关系之前加入查找名单。</p><p>你按顺序依次检查名单中的每个人，看看他是否是芒果销售商。这将先在一度关系中查找，再在二度关系中查找，因此找到的是关系最近的芒果销售商。广度优先搜索不仅查找从A到B的路径，而且找到的是最短的路径。</p><p><img src="https://img-blog.csdnimg.cn/20190425131016430.png" alt="img"></p><p> 注意，只有按添加顺序查找时，才能实现这样的目的。换句话说，如果Claire先于Anuj加入名单，就需要先检查Claire，再检查Anuj。如果Claire和Anuj都是芒果销售商，而你先检查Anuj再检查Claire，结果将如何呢？找到的芒果销售商并非是与你关系最近的，因为Anuj是你朋友的朋友，而Claire是你的朋友。因此，你需要按添加顺序进行检查。有一个可实现这种目的的数据<br>结构，那就是队列（queue）。</p><h1 id="六、队列"><a href="#六、队列" class="headerlink" title="六、队列"></a>六、队列</h1><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。</p><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><p>建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置，如图所示</p><p><a href="https://baike.baidu.com/pic/%E9%98%9F%E5%88%97/14580481/0/cdbf6c81800a19d8116a4d8030fa828ba71e46ce?fr=lemma&amp;ct=single"><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=2044fd5c3a01213fcb3349de64e636f8/cdbf6c81800a19d8116a4d8030fa828ba71e46ce.jpg" alt="img"></a></p><p>每次在队尾插入一个元素是，rear增1；每次在队头删除一个元素时，front增1。随着插入和删除操作的进行，队列元素的个数不断变化，队列所占的存储空间也在为队列结构所分配的连续空间中移动。当front=rear时，队列中没有任何元素，称为空队列。当rear增加到指向分配的连续空间之外时，队列无法再插入新元素，但这时往往还有大量可用空间未被占用，这些空间是已经出队的队列元素曾经占用过得存储单元。</p><p>顺序队列中的溢出现象：</p><p>（1） “下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。</p><p>（2）”真上溢”现象：当队列满时，做进栈运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。</p><p>（3）”假上溢”现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为”假上溢”现象。</p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置。自己真从MaxSize-1增1变到0，可用取余运算rear%MaxSize和front%MaxSize来实现。这实际上是把队列空间想象成一个环形空间，环形空间中的存储单元循环使用，用这种方法管理的队列也就称为循环队列。除了一些简单应用之外，真正实用的队列是循环队列。 [2] </p><p>在循环队列中，当队列为空时，有front=rear，而当所有队列空间全占满时，也有front=rear。为了区别这两种情况，规定循环队列最多只能有MaxSize-1个队列元素，当循环队列中只剩下一个空存储单元时，队列就已经满了。因此，队列判空的条件时front=rear，而队列判满的条件时front=（rear+1）%MaxSize。队空和队满的情况如图：</p><p><img src="https://img-blog.csdnimg.cn/20190425131408367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><h1 id="七、广度优先搜索算法实现"><a href="#七、广度优先搜索算法实现" class="headerlink" title="七、广度优先搜索算法实现"></a>七、广度优先搜索算法实现</h1><p>我们要从“你”出发找到“ANUJ”，关系表示为下图，使用广度优先搜索算法</p><p><img src="https://img-blog.csdnimg.cn/20190425131729132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p> 先概述一下这种算法的工作原理。</p><p><img src="https://img-blog.csdnimg.cn/20190425131859171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3NDgyMjAy,size_16,color_FFFFFF,t_70" alt="img"></p><p>但这样可能会出现一些问题，Peggy既是Alice的朋友又是Bob的朋友，因此她将被加入队列两次：一次是在添加Alice的朋友时，另一次是在添加Bob的朋友时。因此，搜索队列将包含两个Peggy。</p><p><img src="https://img-blog.csdnimg.cn/20190425132141757.png" alt="img"></p><p>但你只需检查Peggy一次，看她是不是芒果销售商。如果你检查两次，就做了无用功。因此，检查完一个人后，应将其标记为已检查，且不再检查他。<br>如果不这样做，就可能会导致无限循环。假设你的人际关系网类似于下面这样。</p><p><img src="https://img-blog.csdnimg.cn/20190425132220829.png" alt="img"></p><p>一开始，搜索队列包含你的所有邻居。</p><p><img src="https://img-blog.csdnimg.cn/2019042513224723.png" alt="img"></p><p>现在你检查Peggy。她不是芒果销售商，因此你将其所有邻居都加入搜索队列。</p><p><img src="https://img-blog.csdnimg.cn/20190425132306499.png" alt="img"></p><p>接下来，你检查自己。你不是芒果销售商，因此你将你的所有邻居都加入搜索队列。</p><p><img src="https://img-blog.csdnimg.cn/20190425132328874.png" alt="img"></p><p>以此类推。这将形成无限循环，因为搜索队列将在包含你和包含Peggy之间反复切换。</p><p><img src="https://img-blog.csdnimg.cn/2019042513235043.png" alt="img"></p><p>检查一个人之前，要确认之前没检查过他，这很重要。为此，你可使用一个列表来记录检查过的人。</p><p>首先，需要使用代码来实现图。图由多个节点组成。<br>每个节点都与邻近节点相连，如果表示类似于“你→Bob”这样的关系呢？好在你知道的一种结构让你能够表示这种关系，它就是散列表！<br>记住，散列表让你能够将键映射到值。在这里，你要将节点映射到其所有邻居。</p><p>图不过是一系列的节点和边，因此在JAVA中，你可以使用HashMap来表示一个图。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFS</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        HashMap&lt;String,String[]&gt; hashMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">"YOU"</span>,<span class="keyword">new</span> String[]{<span class="string">"CLAIRE"</span>,<span class="string">"ALICE"</span>,<span class="string">"BOB"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"CLAIRE"</span>,<span class="keyword">new</span> String[]{<span class="string">"YOU"</span>,<span class="string">"JONNY"</span>,<span class="string">"THON"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"JONNY"</span>,<span class="keyword">new</span> String[]{<span class="string">"CLAIRE"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"THOH"</span>,<span class="keyword">new</span> String[]{<span class="string">"CLAIRE"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"ALICE"</span>,<span class="keyword">new</span> String[]{<span class="string">"YOU"</span>,<span class="string">"PEGGY"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"BOB"</span>,<span class="keyword">new</span> String[]{<span class="string">"YOU"</span>,<span class="string">"PEGGY"</span>,<span class="string">"ANUJ"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"PEGGY"</span>,<span class="keyword">new</span> String[]{<span class="string">"BOB"</span>,<span class="string">"ALICE"</span>});</span><br><span class="line">        hashMap.put(<span class="string">"ANUJ"</span>,<span class="keyword">new</span> String[]{<span class="string">"BOB"</span>});</span><br><span class="line">        Node target = findTarget(<span class="string">"YOU"</span>,<span class="string">"ANUJ"</span>,hashMap);</span><br><span class="line">        <span class="comment">//打印出最短路径的各个节点信息</span></span><br><span class="line">        printSearPath(target);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印出到达节点target所经过的各个节点信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSearPath</span><span class="params">(Node target)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.print(<span class="string">"找到了目标节点:"</span> + target.id + <span class="string">"\n"</span>);</span><br><span class="line">            List&lt;Node&gt; searchPath = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">            searchPath.add(target);</span><br><span class="line">            Node node = target.parent;</span><br><span class="line">            <span class="keyword">while</span>(node!=<span class="keyword">null</span>) {</span><br><span class="line">                searchPath.add(node);</span><br><span class="line">                node = node.parent;</span><br><span class="line">            }</span><br><span class="line">            String path = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=searchPath.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) {</span><br><span class="line">                path += searchPath.get(i).id;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>) {</span><br><span class="line">                    path += <span class="string">"--&gt;"</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            System.out.print(<span class="string">"步数最短："</span>+path);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.print(<span class="string">"未找到了目标节点"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Node <span class="title">findTarget</span><span class="params">(String startId,String targetId,HashMap&lt;String,String[]&gt; map)</span> </span>{</span><br><span class="line">        List&lt;String&gt; hasSearchList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        LinkedBlockingQueue&lt;Node&gt; queue=<span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(startId,<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()) {</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(hasSearchList.contains(node.id)) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            System.out.print(<span class="string">"判断节点:"</span> + node.id +<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">if</span> (targetId.equals(node.id)) {</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            hasSearchList.add(node.id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.get(node.id) != <span class="keyword">null</span> &amp;&amp; map.get(node.id).length &gt; <span class="number">0</span>) {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String childId : map.get(node.id)) {</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Node(childId,node));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>{</span><br><span class="line">        <span class="keyword">public</span> String id;</span><br><span class="line">        <span class="keyword">public</span> Node parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String id,Node parent)</span> </span>{</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;h2 id=&quot;广度优先搜索&quot;&gt;&lt;a href=&quot;#广度优先搜索&quot; class=&quot;headerlink&quot; title=&quot;广度优先搜索&quot;&gt;&lt;/a&gt;广</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://rain-sky.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://rain-sky.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理</title>
    <link href="https://rain-sky.github.io/2021/01/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
    <id>https://rain-sky.github.io/2021/01/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</id>
    <published>2021-01-12T09:39:46.000Z</published>
    <updated>2021-01-22T13:09:25.758Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数据库概念</strong></p><p>数据库(Database,简称DB)是长期储存在计算机内、有组织的、可共享的大量数据的集合。</p><ol><li>数据库系统的特点</li></ol><ul><li>数据结构化</li><li>数据的共享性高，冗余度低，易扩充</li><li>数据独立性高</li><li>数据由DBMS统一管理和控制</li></ul><ol><li>两大类数据模型</li></ol><ul><li>概念模型也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。</li><li>逻辑模型和物理模型，逻辑模型主要包括网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用于DBMS实现。物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。</li></ul><ol><li>关系数据库</li></ol><ul><li>关系数据库系统采用关系模型作为数据的组织方式，在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表。</li></ul><ol><li>数据库系统的三级模式结构</li></ol><ul><li>模式（Schema）</li><li>外模式（External Schema）</li><li>内模式（Internal Schema）</li></ul><ol><li>关系模式</li></ol><ul><li><p>关系模式可以形式化地表示为：</p><p><strong>R（U，D，DOM，F）</strong></p><p><strong>R 关系名</strong></p><p><strong>U 组成该关系的属性名集合</strong></p><p><strong>D 属性组U中属性所来自的域</strong></p><p><strong>DOM 属性向域的映象集合</strong></p><p><strong>F 属性间的数据依赖关系集合</strong></p></li></ul><ol><li>实体完整性规则（Entity Integrity）</li></ol><ul><li>若属性A是基本关系R的主属性，则属性A不能取空值;关系模型中以主码作为唯一性标识。</li></ul><ol><li>参照完整性规则</li></ol><ul><li>若属性（或属性组）F是基本关系R的外码它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：<ul><li>或者取空值（F的每个属性值均为空值）</li><li>或者等于S中某个元组的主码值</li></ul></li></ul><ol><li>关系代数运算符</li></ol><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230252369.png" alt="img"><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302525419.png" alt="img"></p><p><strong>关系数据库标准语言SQL</strong></p><p>SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言。集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体。可以独立完成数据库生命周期中的全部活动：</p><ul><li>定义关系模式，插入数据，建立数据库；</li><li>对数据库中的数据进行查询和更新；</li><li>数据库重构和维护</li><li>数据库安全性、完整性控制等</li></ul><ol><li>能完成核心功能9个动词</li></ol><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302534580.png" alt="img"></p><ol><li>SQL的基本概念</li></ol><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230253185.png" alt="img"></p><ol><li>数据定义</li></ol><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302531614.png" alt="img"></p><ul><li><p>定义模式</p><ul><li><p>定义模式实际上定义了一个命名空间</p></li><li><p>在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。</p></li><li><p>在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。</p><p><strong>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</strong></p></li></ul></li><li><p>删除模式</p><p>**DROP SCHEMA &lt;模式名&gt; **</p><ul><li>CASCADE(级联)</li></ul><p>删除模式的同时把该模式中所有的数据库对象全部删除</p><ul><li>RESTRICT(限制)</li></ul><p>如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。当该模式中没有任何下属的对象时 才能执行。</p></li><li><p>定义基本表</p><p><strong>CREATE TABLE &lt;表名&gt;</strong></p><p><strong>（&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]</strong></p><p><strong>[，&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ] …</strong></p><p><strong>[，&lt;表级完整性约束条件&gt; ] ）；</strong></p><p>如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。</p></li><li><p>数据类型</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302541124.png" alt="img"></p></li><li><p>模式与表</p><ul><li><p>每一个基本表都属于某一个模式</p></li><li><p>一个模式包含多个基本表</p></li><li><p>定义基本表所属模式</p></li><li><p>方法一：在表名中明显地给出模式名</p><p><strong>Create table “S-T”.Student（……）; /*模式名为 S-T*/</strong></p><p><strong>Create table “S-T”.Cource（……）;</strong></p><p><strong>Create table “S-T”.SC（……）;</strong></p></li><li><p>方法二：在创建模式语句中同时创建表</p></li><li><p>方法三：设置所属的模式</p></li></ul></li><li><p>修改基本表</p><p><strong>ALTER TABLE &lt;表名&gt;</strong></p><p><strong>[ ADD &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ]</strong></p><p><strong>[ DROP &lt;完整性约束名&gt; ]</strong></p><p><strong>[ ALTER COLUMN&lt;列名&gt; &lt;数据类型&gt; ]；</strong></p></li><li><p>删除基本表</p><p><strong>DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］；</strong></p><ul><li>RESTRICT：删除表是有限制的。<ul><li>欲删除的基本表不能被其他表的约束所引用</li><li>如果存在依赖该表的对象，则此表不能被删除</li></ul></li><li>CASCADE：删除该表没有限制。<ul><li>在删除基本表的同时，相关的依赖对象一起删除</li></ul></li></ul></li><li><p>索 引</p><ul><li>RDBMS中索引一般采用B+树、HASH索引来实现<ul><li>B+树索引具有动态平衡的优点</li><li>HASH索引具有查找速度快的特点</li></ul></li><li>采用B+树，还是HASH索引 则由具体的RDBMS来决定</li><li>索引是关系数据库的内部实现技术，属于内模式的范畴</li><li>CREATE INDEX语句定义索引时，可以定义索引是唯一索引、非唯一索引或聚簇索引</li></ul></li><li><p>建立索引</p><ul><li><p>语句格式</p><p><strong>CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt;</strong></p><p><strong>ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;] ]…)；</strong></p><ul><li>在最经常查询的列上建立聚簇索引以提高查询效率</li><li>一个基本表上最多只能建立一个聚簇索引</li><li>经常更新的列不宜建立聚簇索引</li></ul></li></ul></li><li><p>删除索引</p><p><strong>DROP INDEX &lt;索引名&gt;；</strong></p></li></ul><ol><li>数据查询</li></ol><ul><li><p>语句格式</p><p><strong>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[，&lt;目标列表达式&gt;] …</strong></p><p><strong>FROM &lt;表名或视图名&gt;[， &lt;表名或视图名&gt; ] …</strong></p><p><strong>[ WHERE &lt;条件表达式&gt; ]</strong></p><p><strong>[ GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ]</strong></p><p><strong>[ ORDER BY &lt;列名2&gt; [ ASC|DESC ] ]；</strong></p></li><li><p>单表查询</p><ul><li>选择表中的若干列</li><li>选择表中的若干元组</li><li>ORDER BY子句<ul><li>可以按一个或多个属性列排序</li><li>升序：ASC；降序：DESC；缺省值为升序</li><li>当排序列含空值时</li><li>ASC：排序列为空值的元组最后显示</li><li>DESC：排序列为空值的元组最先显示</li></ul></li><li>聚集函数<ul><li>计数</li><li>COUNT（[DISTINCT|ALL] *）</li><li>COUNT（[DISTINCT|ALL] &lt;列名&gt;）</li><li>计算总和</li><li>SUM（[DISTINCT|ALL] &lt;列名&gt;）  </li><li>计算平均值</li><li>AVG（[DISTINCT|ALL] &lt;列名&gt;）</li><li>最大最小值</li><li>MAX（[DISTINCT|ALL] &lt;列名&gt;）</li><li>MIN（[DISTINCT|ALL] &lt;列名&gt;）</li></ul></li><li>GROUP BY子句</li></ul></li><li><p>查询的一般规律：先依据条件查询得到结果集，再将分组后的结果集筛选并排序。</p></li><li><p>HAVING短语与WHERE子句的区别：</p><ul><li>作用对象不同</li><li>WHERE子句作用于基表或视图，从中选择满足条件的元组</li><li>HAVING短语作用于组，从中选择满足条件的组。</li></ul></li><li><p>常用的查询条件</p></li></ul><p>查 询 条 件</p><p>谓 词</p><p>比 较</p><p>=，&gt;，&lt;，&gt;=，&lt;=，!=，&lt;&gt;，!&gt;，!&lt;；NOT+上述比较运算符</p><p>确定范围</p><p>BETWEEN AND，NOT BETWEEN AND</p><p>确定集合</p><p>IN，NOT IN</p><p>字符匹配</p><p>LIKE，NOT LIKE</p><p>空 值</p><p>IS NULL，IS NOT NULL</p><p>多重条件（逻辑运算）</p><p>AND，OR，NOT</p><ul><li><p>ESCAPE ‘＼’ 表示” ＼” 为换码字符</p></li><li><p>连接查询</p><ul><li>等值与非等值连接查询</li><li>自身连接<ul><li>一个表与其自己进行连接<ul><li>需要给表起别名以示区别</li><li>由于所有属性名都是同名属性，因此必须使用别名前缀</li></ul></li></ul></li><li>外连接<ul><li>外连接与普通连接的区别<ul><li>普通连接操作只输出满足连接条件的元组</li><li>外连接操作以指定表为连接主体，将主体表中不满足连接条件的元组一并输出</li></ul></li><li>左外连接<ul><li>列出左边关系（如本例Student）中所有的元组</li></ul></li><li>右外连接<ul><li>列出右边关系中所有的元组</li></ul></li></ul></li><li>复合条件连接</li></ul></li><li><p>嵌套查询</p><p>一个SELECT-FROM-WHERE语句称为一个查询块</p><p>将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询</p><ul><li>子查询的限制<ul><li>不能使用ORDER BY子句<ul><li>层层嵌套方式反映了 SQL语言的结构化</li><li>有些嵌套查询可以用连接运算替代</li></ul></li></ul></li><li>嵌套查询求解方法<ul><li>子查询的查询条件不依赖于父查询<ul><li>由里向外 逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。</li><li>首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表</li><li>然后再取外层表的下一个元组</li><li>重复这一过程，直至外层表全部检查完为止</li></ul></li></ul></li><li>带有比较运算符的子查询<ul><li>当能确切知道内层查询返回单值时，可用比较运算符（&gt;，&lt;，=，&gt;=，&lt;=，!=或&lt; &gt;）。</li><li>与ANY或ALL谓词配合使用</li></ul></li><li>带有ANY（SOME）或ALL谓词的子查询<ul><li>需要配合使用比较运算符<ul><li>&gt; ANY  大于子查询结果中的某个值</li><li>&gt; ALL  大于子查询结果中的所有值</li><li>&lt; ANY  小于子查询结果中的某个值</li><li>&lt; ALL  小于子查询结果中的所有值</li><li>&gt;= ANY  大于等于子查询结果中的某个值</li><li>&gt;= ALL  大于等于子查询结果中的所有值</li><li>&lt;= ANY  小于等于子查询结果中的某个值</li><li>&lt;= ALL  小于等于子查询结果中的所有值</li><li>= ANY  等于子查询结果中的某个值</li><li>=ALL  等于子查询结果中的所有值（通常没有实际意义）</li><li>!=（或&lt;&gt;）ANY  不等于子查询结果中的某个值</li><li>!=（或&lt;&gt;）ALL  不等于子查询结果中的任何一个值</li></ul></li></ul></li><li>带有EXISTS谓词的子查询<ul><li>\1. EXISTS谓词,存在量词$</li><li>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值”true”或逻辑假值”false”。<ul><li>若内层查询结果非空，则外层的WHERE子句返回真值</li><li>若内层查询结果为空，则外层的WHERE子句返回假值</li></ul></li><li>由EXISTS引出的子查询，其目标列表达式通常都用* ，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义</li><li>\2. NOT EXISTS谓词<ul><li>若内层查询结果非空，则外层的WHERE子句返回假值</li><li>若内层查询结果为空，则外层的WHERE子句返回真值</li></ul></li></ul></li></ul></li><li><p>集合查询</p><ul><li>集合操作的种类<ul><li>并操作UNION</li><li>交操作INTERSECT</li><li>差操作EXCEPT</li></ul></li><li>参加集合操作的各查询结果的列数必须相同；对应项的数据类型也必须相同</li></ul></li><li><p>SELECT语句的一般格式</p><p><strong>SELECT [ALL|DISTINCT]</strong></p><p><strong>&lt;目标列表达式&gt; [别名] [ ，&lt;目标列表达式&gt; [别名]] …</strong></p><p><strong>FROM &lt;表名或视图名&gt; [别名]</strong></p><p><strong>[ ，&lt;表名或视图名&gt; [别名]] …</strong></p><p><strong>[WHERE &lt;条件表达式&gt;]</strong></p><p><strong>[GROUP BY &lt;列名1&gt;</strong></p><p><strong>[HAVING &lt;条件表达式&gt;]]</strong></p><p><strong>[ORDER BY &lt;列名2&gt; [ASC|DESC]</strong></p></li></ul><ol><li>数据更新</li></ol><ul><li><p>插入数据</p><ul><li><p>插入元组</p><ul><li><p>语句格式</p><p><strong>INSERT</strong></p><p><strong>INTO &lt;表名&gt; [(&lt;属性列1&gt;[，&lt;属性列2 &gt;…)]</strong></p><p><strong>VALUES (&lt;常量1&gt; [，&lt;常量2&gt;] … )</strong></p></li></ul></li><li><p>插入子查询结果</p><ul><li>语句格式</li></ul><p><strong>INSERT</strong></p><p><strong>INTO &lt;表名&gt; [(&lt;属性列1&gt; [，&lt;属性列2&gt;… )]</strong></p><p><strong>子查询；</strong></p><ul><li>子查询</li></ul><p>SELECT子句目标列必须与INTO子句匹配</p><ul><li>值的个数</li><li>值的类型</li></ul></li></ul></li></ul><ol><li>修改数据</li></ol><ul><li><p>语句格式</p><p><strong>UPDATE &lt;表名&gt;</strong></p><p><strong>SET &lt;列名&gt;=&lt;表达式&gt;[，&lt;列名&gt;=&lt;表达式&gt;]…</strong></p><p><strong>[WHERE &lt;条件&gt;]；</strong></p></li></ul><ol><li>删除数据</li></ol><ul><li><p>语句格式</p><p><strong>DELETE</strong></p><p><strong>FROM &lt;表名&gt;</strong></p><p><strong>[WHERE &lt;条件&gt;]；</strong></p></li></ul><ol><li>视 图</li></ol><ul><li><p>虚表，是从一个或几个基本表（或视图）导出的表</p></li><li><p>只存放视图的定义，不存放视图对应的数据</p></li><li><p>基表中的数据发生变化，从视图中查询出的数据也随之改变</p></li><li><p>建立视图</p><ul><li>语句格式</li></ul><p><strong>CREATE VIEW</strong></p><p><strong>&lt;视图名&gt; [(&lt;列名&gt; [，&lt;列名&gt;]…)]</strong></p><p><strong>AS &lt;子查询&gt;</strong></p><p><strong>[WITH CHECK OPTION]；</strong></p></li><li><p>删除视图</p><p><strong>DROP VIEW &lt;视图名&gt;；</strong></p></li><li><p>查询视图</p><ul><li>用户角度：查询视图与查询基本表相同</li></ul></li><li><p>视图的作用</p></li></ul><ol><li>视图能够简化用户的操作</li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li><li>视图能够对机密数据提供安全保护</li><li>适当的利用视图可以更清晰的表达查询</li></ol><p><strong>数据库安全性</strong></p><ol><li>数据库安全性控制的常用方法</li></ol><ul><li>用户标识和鉴定</li><li>存取控制</li><li>视图</li><li>审计</li><li>密码存储</li></ul><ol><li><p>关系数据库系统中存取控制对象</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302543665.png" alt="img"></p></li><li><p>授权与回收</p></li></ol><ul><li><p>GRANT</p><ul><li>GRANT语句的一般格式：</li></ul><p><strong>GRANT &lt;权限&gt;[,&lt;权限&gt;]…</strong></p><p><strong>[ON &lt;对象类型&gt; &lt;对象名&gt;]</strong></p><p><strong>TO &lt;用户&gt;[,&lt;用户&gt;]…</strong></p><p><strong>[WITH GRANT OPTION];</strong></p></li><li><p>语义：将对指定操作对象的指定操作权限授予指定的用户</p></li><li><p>WITH GRANT OPTION子句</p><ul><li>WITH GRANT OPTION子句:<ul><li>指定：可以再授予</li><li>没有指定：不能传播</li></ul></li><li>不允许循环授权</li></ul></li><li><p>REVOKE</p><ul><li>授予的权限可以由DBA或其他授权者用REVOKE语句收回</li><li>REVOKE语句的一般格式为：</li></ul><p><strong>REVOKE &lt;权限&gt;[,&lt;权限&gt;]…</strong></p><p><strong>[ON &lt;对象类型&gt; &lt;对象名&gt;]</strong></p><p><strong>FROM &lt;用户&gt;[,&lt;用户&gt;]…;</strong></p></li><li><p>创建数据库模式的权限</p><ul><li>DBA在创建用户时实现</li><li>CREATE USER语句格式</li></ul><p>**CREATE USER **</p><p><strong>[WITH][DBA | RESOURCE | CONNECT]</strong></p></li></ul><ol><li>数据库角色</li></ol><ul><li><p>数据库角色：被命名的一组与数据库操作相关的权限</p><ul><li>角色是权限的集合</li><li>可以为一组具有相同权限的用户创建一个角色</li><li>简化授权的过程</li></ul></li><li><p>角色的创建</p><p><strong>CREATE ROLE &lt;角色名&gt;</strong></p></li><li><p>给角色授权</p><p><strong>GRANT &lt;权限&gt;［，&lt;权限&gt;］…</strong></p><p><strong>ON &lt;对象类型&gt;对象名</strong></p><p><strong>TO &lt;角色&gt;［，&lt;角色&gt;］…</strong></p></li><li><p>将一个角色授予其他的角色或用户</p><p><strong>GRANT &lt;角色1&gt;［，&lt;角色2&gt;］…</strong></p><p><strong>TO &lt;角色3&gt;［，&lt;用户1&gt;］…</strong></p><p><strong>［WITH ADMIN OPTION］</strong></p></li><li><p>角色权限的收回</p><p><strong>REVOKE &lt;权限&gt;［，&lt;权限&gt;］…</strong></p><p><strong>ON &lt;对象类型&gt; &lt;对象名&gt;</strong></p><p><strong>FROM &lt;角色&gt;［，&lt;角色&gt;］…</strong></p></li></ul><p><strong>数据库完整性</strong></p><ul><li>数据库的完整性<ul><li>数据的正确性和相容性</li></ul></li><li>数据的完整性和安全性是两个不同概念<ul><li>数据的完整性<ul><li>防止数据库中存在不符合语义的数据，也就是防止数据库中存在不正确的数据</li><li>防范对象：不合语义的、不正确的数据</li></ul></li><li>数据的安全性<ul><li>保护数据库防止恶意的破坏和非法的存取</li><li>防范对象：非法用户和非法操作</li></ul></li></ul></li><li><strong>实体完整性</strong><ul><li>关系模型的实体完整性<ul><li>CREATE TABLE中用PRIMARY KEY定义</li></ul></li><li>单属性构成的码有两种说明方法<ul><li>定义为列级约束条件</li><li>定义为表级约束条件</li></ul></li><li>对多个属性构成的码只有一种说明方法<ul><li>定义为表级约束条件</li></ul></li><li>插入或对主码列进行更新操作时，RDBMS按照实体完整性规则自动进行检查。包括：</li></ul></li></ul><ol><li>检查主码值是否唯一，如果不唯一则拒绝插入或修改</li><li>检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改</li></ol><ul><li><p>检查记录中主码值是否唯一的一种方法是进行全表扫描</p></li><li><p><strong>参照完整性</strong></p><ul><li><p>关系模型的参照完整性定义</p><ul><li><p>在CREATE TABLE中用FOREIGN KEY短语定义哪些列为外码</p></li><li><p>用REFERENCES短语指明这些外码参照哪些表的主码</p><p>例如，关系SC中一个元组表示一个学生选修的某门课程的成绩，（Sno，Cno）是主码。Sno，Cno分别参照引用Student表的主码和Course表的主码</p><p>［例3］ 定义SC中的参照完整性</p><p>CREATE TABLE SC</p><p>(Sno CHAR(9) NOT NULL，</p><p>Cno CHAR(4) NOT NULL，</p><p>Grade SMALLINT，</p><p>PRIMARY KEY (Sno， Cno)， /<em>在表级定义实体完整性</em>/</p><p>FOREIGN KEY (Sno) REFERENCES Student(Sno)，</p><p>/<em>在表级定义参照完整性</em>/</p><p>FOREIGN KEY (Cno) REFERENCES Course(Cno)</p><p>/<em>在表级定义参照完整性</em>/</p><p>);</p></li></ul></li></ul></li><li><p><strong>用户定义的完整性</strong></p><ul><li>属性上的约束条件的定义<ul><li>CREATE TABLE时定义</li><li>列值非空（NOT NULL）</li><li>列值唯一（UNIQUE）</li><li>检查列值是否满足一个布尔表达式（CHECK）</li></ul></li><li>属性上的约束条件检查和违约处理<ul><li>插入元组或修改属性的值时，RDBMS检查属性上的约束条件是否被满足</li><li>如果不满足则操作被拒绝执行</li></ul></li><li>元组上的约束条件的定义<ul><li>在CREATE TABLE时可以用CHECK短语定义元组上的约束条件，即元组级的限制</li><li>同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件</li></ul></li><li>元组上的约束条件检查和违约处理<ul><li>插入元组或修改属性的值时，RDBMS检查元组上的约束条件是否被满足</li><li>如果不满足则操作被拒绝执行</li></ul></li></ul></li><li><p><strong>完整性约束命名子句</strong></p><ul><li><p>CONSTRAINT 约束</p><p><strong>CONSTRAINT &lt;完整性约束条件名&gt;</strong></p><p><strong>［PRIMARY KEY短语</strong></p><p><strong>|FOREIGN KEY短语</strong></p><p><strong>|CHECK短语］</strong></p></li><li><p>使用ALTER TABLE语句修改表中的完整性限制</p></li><li><p>SQL支持域的概念，并可以用CREATE DOMAIN语句建立一个域以及该域应该满足的完整性约束条件。</p></li></ul></li><li><p><strong>触发器</strong></p><ul><li><p>定义触发器</p><ul><li><p>CREATE TRIGGER语法格式</p><p><strong>CREATE TRIGGER &lt;触发器名&gt;</strong></p><p><strong>{BEFORE | AFTER} &lt;触发事件&gt; ON &lt;表名&gt;</strong></p><p><strong>FOR EACH {ROW | STATEMENT}</strong></p><p><strong>［WHEN &lt;触发条件&gt;］</strong></p><p><strong>&lt;触发动作体&gt;</strong></p></li></ul></li><li><p>定义触发器的语法说明:</p><ul><li>\1. 创建者：表的拥有者</li><li>\2. 触发器名</li><li>\3. 表名：触发器的目标表</li><li>\4. 触发事件：INSERT、DELETE、UPDATE</li><li>\5. 触发器类型<ul><li>行级触发器（FOR EACH ROW）</li><li>语句级触发器（FOR EACH STATEMENT）</li></ul></li><li>\6. 触发条件<ul><li>触发条件为真</li><li>省略WHEN触发条件</li></ul></li><li>\7. 触发动作体<ul><li>触发动作体可以是一个匿名PL/SQL过程块</li><li>也可以是对已创建存储过程的调用</li></ul></li></ul></li><li><p>激活触发器</p><ul><li>触发器的执行，是由触发事件激活的，并由数据库服务器自动执行</li><li>一个数据表上可能定义了多个触发器<ul><li>同一个表上的多个触发器激活时遵循如下的执行顺序：</li><li>（1） 执行该表上的BEFORE触发器；</li><li>（2） 激活触发器的SQL语句；</li><li>（3） 执行该表上的AFTER触发器。</li></ul></li></ul></li><li><p>删除触发器</p><ul><li><p>删除触发器的SQL语法：</p><p><strong>DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;;</strong></p></li><li><p>触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除。</p></li></ul></li></ul></li></ul><p><strong>关系数据理论</strong></p><ul><li><p><strong>数据依赖</strong></p><ul><li><p>数据依赖的类型</p><ul><li>函数依赖（Functional Dependency，简记为FD）</li><li>多值依赖（Multivalued Dependency，简记为MVD）</li><li>其他</li></ul></li><li><p>数据依赖对关系模式的影响</p><ul><li>“好”的模式：<ul><li>不会发生插入异常、删除异常、更新异常，</li><li>数据冗余应尽可能少</li><li>原因：由存在于模式中的某些数据依赖引起的</li><li>解决方法：通过分解关系模式来消除其中不合适的数据依赖</li></ul></li></ul></li><li><p>函数依赖</p><ul><li><p><strong>定义6.1</strong> 设R(U)是一个属性集U上的关系模式，X和Y是U的子集。若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等， 而在Y上的属性值不等， 则称 “X函数确定Y” 或 “Y函数依赖于X”，记作X→Y。</p></li><li><p>在关系模式R(U)中，对于U的子集X和Y，</p><ul><li>如果X→Y，但Y Í X，则称X→Y是非平凡的函数依赖</li><li>若X→Y，但Y Í X, 则称X→Y是平凡的函数依赖</li><li>若X→Y，则X称为这个函数依赖的决定属性组，也称为决定因素（Determinant）。</li><li>若X→Y，Y→X，则记作X←→Y。</li><li>若Y不函数依赖于X，则记作X→Y。</li></ul></li></ul></li><li><p>完全函数依赖与部分函数依赖</p><ul><li><strong>定义6.2</strong> 在R(U)中，如果X→Y，并且对于X的任何一个真子集X’，都有X’ Y, 则称Y对X完全函数依赖，记作X→F Y 。 若X→Y，但Y不完全函数依赖于X，则称Y对X部分函数依赖，记作X→P Y。</li></ul></li><li><p>传递函数依赖</p><ul><li><p><strong>定义6.3</strong> 在R(U)中，如果X→Y，(Y ÍX) ,Y→X Y→Z， 则称Z对X传递函数依赖。记为：X →传递 Z</p></li><li><p>注: 如果Y→X， 即X←→Y，则Z直接依赖于X。</p></li></ul></li><li><p>码</p><ul><li><p><strong>定义6.4</strong> 设K为R&lt;U,F&gt;中的属性或属性组合。若K U， 则K称为R的侯选码（Candidate Key）。若候选码多于一个，则选定其中的一个做为主码（Primary Key）。</p></li><li><p>主属性与非主属性</p><ul><li>包含在任何一个候选码中的属性 ，称为主属性（Prime attribute）</li><li>不包含在任何码中的属性称为非主属性（Nonprime attribute）或非码属性（Non-key attribute）</li></ul></li><li><p>全码</p><ul><li>整个属性组是码，称为全码（All-key）</li></ul></li></ul></li><li><p>外部码</p><ul><li>定义6.5 关系模式 R 中属性或属性组X 并非 R的码，但 X 是另一个关系模式的码，则称 X 是R 的外部码（Foreign key）也称外码</li></ul></li></ul></li><li><p><strong>范式</strong></p><ul><li>范式是符合某一种级别的关系模式的集合</li><li>关系数据库中的关系必须满足一定的要求。满足不同程度要求的为不同范式</li><li>范式的种类：  <ul><li>第一范式(1NF)</li><li>第二范式(2NF)</li><li>第三范式(3NF)</li><li>BC范式(BCNF)</li><li>第四范式(4NF)</li><li>第五范式(5NF)</li></ul></li><li>各种范式之间存在联系：</li><li>某一关系模式R为第n范式，可简记为R∈nNF。</li><li>一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化</li><li>1NF<ul><li>1NF的定义<ul><li>如果一个关系模式R的<strong>所有属性都是不可分的基本数据项</strong>，则R∈1NF</li></ul></li><li>第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库</li><li>但是满足第一范式的关系模式并不一定是一个好的关系模式</li></ul></li><li>2NF<ul><li>2NF的定义<ul><li>  定义6.6 若<strong>R∈1NF，且每一个非主属性完全函数依赖于码</strong>，则R∈2NF。</li></ul></li></ul></li><li>3NF<ul><li>3NF的定义<ul><li>定义6.7 关系模式R&lt;U，F&gt; 中若不存在这样的码X、属性组Y及非主属性Z（Z Í Y）, 使得X→Y，Y→Z成立， Y → X，则称R&lt;U，F&gt; ∈ 3NF。</li><li>若R∈3NF，则<strong>每一个非主属性既不部分依赖于码也不传递依赖于码</strong>。</li></ul></li></ul></li><li>BC范式（BCNF）<ul><li>定义6.8 关系模式R&lt;U，F&gt;∈1NF，若X→Y且Y Í X时，X必含有码，则R&lt;U，F&gt; ∈BCNF。</li><li>等价于：每一个决定属性因素都包含码</li><li>若R∈BCNF<ul><li>所有非主属性对每一个码都是完全函数依赖</li><li>所有的主属性对每一个不包含它的码，也是完全函数依赖</li><li>没有任何属性完全函数依赖于非码的任何一组属性</li></ul></li><li>R ∈BCNF <img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302542269.png" alt="img"><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302559238.png" alt="img"> R ∈3NF</li></ul></li></ul></li><li><p><strong>多值依赖</strong></p><ul><li>定义6.9<ul><li>设R(U)是一个属性集U上的一个关系模式， X、 Y和Z是U的子集，并且Z＝U－X－Y。关系模式R(U)中多值依赖 X→→Y成立，当且仅当对R(U)的任一关系r，给定的一对（x，z）值，有一组Y的值，这组值仅仅决定于x值而与z值无关</li></ul></li><li>多值依赖的另一个等价的形式化的定义：<ul><li>在R（U）的任一关系r中，如果存在元组t，s 使得t[X]=s[X]，那么就必然存在元组 w，vÎ r，（w，v可以与s，t相同），使得w[X]=v[X]=t[X]，而w[Y]=t[Y]，w[Z]=s[Z]，v[Y]=s[Y]，v[Z]=t[Z]（即交换s，t元组的Y值所得的两个新元组必在r中），则Y多值依赖于X，记为X→→Y。 这里，X，Y是U的子集，Z=U-X-Y。</li></ul></li><li>平凡多值依赖和非平凡的多值依赖<ul><li>若X→→Y，而Z＝φ，则称X→→Y为平凡的多值依赖</li><li>否则称X→→Y为非平凡的多值依赖</li></ul></li><li>多值依赖的性质<ul><li>（1）多值依赖具有对称性。若X→→Y，则X→→Z，其中Z＝U－X－Y</li><li>（2）多值依赖具有传递性。若X→→Y，Y→→Z， 则X→→Z –Y</li><li>（3）函数依赖是多值依赖的特殊情况。若X→Y，则X→→Y。</li><li>（4）若X→→Y，X→→Z，则X→→YÈ Z。</li><li>（5）若X→→Y，X→→Z，则X→→Y∩Z。</li><li>（6）若X→→Y，X→→Z，则X→→Y-Z，X→→Z -Y。</li></ul></li><li>多值依赖与函数依赖的区别<ul><li>(1) 多值依赖的有效性与属性集的范围有关</li><li>(2)<ul><li>若函数依赖X→Y在R（U）上成立，则对于任何Y’ Ì Y均有X→Y’ 成立</li><li>多值依赖X→→Y若在R(U)上成立，不能断言对于任何Y’ Ì Y有X→→Y’ 成立</li></ul></li></ul></li><li>4NF<ul><li>定义6.10 关系模式R&lt;U，F&gt;∈1NF，如果对于R的每个非平凡多值依赖X→→Y（Y Í X），X都含有码，则R∈4NF。</li><li>如果R ∈ 4NF， 则R ∈ BCNF<ul><li>不允许有非平凡且非函数依赖的多值依赖</li><li>允许的非平凡多值依赖是函数依赖</li></ul></li></ul></li></ul></li><li><p><strong>数据依赖的公理系统</strong></p><ul><li><p>逻辑蕴含</p><ul><li>定义6.11 对于满足一组函数依赖 F 的关系模式R &lt;U，F&gt;，其任何一个关系r，若函数依赖X→Y都成立, （即r中任意两元组t，s，若tX］=sX］，则tY］=sY］），则称F逻辑蕴含X →Y</li></ul></li><li><p>关系模式R &lt;U，F &gt;来说有以下的推理规则：</p><ul><li><p>A1.自反律（Reflexivity）：若Y Í X Í U，则X →Y为F所蕴含。</p></li><li><p>A2.增广律（Augmentation）：若X→Y为F所蕴含，且Z Í U，则XZ→YZ为F所蕴含。</p></li><li><p>A3.传递律（Transitivity）：若X→Y及Y→Z为F所蕴含，则X→Z为F所蕴含。</p><ul><li><p>自反律: 若Y Í X Í U，则X →Y为F所蕴含</p><p>证: 设Y Í X Í U</p><p>对R &lt;U，F&gt; 的任一关系r中的任意两个元组t，s：</p><p>若t[X]=s[X]，由于Y Í X，有t[y]=s[y]，</p><p>所以X→Y成立，自反律得证</p></li><li><p>增广律: 若X→Y为F所蕴含，且Z Í U，则XZ→YZ 为F所蕴含。</p><p>证：设X→Y为F所蕴含，且Z Í U。</p><p>设R&lt;U，F&gt; 的任一关系r中任意的两个元组t，s：</p><p>若t[XZ]=s[XZ]，则有t[X]=s[X]和t[Z]=s[Z]；</p><p>由X→Y，于是有t[Y]=s[Y]，所以t[YZ]=s[YZ]，所以</p><p>XZ→YZ为F所蕴含，增广律得证。</p></li><li><p>传递律：若X→Y及Y→Z为F所蕴含，则X→Z为 F所蕴含。</p><p>证：设X→Y及Y→Z为F所蕴含。</p><p>对R&lt;U，F&gt; 的任一关系 r中的任意两个元组 t，s：</p><p>若t[X]=s[X]，由于X→Y，有 t[Y]=s[Y]；</p><p>再由Y→Z，有t[Z]=s[Z]，所以X→Z为F所蕴含，传递律得证。</p></li></ul></li></ul></li><li><p>导出规则</p><ul><li><p>1.根据A1，A2，A3这三条推理规则可以得到下面三条推理规则：</p><ul><li><p>合并规则：由X→Y，X→Z，有X→YZ。</p><p>（A2， A3）</p></li><li><p>伪传递规则：由X→Y，WY→Z，有XW→Z。</p><p>（A2， A3）</p></li><li><p>分解规则：由X→Y及 ZÍY，有X→Z。</p><p>（A1， A3）</p></li></ul></li><li><p>2.根据合并规则和分解规则，可得引理6.1</p><ul><li>引理6.l X→A1 A2…Ak成立的充分必要条件是X→Ai成立（i=l，2，…，k）</li></ul></li></ul></li><li><p>函数依赖闭包</p><ul><li>定义6.l2 在关系模式R&lt;U，F&gt;中为F所逻辑蕴含的函数依赖的全体叫作 F的闭包，记为F+。</li><li>定义6.13 设F为属性集U上的一组函数依赖，X ÍU， XF+ ={ A|X→A能由F 根据Armstrong公理导出}，XF+称为属性集X关于函数依赖集F 的闭包</li></ul></li><li><p>函数依赖集等价</p><ul><li><p>定义6.14 如果G+=F+，就说函数依赖集F覆盖G（F是G的覆盖，或G是F的覆盖），或F与G等价。</p></li><li><p>引理6.3 F+ = G+ 的充分必要条件是F Í G+ ，和G Í F+</p><p>证: 必要性显然，只证充分性。</p><p>（1）若FÍG+ ，则XF+ Í XG++ 。</p><p>（2）任取X→YÎF+ 则有 Y Í XF+ Í XG++ 。</p><p>​     所以X→Y Î (G+）+= G+。即F+ Í G+。</p><p>（3）同理可证G+ Í F+ ，所以F+ = G+。</p></li></ul></li><li><p>最小依赖集</p><ul><li>定义6.15 如果函数依赖集F满足下列条件，则称F为一个极小函数依赖集。亦称为最小依赖集或最小覆盖。<ul><li>(1) F中任一函数依赖的右部仅含有一个属性。</li><li>(2) F中不存在这样的函数依赖X→A，使得F与F-{X→A}等价。</li><li>(3) F中不存在这样的函数依赖X→A， X有真子集Z使得F-{X→A}∪{Z→A}与F等价。</li></ul></li></ul></li><li><p>极小化过程</p><ul><li><p>定理6.3 每一个函数依赖集F均等价于一个极小函数依赖集Fm。此Fm称为F的最小依赖集。</p><p>证明: 构造性证明，找出F的一个最小依赖集。</p><p>(1)逐一检查F中各函数依赖FDi：X→Y，若Y=A1A2 …Ak，k &gt; 2，</p><p>则用 { X→Aj |j=1，2，…， k} 来取代X→Y。</p><p>(2)逐一检查F中各函数依赖FDi：X→A，令G=F-{X→A}，</p><p>若AÎXG+， 则从F中去掉此函数依赖。</p><p>(3)逐一取出F中各函数依赖FDi：X→A，设X=B1B2…Bm，</p><p>逐一考查Bi （i=l，2，…，m），若A Î（X-Bi ）F+ ，</p><p>则以X-Bi 取代X。</p></li></ul></li><li><p>模式的分解</p><ul><li>三种模式分解等价的定义：<ul><li>⒈ 分解具有无损连接性</li><li>⒉ 分解要保持函数依赖</li><li>⒊ 分解既要保持函数依赖，又要具有无损连接性</li></ul></li><li>定义6.16 关系模式R&lt;U,F&gt;的一个分解：<em>ρ</em>={ R1&lt;U1,F1&gt;，R2&lt;U2,F2&gt;，…，Rn&lt;Un,Fn&gt;}，U= ∪U<em>i</em>，且不存在 Ui Í Uj，Fi 为 F在 Ui 上的投影</li><li>定义6.17 函数依赖集合{X→Y | X→Y Î F+∧XY ÍUi} 的一个覆盖 Fi 叫作 F 在属性 Ui 上的投影</li></ul></li><li><p>具有无损连接性的模式分解</p><ul><li>关系模式R&lt;U,F&gt;的一个分解 ρ={ R1&lt;U1,F1&gt;，R2&lt;U2,F2&gt;， …，Rn&lt;Un,Fn&gt;}，若R与R1、R2、…、Rn自然连接的结果相等，则称关系模式R的这个分解ρ具有无损连接性（Lossless join）</li><li>具有无损连接性的分解保证不丢失信息</li><li>无损连接性不一定能解决插入异常、删除异常、修改复杂、数据冗余等问题</li></ul></li><li><p>保持函数依赖的模式分解</p><ul><li>设关系模式R&lt;U,F&gt;被分解为若干个关系模式，R1&lt;U1,F1&gt;，R2&lt;U2,F2&gt;，…，Rn&lt;Un,Fn&gt; ，（其中U=U1∪U2∪…∪Un，且不存在Ui Í Uj，Fi为F在Ui上的投影），若F所逻辑蕴含的函数依赖一定也由分解得到的某个关系模式中的函数依赖Fi所逻辑蕴含，则称关系模式R的这个分解是保持函数依赖的（Preserve dependency）</li></ul></li><li><p>关系模式的规范化，其基本思想：</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230255351.png" alt="img"></p></li><li><p>小结</p><ul><li>若要求分解具有无损连接性，那么模式分解一定能够达到4NF</li><li>若要求分解保持函数依赖，那么模式分解一定能够达到3NF，但不一定能够达到BCNF</li><li>若要求分解既具有无损连接性，又保持函数依赖，则模式分解一定能够达到3NF，但不一定能够达到BCNF</li></ul></li></ul></li></ul><p><strong>数据库设计</strong></p><ol><li><p>数据库设计的特点</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302558747.png" alt="img"></p></li><li><p>数据库设计方法</p></li></ol><ul><li>基本思想：过程迭代和逐步求精<ul><li>新奥尔良（New Orleans）方法<ul><li>将数据库设计分为若干阶段和步骤</li></ul></li><li>基于E-R模型的数据库设计方法<ul><li>概念设计阶段广泛采用</li></ul></li><li>3NF（第三范式）的设计方法<ul><li>逻辑阶段可采用的有效方法</li></ul></li><li>ODL（Object Definition Language）方法<ul><li>面向对象的数据库设计方法</li></ul></li><li>计算机辅助设计<ul><li>ORACLE Designer 2000</li><li>SYBASE PowerDesigner</li></ul></li></ul></li><li>数据库设计的基本步骤<ul><li>数据库设计分6个阶段<ul><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施</li><li>数据库运行和维护</li></ul></li><li>需求分析和概念设计独立于任何数据库管理系统</li><li>逻辑设计和物理设计与选用的DBMS密切相关</li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302576437.png" alt="img"></p><ol><li>数据库设计过程中的各级模式</li></ol><ul><li><p>数据库设计不同阶段形成的数据库各级模式</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302577583.png" alt="img"></p></li></ul><ol><li>结构化分析方法（Structured Analysis，简称SA方法）</li></ol><ul><li><p>从最上层的系统组织机构入手</p></li><li><p>自顶向下、逐层分解分析系统</p><ul><li>1．首先把任何一个系统都抽象为：</li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230258648.png" alt="img"></p><ul><li><p>2．分解处理功能和数据</p><ul><li>(1)分解处理功能<ul><li>将处理功能的具体内容分解为若干子功能</li></ul></li><li>(2)分解数据<ul><li>处理功能逐步分解同时，逐级分解所用数据，形成若干层次的数据流图</li></ul></li><li>(3)表达方法<ul><li>处理逻辑：用判定表或判定树来描述</li><li>数据：用数据字典来描述</li></ul></li></ul></li><li><p>3．将分析结果再次提交给用户，征得用户的认可</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302588239.png" alt="img"></p></li></ul></li></ul><ol><li>数据字典</li></ol><ul><li><p>数据字典的用途</p><ul><li>进行详细的数据收集和数据分析所获得的主要结果</li></ul></li><li><p>数据字典的内容</p><ul><li>数据项</li><li>数据结构</li><li>数据流</li><li>数据存储</li><li>处理过程</li></ul></li><li><p>⒈ 数据项</p><ul><li><p>数据项是不可再分的数据单位</p></li><li><p>对数据项的描述</p><p>数据项描述＝｛数据项名，数据项含义说明，别名，</p><p>数据类型，长度，取值范围，取值含义，</p><p>​      与其他数据项的逻辑关系，数据项之间的联系 ｝</p></li></ul></li><li><p>⒉ 数据结构</p><ul><li><p>数据结构反映了数据之间的组合关系。</p></li><li><p>一个数据结构可以由若干个数据项组成，也可以由若干个数据结构组成，或由若干个数据项和数据结构混合组成。</p></li><li><p>对数据结构的描述</p><p>数据结构描述＝｛数据结构名，含义说明，</p><p>组成:｛数据项或数据结构｝｝</p></li></ul></li><li><p>⒊ 数据流</p><ul><li><p>数据流是数据结构在系统内传输的路径。</p></li><li><p>对数据流的描述</p><p>数据流描述＝｛ 数据流名，说明，数据流来源，</p><p>数据流去向，组成:｛数据结构｝，</p><p>平均流量，高峰期流量｝</p></li></ul></li><li><p>⒋ 数据存储</p><ul><li><p>数据存储是数据结构停留或保存的地方，也是数据流的来源和去向之一。</p></li><li><p>对数据存储的描述</p><p>数据存储描述＝｛数据存储名，说明，编号，</p><p>​       输入的数据流 ，输出的数据流 ，</p><p>​       组成:｛数据结构｝，数据量，存取频度，存取方式｝</p></li></ul></li><li><p>⒌ 处理过程</p><ul><li><p>具体处理逻辑一般用判定表或判定树来描述</p></li><li><p>处理过程说明性信息的描述</p><p>处理过程描述＝｛处理过程名，说明，输入:｛数据流｝，</p><p>输出:｛数据流｝，处理:｛简要说明｝｝</p></li></ul></li></ul><ol><li>概念结构设计</li></ol><ul><li>设计概念结构的四类方法<ul><li>自顶向下</li></ul></li></ul><ol><li>首先定义全局概念结构的框架，然后逐步细化</li></ol><ul><li>自底向上</li></ul><ol><li>首先定义各局部应用的概念结构，然后将它们集成起来，得到全局概念结构</li></ol><ul><li>逐步扩张</li></ul><ol><li>首先定义最重要的核心概念结构，然后向外扩充，以滚雪球的方式逐步生成其他概念结构，直至总体概念结构</li></ol><ul><li>混合策略</li></ul><ol><li>将自顶向下和自底向上相结合，用自顶向下策略设计一个全局概念结构的框架，以它为骨架集成由自底向上策略中设计的各局部概念结构。</li></ol><ul><li><p>常用策略</p><ul><li><p>自顶向下地进行需求分析</p></li><li><p>自底向上地设计概念结构</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302594127.png" alt="img"></p></li></ul></li><li><p>自底向上设计概念结构的步骤</p><ul><li><p>  第1步：抽象数据并设计局部视图</p></li><li><p>第2步：集成局部视图，得到全局概念结构</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230259780.png" alt="img"></p></li></ul></li><li><p>数据抽象与局部视图设计</p><ul><li><p>数据抽象</p><ul><li>三种常用抽象<ul><li>\1. 分类（Classification）<ul><li>定义某一类概念作为现实世界中一组对象的类型</li><li>抽象了对象值和型之间的”is member of”的语义</li></ul></li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302596668.png" alt="img"></p><ul><li>\2. 聚集（Aggregation）<ul><li>定义某一类型的组成成分</li><li>抽象了对象内部类型和成分之间”is part of”的语义</li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212302596145.png" alt="img"></p><ul><li>复杂的聚集，某一类型的成分仍是一个聚集</li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303001195.png" alt="img"></p><ul><li>\3. 概括（Generalization）<ul><li>定义类型之间的一种子集联系</li><li>抽象了类型之间的”is subset of”的语义</li><li>继承性</li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303002307.png" alt="img"></p></li><li><p>局部视图设计</p><ul><li>设计分E-R图的步骤:<ul><li>⒈选择局部应用<ul><li>在多层的数据流图中选择一个适当层次的数据流图，作为设计分E-R图的出发点</li><li>通常以中层数据流图作为设计分E-R图的依据</li></ul></li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303015438.png" alt="img"></p><ul><li>⒉逐一设计分E-R图<ul><li>任务<ul><li>将各局部应用涉及的数据分别从数据字典中抽取出来</li><li>参照数据流图，标定各局部应用中的实体、实体的属性、标识实体的码</li><li>确定实体之间的联系及其类型（1:1，1:n，m:n）</li></ul></li><li>两条准则：<ul><li>（1）属性不能再具有需要描述的性质。即属性必须是不可分的数据项，不能再由另一些属性组成</li><li>（2）属性不能与其他实体具有联系。联系只发生在实体之间</li></ul></li><li>举例</li></ul></li></ul><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303024981.png" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303025570.png" alt="img"></p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303028983.png" alt="img"></p></li></ul></li></ul><ol><li>逻辑结构设计</li></ol><ul><li>E-R图向关系模型的转换</li><li>数据模型的优化<ul><li>优化数据模型的方法<ul><li>1确定数据依赖<ul><li>按需求分析阶段所得到的语义，分别写出每个关系模式内部各属性之间的数据依赖以及不同关系模式属性之间数据依赖</li></ul></li><li>2消除 冗余的联系<ul><li>对于各个关系模式之间的数据依赖进行极小化处理，消除 冗余的联系。</li></ul></li><li>3确定所属范式<ul><li>按照数据依赖的理论对关系模式逐一进行分析</li><li>考查是否存在部分函数依赖、传递函数依赖、多值依赖等</li><li>确定各关系模式分别属于第几范式</li></ul></li><li>4按照需求分析阶段得到的各种应用对数据处理的要求，分析对于这样的应用环境这些模式是否合适，确定是否要对它们进行合并或分解。</li><li>注意：并不是规范化程度越高的关系就越优，一般说来，第三范式就足够了</li><li>5按照需求分析阶段得到的各种应用对数据处理的要求，对关系模式进行必要的分解，以提高数据操作的效率和存储空间的利用率</li></ul></li></ul></li><li>设计用户子模式<ul><li>定义用户外模式时应该注重的问题<ul><li>包括三个方面：<ul><li>(1) 使用更符合用户习惯的别名</li><li>(2) 针对不同级别的用户定义不同的View ，以满足系统对安全性的要求。</li><li>(3) 简化用户对系统的使用</li></ul></li></ul></li></ul></li></ul><ol><li>数据库的物理设计</li></ol><ul><li>数据库物理设计的内容和方法</li><li>关系模式存取方法选择<ul><li>DBMS常用存取方法<ul><li>索引方法<ul><li>目前主要是B+树索引方法</li><li>经典存取方法，使用最普遍</li></ul></li><li>聚簇（Cluster）方法<ul><li>HASH方法</li></ul></li></ul></li><li>选择索引存取方法的一般规则<ul><li>如果一个(或一组)属性经常在查询条件中出现，则考虑在这个(或这组)属性上建立索引(或组合索引)</li><li>如果一个属性经常作为最大值和最小值等聚集函数的参数，则考虑在这个属性上建立索引</li><li>如果一个(或一组)属性经常在连接操作的连接条件中出现，则考虑在这个(或这组)属性上建立索引</li></ul></li><li>聚簇<ul><li>为了提高某个属性（或属性组）的查询速度，把这个或这些属性（称为聚簇码）上具有相同值的元组集中存放在连续的物理块称为聚簇</li></ul></li><li>聚簇的用途<ul><li>\1. 大大提高按聚簇码进行查询的效率</li><li>\2. 节省存储空间<ul><li>聚簇以后，聚簇码相同的元组集中在一起了，因而聚簇码值不必在每个元组中重复存储，只要在一组中存一次就行了</li></ul></li></ul></li><li>聚簇的局限性<ul><li>\1. 聚簇只能提高某些特定应用的性能</li><li>\2. 建立与维护聚簇的开销相当大<ul><li>对已有关系建立聚簇，将导致关系中元组移动其物理存储位置，并使此关系上原有的索引无效，必须重建</li><li>当一个元组的聚簇码改变时，该元组的存储位置也要做相应移动</li></ul></li></ul></li></ul></li><li>确定数据的存放位置<ul><li>根据应用情况将<ul><li>易变部分与稳定部分分开存放</li><li>存取频率较高部分与存取频率较低部分，分开存放</li></ul></li></ul></li><li>评价物理结构</li></ul><ol><li>小结（续）</li></ol><ul><li>在逻辑设计阶段将E-R图转换成具体的数据库产品支持的数据模型如关系模型，形成数据库逻辑模式。然后根据用户处理的要求，安全性的考虑，在基本表的基础上再建立必要的视图（VIEW）形成数据的外模式</li><li>在物理设计阶段根据DBMS特点和处理的需要，进行物理存储安排，设计索引，形成数据库内模式</li></ul><p><strong>数据库编程</strong></p><ul><li>嵌入式SQL</li></ul><ol><li>嵌入式SQL的处理过程</li></ol><ul><li>数据库工作单元与源程序工作单元之间的通信：<ul><li>\1. SQL通信区<ul><li>向主语言传递SQL语句的执行状态信息</li><li>使主语言能够据此控制程序流程</li></ul></li><li>\2. 主变量<ul><li>主语言向SQL语句提供参数</li><li>将SQL语句查询数据库的结果交主语言进一步处理</li></ul></li><li>\3. 游标<ul><li>解决集合性操作语言与过程性操作语言的不匹配</li></ul></li></ul></li></ul><ol><li>嵌入式SQL与主语言的通信</li></ol><ul><li><p>在SQL语句中使用主变量和指示变量的方法</p><ul><li><ol><li>说明主变量和指示变量</li></ol><p><strong>BEGIN DECLARE SECTION</strong></p><p>  <strong>………</strong></p><p>  <strong>……… (说明主变量和指示变量)</strong></p><p>  <strong>………</strong></p><p><strong>END DECLARE SECTION</strong></p></li><li><ol start="2"><li>使用主变量</li></ol><ul><li>说明之后的主变量可以在SQL语句中任何一个能够使用表达式的地方出现</li><li>为了与数据库对象名（表名、视图名、列名等）区别，SQL语句中的主变量名前要加冒号（:）作为标志</li></ul></li><li><ol start="3"><li>使用指示变量</li></ol><ul><li>指示变量前也必须加冒号标志</li><li>必须紧跟在所指主变量之后</li></ul></li></ul></li><li><p>在SQL语句之外(主语言语句中)使用主变量和指示变量的方法</p><ul><li>可以直接引用，不必加冒号</li></ul></li><li><p>游标（cursor）</p><ul><li>SQL语言与主语言具有不同数据处理方式</li><li>SQL语言是面向集合的，一条SQL语句原则上可以产生或处理多条记录</li><li>主语言是面向记录的，一组主变量一次只能存放一条记录</li><li>仅使用主变量并不能完全满足SQL语句向应用程序输出数据的要求</li><li>嵌入式SQL引入了游标的概念，用来协调这两种不同的处理方式</li><li>游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果</li><li>每个游标区都有一个名字</li><li>用户可以用SQL语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理</li></ul></li><li><p>建立和关闭数据库连接</p><ul><li><p>建立数据库连接</p><p><strong>EXEC SQL CONNECT TO target [AS connection-name] [USER user-name];</strong></p><ul><li>target是要连接的数据库服务器：<ul><li>常见的服务器标识串，如<dbname>@<hostname>:<port></port></hostname></dbname></li><li>包含服务器标识的SQL串常量</li><li>DEFAULT</li></ul></li><li>connect-name是可选的连接名，连接必须是一个有效的标识符 在整个程序内只有一个连接时可以不指定连接名</li></ul></li><li><p>关闭数据库连接</p><p><strong>EXEC SQL DISCONNECT [connection];</strong></p></li><li><p>程序运行过程中可以修改当前连接 ：</p><p><strong>EXEC SQL SET CONNECTION connection-name | DEFAULT;</strong></p></li></ul></li><li><p>不用游标的SQL语句的种类</p><ul><li>说明性语句</li><li>数据定义语句</li><li>数据控制语句</li><li>查询结果为单记录的SELECT语句</li><li>非CURRENT形式的增删改语句</li></ul></li><li><p>使用游标的SQL语句</p><ul><li><p>查询结果为多条记录的SELECT语句</p><ul><li><p>使用游标的步骤</p><ul><li><p>\1. 说明游标</p><ul><li><p>使用DECLARE语句</p></li><li><p>语句格式</p><p><strong>EXEC SQL DECLARE &lt;游标名&gt; CURSOR</strong></p><p><strong>FOR ;</strong></p></li><li><p>功能</p><p>是一条说明性语句，这时DBMS并不执行SELECT指定的查询操作。</p></li></ul></li><li><p>\2. 打开游标</p><ul><li><p>使用OPEN语句</p></li><li><p>语句格式</p><p><strong>EXEC SQL OPEN &lt;游标名&gt;;</strong></p></li><li><p>功能</p><p>打开游标实际上是执行相应的SELECT语句，把所有满足查询条件的记录从指定表取到缓冲区中这时游标处于活动状态，指针指向查询结果集中第一条记录</p></li></ul></li><li><p>3.推进游标指针并取当前记录</p><ul><li><p>使用FETCH语句</p></li><li><p>语句格式</p><p><strong>EXEC SQL FETCH [[NEXT|PRIOR|</strong></p><p><strong>FIRST|LAST] FROM] &lt;游标名&gt;</strong></p><p><strong>INTO &lt;主变量&gt;[&lt;指示变量&gt;][,&lt;主变量&gt;[&lt;指示变量&gt;]]…;</strong></p></li><li><p>功能</p><p>指定方向推动游标指针，然后将缓冲区中的当前记录取出来送至主变量供主语言进一步处理</p><p>NEXT|PRIOR|FIRST|LAST：指定推动游标指针的方式</p><p>NEXT：向前推进一条记录</p><p>PRIOR：向回退一条记录</p><p>FIRST：推向第一条记录</p><p>LAST：推向最后一条记录</p><p>缺省值为NEXT</p></li></ul></li><li><p>\4. 关闭游标</p><ul><li><p>使用CLOSE语句</p></li><li><p>语句格式</p><p><strong>EXEC SQL CLOSE &lt;游标名&gt;;</strong></p></li><li><p>功能</p><p>关闭游标，释放结果集占用的缓冲区及其他资源</p></li><li><p>说明</p><p>游标被关闭后，就不再和原来的查询结果集相联系</p><p>被关闭的游标可以再次被打开，与新的查询结果相联系</p></li></ul></li></ul></li></ul></li><li><p>CURRENT形式的UPDATE语句</p><ul><li><p>CURRENT形式的UPDATE语句和DELETE语句的用途</p><ul><li>面向集合的操作</li><li>一次修改或删除所有满足条件的记录</li></ul></li><li><p>如果只想修改或删除其中某个记录</p><ul><li><p>用带游标的SELECT语句查出所有满足条件的记录</p></li><li><p>从中进一步找出要修改或删除的记录</p></li><li><p>用CURRENT形式的UPDATE语句和DELETE语句修改或删除之</p></li><li><p>UPDATE语句和DELETE语句中的子句：</p><p><strong>WHERE CURRENT OF &lt;游标名&gt;</strong></p><p>表示修改或删除的是最近一次取出的记录，即游标指针指向的记录</p></li></ul></li><li><p>不能使用CURRENT形式的UPDATE语句和DELETE语句 :</p><ul><li>当游标定义中的SELECT语句带有UNION或ORDER BY子句</li><li>该SELECT语句相当于定义了一个不可更新的视图</li></ul></li><li></li></ul></li></ul></li></ul><ol><li>动态SQL</li></ol><ul><li><p>静态嵌入式SQL</p><ul><li>静态嵌入式SQL语句能够满足一般要求</li><li>无法满足要到执行时才能够确定要提交的SQL语句</li></ul></li><li><p>动态嵌入式SQL</p><ul><li>允许在程序运行过程中临时”组装”SQL语句</li><li>支持动态组装SQL语句和动态参数两种形式</li></ul></li><li><p>SQL语句主变量：</p><ul><li>程序主变量包含的内容是SQL语句的内容，而不是原来保存数据的输入或输出变量</li><li>SQL语句主变量在程序执行期间可以设定不同的SQL语句，然后立即执行</li></ul></li><li><p>动态参数</p><ul><li>SQL语句中的可变元素</li><li>使用参数符号(?)表示该位置的数据在运行时设定</li></ul></li><li><p>和主变量的区别</p><ul><li>动态参数的输入不是编译时完成绑定</li><li>而是通过 (prepare)语句准备主变量和执行(execute)时绑定数据或主变量来完成</li></ul></li><li><p>使用动态参数的步骤：</p><ul><li><p>1.声明SQL语句主变量。</p></li><li><p>2.准备SQL语句(PREPARE)。</p><p><strong>EXEC SQL PREPARE &lt;语句名&gt; FROM ;</strong></p></li><li><p>3.执行准备好的语句(EXECUTE)</p><p><strong>EXEC SQL EXECUTE &lt;语句名&gt; [INTO &lt;主变量表&gt;] [USING &lt;  主变量或常量&gt;];</strong></p></li></ul></li><li><p>存储过程</p></li></ul><ol><li>PL/SQL的块结构</li></ol><ul><li><p>PL/SOL块的基本结构：</p><ul><li><p>1.定义部分</p><p><strong>DECLARE</strong>  </p><p><strong>——变量、常量、游标、异常等</strong></p><ul><li>定义的变量、常量等只能在该基本块中使用</li><li>当基本块执行结束时，定义就不再存在</li></ul></li><li><p>2.执行部分</p><p><strong>BEGIN</strong></p><p><strong>——SQL语句、PL/SQL的流程控制语句</strong></p><p><strong>EXCEPTION</strong></p><p><strong>——异常处理部分</strong>    </p><p><strong>END；</strong></p></li></ul></li><li><p>变量常量的定义</p><ul><li>\1. PL/SQL中定义变量的语法形式是:<ul><li>变量名 数据类型 ［ ［NOT NULL］:=初值表达式］或</li><li>变量名 数据类型 ［ ［NOT NULL］初值表达式］</li></ul></li><li>\2. 常量的定义类似于变量的定义:<ul><li>常量名 数据类型 CONSTANT :=常量表达式</li><li>常量必须要给一个值，并且该值在存在期间或常量的作用域内不能改变。如果试图修改它，PL/SQL将返回一个异常。</li></ul></li><li>\3. 赋值语句<ul><li>变量名称:=表达式</li></ul></li><li>控制结构</li></ul></li><li><p>一、条件控制语句</p><ul><li><p>IF-THEN， IF-THEN-ELSE和嵌套的IF语句</p><p>  <strong>1. IF condition THEN</strong></p><p>   <strong>Sequence_of_statements;</strong></p><p>   <strong>END IF</strong></p><p>  <strong>2. IF condition THEN</strong></p><p>   <strong>Sequence_of_statements1;</strong></p><p>   <strong>ELSE</strong></p><p>   <strong>Sequence_of_statements2;</strong></p><p>   <strong>END IF;</strong></p><p>  <strong>3. 在THEN和ELSE子句中还可以再包括IF语句，即IF语句可以嵌套</strong></p></li></ul></li><li><p>二、循环控制语句</p><ul><li><p>LOOP， WHILE-LOOP和FOR-LOOP</p><p><strong>1.最简单的循环语句LOOP</strong></p><p>   <strong>LOOP</strong></p><p>   <strong>Sequence_of_statements;</strong></p><p>   <strong>END LOOP;</strong></p><p>  <strong>多数数据库服务器的PL/SQL都提供EXIT、BREAK或LEAVE等循环结束语句，保证LOOP语句块能够结束。</strong></p><p><strong>2. WHILE-LOOP</strong></p><p><strong>WHILE condition LOOP</strong></p><p>   <strong>Sequence_of_statements;</strong></p><p>  <strong>END LOOP;</strong></p><p><strong>每次执行循环体语句之前，首先对条件进行求值</strong></p><p><strong>如果条件为真，则执行循环体内的语句序列。</strong></p><p><strong>如果条件为假，则跳过循环并把控制传递给下一个语句</strong></p><p><strong>3. FOR-LOOP</strong></p><p>  <strong>FOR count IN ［REVERSE］bound1 … bound2 LOOP</strong></p><p>   <strong>Sequence_of_statements;</strong></p><p>  <strong>END LOOP;</strong></p></li></ul></li></ul><ol><li>存储过程的用户接口</li></ol><ul><li><p>\1. 创建存储过程：</p><p>  <strong>CREATE Procedure 过程名（［参数1，参数2，…］） AS</strong></p><p>  <strong>；</strong></p><ul><li><p>过程名：数据库服务器合法的对象标识</p></li><li><p>参数列表：用名字来标识调用时给出的参数值，必须指定值的数据类型。参数也可以定义输入参数、输出参数或输入/输出参数。默认为输入参数。</p></li><li><p>过程体：是一个&lt;PL/SQL块&gt;。包括声明部分和可执行语句部分</p></li><li><p>重命名存储过程</p><p><strong>ALTER Procedure 过程名1 RENAME TO 过程名2;</strong></p></li></ul></li><li><p>\2. 执行存储过程：</p><p><strong>CALL/PERFORM Procedure 过程名(［参数1，参数2，…］)；</strong></p><ul><li>使用CALL或者PERFORM等方式激活存储过程的执行。</li><li>在PL/SQL中，数据库服务器支持在过程体中调用其他存储过程</li></ul></li><li><p>\3. 删除存储过程</p><p><strong>DROP PROCEDURE 过程名（）；</strong></p></li></ul><ol><li>ODBC编程</li></ol><p><strong>对象关系数据库系统</strong></p><ul><li>对象关系数据库系统(Object Relational Database System，ORDBS)是面向对象数据模型(Object Oriented Data Model，简称OO模型)和关系数据模型相结合的产物</li><li>面向对象数据模型</li></ul><ol><li>OO模型的核心概念</li></ol><ul><li>1.对象<ul><li>定义：对象是由一组数据结构和在这组数据结构上的操作的程序代码封装起来的基本单位。</li><li>组成部分<ul><li>属性(Attribute)集合<ul><li>属性描述对象的状态、组成和特性</li></ul></li><li>方法(Method)集合<ul><li>描述了对象的行为特性</li></ul></li></ul></li></ul></li><li>\2. 对象标识OID(Object IDentifier)<ul><li>概念：面向对象数据库中的每个对象都有一个唯一的不变的标识称为对象标识(OID)</li><li>特点：<ul><li>永久持久性</li><li>独立于值的、系统全局唯一的</li></ul></li></ul></li><li>\3. 封装(Encapsulation)<ul><li>每一个对象是其状态与行为的封装</li><li>封装是对象的外部界面与内部实现之间实行清晰隔离的一种抽象，外部与对象的通信只能通过消息</li><li>对象封装之后查询属性值必须通过调用方法</li></ul></li><li>\4. 类(Class)<ul><li>对象类(简称类)：共享同样属性和方法集的所有对象构成了一个对象类</li><li>实例：一个对象是某一类的一个实例(instance)</li><li>在OODB中，类是”型”，对象是某一类的一个”值”</li></ul></li></ul><ol><li><p>类层次(结构)</p></li><li><p>继承</p></li><li><p>对象的嵌套</p></li><li><p>关系数据模型与OO模型的比较</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/201110212303037065.png" alt="img"></p></li></ol><ul><li>对象-关系数据库</li></ul><ol><li>对象关系数据库系统中扩展的关系数据类型</li></ol><ul><li><p>1.大对象LOB(Large OBject )类型</p><ul><li>LOB可存储多达十亿字节的串。</li><li>LOB分类<ul><li>二进制大对象BLOB(Binary Large OBject)</li><li>BLOB用于存储音频、图像数据</li><li>字符串大对象CLOB(Character Large OBject)。</li><li>CLOB用于存储长字符串数据</li></ul></li></ul></li><li><p>2.BOOLEAN类型</p><ul><li>布尔类型，支持3个真值：true、false和unknown</li><li>操作符：NOT、AND、OR、EVERY、ANY<ul><li>例如 WHERE EVERY(QTY&gt;200)</li><li>   或WHERE ANY(QTY&gt;200)</li><li>QTY列为空值：返回unknown；</li><li>QTY列为非空：</li><li>当该列的每一个值都使(QTY&gt;200)为true时，EVERY返回true，否则为false；</li><li>当该列的每一个值都使(QTY&gt;200)为false时，ANY返回false，否则为true。</li></ul></li></ul></li><li><p>3.集合类型(Collection Type)ARRAY</p><ul><li><p>相同类型元素的有序集合称为数组ARRAY</p><ul><li>SQL3新增的集合类型</li><li>允许在数据库的一列中存储数组</li></ul></li><li><p>SQL3的数组只能是一维的</p><ul><li><p>数组中的元素不能再是数组</p></li><li><p>［例2］</p><p><strong>CREATE</strong> <strong>TABLE</strong> SALES</p><p><strong>(</strong></p><p>ITEM_NO <strong>CHAR(**20</strong>)**， /<em>商品号</em>/</p><p>QTY <strong>INTEGER</strong> <strong>ARRAY</strong>［12］， /<em>整数数组，存放销售额</em>/</p><p><strong>PRIMARY</strong> <strong>KEY(**ITEM_NO</strong>)**</p><p>**)**；</p></li><li><p>向SALES表插入一个元组：</p></li></ul><p><strong>INSERT</strong> <strong>INTO</strong> SALES**(<strong>ITEM_NO，QTY</strong>)VALUES**</p><p><strong>(</strong>‘T**-<strong>shirt2000’，</strong>ARRAY**［200，150，200，100，50，70，</p><p>80，200，10，20，100，200］**)**；</p><ul><li><p>查找三月份销售额大于100的商品号：</p><p><strong>SELECT</strong> ITEM_NO</p><p><strong>FROM</strong> SALES</p><p><strong>WHERE</strong> QTY［3］**&gt;**100；</p></li></ul></li></ul></li><li><p>\4. DISTINCT类型</p><ul><li><p>SQL3新加了一种DISTINCT类型</p></li><li><p>定义DISTINCT数据类型语法</p><p>CREAT <strong>TYPE</strong> ** name**&gt;**</p><p><strong>AS</strong> <strong>&lt;**built **in** scalar **type** name**&gt;</strong> FINAL</p><p><strong>[</strong> ** <strong>option&gt;]</strong></p><p><strong>[</strong> <strong>&lt;**method specification commalist**&gt;];</strong></p></li><li><p>没有使用DISTINCT类型</p><ul><li>例如，职工的智商字段(IQ)和鞋号字段(SHOE_SIZE)定义成INTEGER类型</li><li>WHERE SHOE_SIZE &gt; IQ</li></ul></li><li><p>使用DISTINCT类型</p><ul><li><p>重新定义这两字段类型</p><p>CREAT <strong>TYPE</strong> SHOE_SIZE_TYPE <strong>AS</strong> <strong>INTEGER</strong> FINAL**;**</p><p>CREAT <strong>TYPE</strong> IQ_TYPE <strong>AS</strong> <strong>INTEGER</strong> FINAL**;**</p></li><li><p>SHOE_SIZE_TYPE和IQ _TYPE成为两种不同的数据类型</p></li><li><p>表达式：WHERE SHOE_SIZE &gt; IQ 是非法的</p></li><li><p>如果在定义类型时设置了选项<cast option="">，下面用法也是合法的：WHERE MY_SHOE_SIZE &gt; CAST (MY_IQ AS SHOE_SIZE)</cast></p></li></ul></li></ul></li></ul><ol><li>对象关系数据库系统中扩展的对象类型及其定义</li></ol><ul><li><p>在ORDBMS中，类型(TYPE)具有类(CLASS)的特征，可以看成类</p><ul><li><p>1.行对象与行类型</p><ul><li><p>定义行类型(ROW TYPE) ：</p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> <strong>&lt;**row_type_name**&gt;</strong></p><p>**(&lt;**component declarations**&gt;)**；</p></li><li><p>创建行类型</p><ul><li><p>［例3］</p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> Person_type</p><p><strong>(**pno **NUMBER</strong>，</p><p>name <strong>VARCHAR2(**100</strong>)**，</p><p>address <strong>VARCHAR2(**100</strong>)** <strong>);</strong></p></li></ul></li><li><p>创建基于行类型的表</p><p><strong>CREATE</strong> <strong>TABLE</strong> <strong>&lt;**table_name**&gt;</strong> <strong>OF</strong> <strong>&lt;**row_type_name**&gt;;</strong></p><ul><li><p>［例4］</p><p><strong>CREATE</strong> <strong>TABLE</strong> person_extent <strong>OF</strong> Person_type</p><p><strong>(**pno **PRIMARY</strong> <strong>KEY</strong> <strong>);</strong></p></li></ul></li></ul></li><li><p>2.列对象与对象类型</p><ul><li><p>可以创建一个对象类型，表的属性可以是该对象类型。</p></li><li><p>创建列对象语句如下:</p><p><strong>CREATE</strong> <strong>TYPE</strong> <strong>&lt;**type_name**&gt;</strong> <strong>AS</strong> <strong>OBJECT</strong></p><p><strong>(&lt;**component declarations**&gt;);</strong></p></li><li><p>［例5］</p><p><strong>CREATE</strong> <strong>TYPE</strong> address_objtyp <strong>AS</strong> <strong>OBJECT</strong></p><p><strong>(**street **VARCHAR2(**50</strong>)**，</p><p>city <strong>VARCHAR2(**50</strong>)** <strong>);</strong></p><p></p><p><strong>CREATE</strong> <strong>TYPE</strong> name_objtyp <strong>AS</strong> <strong>OBJECT</strong></p><p><strong>(**first_name **VARCHAR2(**30</strong>)**，</p><p>last_name <strong>VARCHAR2(**30</strong>)** <strong>)</strong> <strong>;</strong></p></li><li><p>创建表，定义其中的属性是对象类型</p></li><li><p>［例6］</p><p><strong>CREATE</strong> <strong>TABLE</strong> people_reltab <strong>(</strong></p><p>Id <strong>NUMBER(**10</strong>)**，</p><p>name_obj name_objtyp，</p><p>address_obj address_objtyp**);**</p></li></ul></li><li><p>\3. 抽象数据类型(Abastract Data Type，ADT)</p><ul><li><p>概念：SQL3允许用户创建指定的带有自身行为说明和内部结构的用户定义类型称为抽象数据类型</p></li><li><p>定义ADT的一般形式为</p><p><strong>CREATE</strong> <strong>TYPE</strong> <strong>&lt;**type_name**&gt;</strong> <strong>(</strong></p><p>所有属性名及其类型说明，</p><p><strong>[**定义该类型的等于＝和小于</strong>&lt;<strong>函数，</strong>]**</p><p>定义该类型其他函数**(<strong>方法</strong>));**</p></li></ul></li></ul></li></ul><ol><li>参照类型(Reference Type)</li></ol><ul><li><p>REF类型（参照类型、引用类型）</p><ul><li><p>引入的原因：</p><ul><li>类型之间可能具有相互参照的联系</li></ul></li><li><p>形式</p><ul><li>REF &lt;类型名&gt;</li></ul></li><li><p>特点：</p><ul><li>REF类型总是和某个特定的类型相联系。</li><li>它的值是OID</li></ul></li><li><p>创建两个表：Employee和Company，两表之间存在相互参照关系，即某个职工在某个公司工作</p><ul><li><p>(1)创建行类型</p></li><li><p>［例7］</p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> employee_type**(**</p><p>name <strong>VARCHAR(**35</strong>)**，</p><p>age <strong>INTEGER</strong> <strong>);</strong></p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> Comp_type**(**</p><p>compname <strong>VARCHAR(**20</strong>)**，</p><p>location <strong>VARCHAR(**20</strong>)** <strong>);</strong></p></li><li><p>(2)创建基于行类型的表：</p><p><strong>CREATE</strong> <strong>TABLE</strong> Employee <strong>OF</strong> employee_type**;**</p><p><strong>CREATE</strong> <strong>TABLE</strong> Company <strong>OF</strong> Comp_type</p></li><li><p>(3)描述参照关系</p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> Employment_type <strong>(</strong></p><p>employee <strong>REF</strong> <strong>(**employee_type</strong>)**，</p><p>company <strong>REF</strong> <strong>(**Comp_type</strong>)** <strong>);</strong></p><p><strong>CREATE</strong> <strong>TABLE</strong> Employment <strong>OF</strong> Employment _type</p></li><li><p>表Employment中某一个元组的employee属性值是某个职工的OID</p></li><li><p>company属性值是该职工所在公司的OID</p></li><li><p>［例8］</p><p><strong>CREATE</strong> <strong>ROW</strong> <strong>TYPE</strong> employee_type**(**</p><p>name <strong>VARCHAR(**35</strong>)**，</p><p>age <strong>INTEGER</strong>，</p><p>emp_id <strong>REF(**employee_type</strong>)** <strong>);</strong></p></li><li><p>［例9］</p><p><strong>CREATE</strong> <strong>TABLE</strong> Employee <strong>OF</strong> employee_type</p><p><strong>VALUES</strong> <strong>FOR</strong> emp_id <strong>ARE</strong> SYSTEM GENERATED**;**</p></li></ul></li><li><p>建立参照属性：</p><p><strong>&lt;参照属性名&gt;［REF(&lt;类型名&gt;)］SCOPE IS &lt;关系名&gt;</strong></p><ul><li>［例10］</li></ul><p><strong>CREATE</strong> <strong>TABLE</strong> address_objtab <strong>OF</strong> address_objtyp <strong>;</strong></p><ul><li><p>［例11］</p><p><strong>CREATE</strong> <strong>TABLE</strong> people_reltab2 <strong>(</strong></p><p>id <strong>NUMBER(**4</strong>)** <strong>PRIMARY</strong> <strong>KEY</strong>，</p><p>name_obj name_objtyp，</p><p>addresss_ref <strong>REF(**address_objtyp</strong>)** <strong>SCOPE</strong> <strong>IS</strong> address_objtab <strong>)</strong></p></li><li><p>［例12］</p></li></ul><p><strong>CREATE</strong> <strong>INDEX</strong> address_ref_idx <strong>ON</strong> people_reltab2**(<strong>address_ref</strong>)** <strong>;</strong></p><ul><li><p>［例13］</p><p><strong>SELECT</strong> id</p><p><strong>FROM</strong> people_reltab2 p</p><p><strong>WHERE</strong> p**.<strong>address_ref</strong>.<strong>city</strong>=<strong>‘北京’ **and</strong></p><p>p**.<strong>address_ref</strong>.<strong>street</strong>=<strong>‘牛街’</strong>;**</p></li></ul></li><li></li></ul></li></ul><ol><li>继承性</li></ol><ul><li><p>ORDBMS应该支持继承性</p><ul><li><p>一般是单继承性</p><ul><li><p>［例14］</p><p><strong>CREATE</strong> <strong>TYPE</strong> emp_type</p><p><strong>UNDER</strong> person_type <strong>AS(</strong></p><p>emp_id <strong>INTEGER</strong>，</p><p>salary <strong>REAL</strong> <strong>)</strong></p><p><strong>NOT</strong> FINAL**;**</p></li><li><p>NOT FINAL：表示不是类层次结构中最后的”叶结点”</p></li><li><p>FINAL：该类型是类层次结构的叶结点</p></li></ul></li><li></li></ul></li></ul><ol><li>子表和超表</li></ol><ul><li><p>［例15］ 对于下面的类型层次，先定义这些类型TYPE，然后创建基于这些类型的表</p><p><img src="https://images.cnblogs.com/cnblogs_com/luowei010101/201110/20111021230303162.png" alt="img"></p><p><strong>CREATE</strong> <strong>TYPE</strong> person /<em>创建person 类型，根类型</em>/</p><p><strong>(**id **INTEGER</strong>，</p><p>name <strong>VARCHAR(**20</strong>)**，</p><p>birthyear <strong>INTEGER</strong>，</p><p>address <strong>VARCHAR(**40</strong>))**</p><p><strong>NOT</strong> FINAL； /<em>NOT FINAL表示可以有子类型</em>/</p><p><strong>CREATE</strong> <strong>TYPE</strong> employee /<em>创建person的子类型employee</em>/</p><p><strong>UNDER</strong> person /<em>类型employee继承person的属性</em>/</p><p><strong>(**salary **INTEGER)</strong> /* employee定义自己的属性*/</p><p><strong>NOT</strong> FINAL；</p><p><strong>CREATE</strong> <strong>TYPE</strong> executive /<em>创建employee的子类型executive</em>/</p><p><strong>UNDER</strong> employee</p><p><strong>(**bonus **INTEGER)</strong></p><p>FINAL；</p><p><strong>CREATE</strong> <strong>TYPE</strong> student /*创建person的子类型student */</p><p><strong>UNDER</strong> person</p><p><strong>(**major **VARCHAR(**10</strong>)<strong>，wage **DECIMAL)</strong></p><p>FINAL</p></li><li><p>例16］Department类型和employee具有相互参照的联系，使用REF来表示这种联系</p><p><strong>CREATE</strong> <strong>TYPE</strong> department</p><p><strong>(**ID **INTEGER</strong>，</p><p>manager <strong>REF(**employee</strong>)**，</p><p>Budget <strong>INTEGER);</strong></p><p><strong>ALTER</strong> <strong>TYPE</strong> employee</p><p><strong>ADD</strong> ATTRIBUTE dept <strong>REF(**department</strong>);**</p></li><li><p>定义基于这些类型的基本表和表层次：</p><p><strong>CREATE</strong> <strong>TABLE</strong> person_table <strong>OF</strong> person</p><p><strong>(**name **WITH</strong> OPTIONS <strong>NOT</strong> <strong>NULL);</strong></p><p><strong>CREATE</strong> <strong>TABLE</strong> employee_table <strong>OF</strong> employee</p><p><strong>UNDER</strong> person_table**;**</p><p><strong>CREATE</strong> <strong>TABLE</strong> exec_table <strong>of</strong> executive</p><p><strong>UNDER</strong> employee_table</p><p><strong>CREATE</strong> <strong>TABLE</strong> student_table <strong>OF</strong> student</p><p><strong>UNDER</strong> person_table；</p><p><strong>CREATE</strong> <strong>TABLE</strong> dept_table <strong>OF</strong> department</p><p><strong>(**manager **SCOPE</strong> <strong>IS</strong> employee_table**);**</p><p><strong>ALTER</strong> <strong>TABLE</strong> employee_table</p><p><strong>ALTER</strong> <strong>COLUMN</strong> dept <strong>ADD</strong> <strong>SCOPE</strong> <strong>IS</strong> dept_table**;**</p></li><li><p>查询[例16]所创建的表</p><ul><li><p>［例17］</p><p><strong>SELECT</strong> name，address</p><p><strong>FROM</strong> person_table</p><p><strong>WHERE</strong> birthyear <strong>&lt;=**1970</strong>;**</p></li></ul></li><li><p>关闭子表的检索</p><ul><li><p>［例18］</p><p><strong>SELECT</strong> name，address</p><p><strong>FROM</strong> <strong>ONLY</strong> person_table</p><p><strong>WHERE</strong> birthyear <strong>&lt;=**1970</strong>;**</p></li><li><p>INSERT、DELETE、UPDATE对子表和超表的操作规则</p><ul><li>INSERT：向子表插入一行时一般会在该子表的超表上也插入一行。</li><li>DELETE：从表删除一行时一般会在该表的超表和子表上也删除相应的一行</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;数据库概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库(Database,简称DB)是长期储存在计算机内、有组织的、可共享的大量数据的集合。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库系统的特点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;数据结构化&lt;/li&gt;
&lt;li&gt;数据的</summary>
      
    
    
    
    <category term="数据库" scheme="https://rain-sky.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库原理" scheme="https://rain-sky.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
